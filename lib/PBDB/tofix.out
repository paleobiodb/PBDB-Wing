------------ AuthorNames
AuthorNames.pm:1:package PBDB::AuthorNames;
AuthorNames.pm:534:    my $otherAu = AuthorNames->new($otherAuthors);
AuthorNames.pm:537:	  dbg("Created new AuthorNames for OtherAuthors: $otherAuthors",2);
FossilRecord.pm:1484:    my $an = new AuthorNames($auth);
Reference.pm:10:use PBDB::AuthorNames;
Reference.pm:227:    my $an = PBDB::AuthorNames->new($ref);
Reference.pm:1129:        my $an = PBDB::AuthorNames->new($row);
ReferenceEntry.pm:5:use PBDB::AuthorNames;
------------ Cladogram
Cladogram.pm:2:package PBDB::Cladogram;
Cladogram.pm:16:sub displayCladogramChoiceForm {
Cladogram.pm:43:        displayCladogramForm($dbt,$q,$s,$hbo);
Cladogram.pm:50:                displayCladogramForm($dbt,$q,$s,$hbo);
Cladogram.pm:64:            $html .= qq|<li style="padding-bottom: 0.75em;"><a href="$WRITE_URL?action=displayCladogramForm&blank_rows=$blank_rows&cladogram_no=$row->{cladogram_no}">$row->{taxon_name}</a>, $short_ref</li>|;
Cladogram.pm:66:        $html .= qq|<li><a href="$WRITE_URL?action=displayCladogramForm&blank_rows=$blank_rows&cladogram_no=-1&taxon_no=$taxon_no">Create a new cladogram for $taxon->{taxon_name}</a></li>|;
Cladogram.pm:74:sub displayCladogramForm {
Cladogram.pm:82:        print("Cladogram no not set");
Cladogram.pm:103:        $s->enqueue("action=displayCladogramForm&cladogram_no=-1&taxon_no=$taxon_no");
Cladogram.pm:211:        $vars->{'page_title'} = "Cladogram entry form";
Cladogram.pm:213:        $vars->{'page_title'} = "Cladogram editing form";
Cladogram.pm:219:sub submitCladogramForm {
Cladogram.pm:380:        displayCladogramForm($dbt,$q,$s,$hbo,\@errors);
Cladogram.pm:454:    my ($pngname,$caption,$taxon_name) = drawCladogram($dbt,$cladogram_no,1);
Cladogram.pm:464:    print "<a href=\"$WRITE_URL?action=displayCladogramForm&cladogram_no=$cladogram_no\">Edit this cladogram</a> - ";
Cladogram.pm:673:sub drawCladogram {
Cladogram.pm:681:        generateCladogram($dbt,$cladogram_no);
Cladogram.pm:692:sub generateCladogram	{
Cladogram.pm:999:sub mergeCladograms	{
Classic.pm:42:# use Cladogram;
Classic.pm:1990:        : ($goal eq 'cladogram')  ? 'displayCladogramChoiceForm'
Classic.pm:2156:        Cladogram::displayCladogramChoiceForm($dbt,$q,$s,$hbo);
Classic.pm:5159:## Cladogram stuff
Classic.pm:5170:    #Cladogram::displayCladeSearchForm($dbt,$q,$s,$hbo);
Classic.pm:5175:#    Cladogram::processCladeSearch($dbt,$q,$s,$hbo);
Classic.pm:5178:sub displayCladogramChoiceForm	{
Classic.pm:5183:    Cladogram::displayCladogramChoiceForm($dbt,$q,$s,$hbo);
Classic.pm:5186:sub displayCladogramForm	{
Classic.pm:5191:    Cladogram::displayCladogramForm($dbt,$q,$s,$hbo);
Classic.pm:5194:sub submitCladogramForm {
Classic.pm:5199:    Cladogram::submitCladogramForm($dbt,$q,$s,$hbo);
Classic.pm:5202:sub drawCladogram	{
Classic.pm:5209:    my ($pngname, $caption, $taxon_name) = Cladogram::drawCladogram($dbt,$cladogram_no,$force_redraw);
Main.pm:41:# use Cladogram;
TaxonInfo.pm:448:    	    # doCladograms($dbt, $hbo, $q, $s, $taxon_no, $spelling_no, $taxon_name);
TaxonInfo.pm:568:sub doCladograms {
TaxonInfo.pm:616:    <span class="displayPanelHeader" class="large">Cladograms</span>
TaxonInfo.pm:623:            my ($pngname, $caption, $taxon_name) = Cladogram::drawCladogram($dbt,$cladogram_no);
------------ Classic
Classic.pm:79:        $vars->{options} = MyApp::DB::Result::Classic->field_options;
Classic.pm:136:#     my $classic = fetch_object('Classic');
Classic.pm:148:#     my $classic = site_db()->resultset('Classic')->search({uri_part => param('uri_part')},{rows => 1})->single;
Classic.pm:150:#         $classic = fetch_object('Classic', param('uri_part')); # in case they pass in the id instead of a uri_part
Classic.pm:152:#             ouch 440, 'Classic not found.';
------------ Classification
Classic.pm:2299:sub displayClassificationTableForm {
Classic.pm:2308:        $s->enqueue('a=displayClassificationTableForm');
Classic.pm:2313:	FossilRecord::displayClassificationTableForm($dbt, $hbo, $s, $q);	
Classic.pm:2317:sub displayClassificationUploadForm {
Classic.pm:2326:        $s->enqueue('a=displayClassificationUploadForm');
Classic.pm:2331:	FossilRecord::displayClassificationUploadForm($dbt, $hbo, $s, $q);	
Classic.pm:2336:sub submitClassificationTableForm {
Classic.pm:2345:	FossilRecord::submitClassificationTableForm($dbt,$hbo, $s, $q);
Classic.pm:2349:sub submitClassificationUploadForm {
Classic.pm:2358:	FossilRecord::submitClassificationUploadForm($dbt,$hbo, $s, $q);
Classic.pm:3811:            $taxon_no = Taxon::getBestClassification($dbt,$genus_reso,$genus_name,$subgenus_reso,$subgenus_name,$species_reso,$species_name);
Classic.pm:3813:                my @matches = Taxon::getBestClassification($dbt,$genus_reso,$genus_name,$subgenus_reso,$subgenus_name,$species_reso,$species_name);
Classic.pm:4328:	#  getBestClassification as a last resort
Classic.pm:4365:			$fields{'taxon_no'} = Taxon::getBestClassification($dbt,\%fields);
Classification.pm:1:package PBDB::Classification;
Classification.pm:105:        my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:130:            $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:300:            my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt, $child->{'child_no'});
Classification.pm:444:        my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$orig_no,{'reference_no'=>$restrict_to_ref});
CollectionEntry.pm:1270:                        my @all_matches = PBDB::Taxon::getBestClassification($dbt,$rowref);
CollectionEntry.pm:1806:                    my @all_matches = PBDB::Taxon::getBestClassification($dbt,$row);
Confidence.pm:6:use PBDB::Classification;
Download.pm:1828:sub fastClassificationLookups	{
Download.pm:2316:        fastClassificationLookups($dbt,$q->param('taxon_name'),\@taxon_nos);
Download.pm:2662:            # in most cases the fastClassificationLookups value is fine
FossilRecord.pm:207:        my $mrpo = TaxonInfo::getMostRecentClassification($dbt,$orig_ss);
FossilRecord.pm:232:      onMouseOut="setState(1)">Classification</td>
FossilRecord.pm:266:		print '<div align="center"><h3>Classification</h3></div>';
FossilRecord.pm:269:		print TaxonInfo::displayTaxonClassification($dbt, $taxon_no, $taxon_name,$is_real_user);
FossilRecord.pm:373:sub displayClassificationUploadForm {
FossilRecord.pm:382:            $vars->{in_progress} .= "<a href=\"$WRITE_URL?action=displayClassificationTableForm&upload_id=$row->{upload_id}\">$row->{file_name}, $row->{created}</a><br>";
FossilRecord.pm:390:sub submitClassificationUploadForm {
FossilRecord.pm:512:            displayClassificationTableForm($dbt,$hbo,$s,$q,$general_errors,$row_errors,undef,$upload_state,\@next_rows);
FossilRecord.pm:516:        displayClassificationUploadForm($dbt,$hbo,$s,$q);
FossilRecord.pm:521:sub displayClassificationTableForm {
FossilRecord.pm:593:    print "<input type=\"hidden\" name=\"action\" value=\"submitClassificationTableForm\">";
FossilRecord.pm:712:sub submitClassificationTableForm {
FossilRecord.pm:758:            displayClassificationTableForm($dbt,$hbo,$s,$q,$general_errors,$row_errors,1,{},{});
FossilRecord.pm:783:        displayClassificationTableForm($dbt,$hbo,$s,$q,$general_errors,$row_errors,0,$upload,$upload_rows);
FossilRecord.pm:903:              <li><a href="$WRITE_URL?action=displayClassificationUploadForm">Upload a spreadsheet</a></li>
FossilRecord.pm:904:              <li><a href="$WRITE_URL?action=displayClassificationTableForm">Enter a spreadsheet</a></li>
PrintHierarchy.pm:192:		print "<center><p class=\"pageTitle\">Classification of $title</p></center>\n\n";
Reclassify.pm:58:	    print "<center><p class=\"pageTitle\">Classification of \"".$q->param('taxon_name')."\" occurrences</p>";
Reclassify.pm:93:	    print "<center><p class=\"pageTitle\">Classification of taxa in collection ",$q->param('collection_no')," ($coll_name)</p>";
Reclassify.pm:119:            print "<tr><th class=\"large\" colspan=2>Collection</th><th class=\"large\" colspan=2 style=\"text-align: left; padding-left: 2em;\">Classification based on</th></tr>";
Reclassify.pm:123:            print "<tr><th class=\"large\">Taxon name</th><th colspan=2 class=\"large\" style=\"text-align: left; padding-left: 2em;\">Classification based on</th></tr>";
Reclassify.pm:155:            my @all_matches = Taxon::getBestClassification($dbt,$o);
Reclassify.pm:326:        print "<tr><th class=\"large\">Taxon</th><th class=\"large\">Classification based on</th></tr>";
Reclassify.pm:330:        print "<tr><th class=\"large\">Collection</th><th class=\"large\">Classification based on</th></tr>";
Reclassify.pm:334:        print "<tr><th class=\"large\">Taxon</th><th class=\"large\">Classification based on</th></tr>";
TaxaCache.pm:77:            TaxonInfo::getMostRecentClassification($dbt,$orig,{'use_synonyms'=>'no'});
TaxaCache.pm:291:#    my $range_op = TaxonInfo::getMostRecentClassification($dbt,$synonym_no,{'strat_range'=>1});
TaxaCache.pm:475:    #  getMostRecentClassification mean this is no longer true JA 22.1.09
TaxaCache.pm:476:    my $mrpo = TaxonInfo::getMostRecentClassification($dbt,$child_no,{'recompute'=>'yes'});
TaxaCache.pm:536:    my $range_op = TaxonInfo::getMostRecentClassification($dbt,$child_no,{'strat_range'=>1});
TaxaCache.pm:650:    #  getSeniorSynonym, and getMostRecentClassification are all now able
TaxaCache.pm:655:        my $popinion = TaxonInfo::getMostRecentClassification($dbt,$parent_no,{'use_synonyms'=>'no'});
TaxaCache.pm:1095:    my $last_op = TaxonInfo::getMostRecentClassification($dbt,$orig_no);
TaxaCache.pm:1101:            my $last_parent_op = TaxonInfo::getMostRecentClassification($dbt,$orig_no,{'exclude_nomen'=>1}); 
Taxon.pm:23:use PBDB::Classification;
Taxon.pm:1884:    my $parents = Classification::get_classification_hash($dbt,'all',[$type_taxon_no],'array',$reference_no);
Taxon.pm:2143:sub getBestClassification{
Taxon.pm:2480:		TaxonInfo::getMostRecentClassification($dbt,$orig,{'recompute'=>'yes'});
Taxon.pm:2494:		TaxonInfo::getMostRecentClassification($dbt,$orig,{'recompute'=>'yes'});
TaxonInfo.pm:251:        my $mrpo = getMostRecentClassification($dbt,$orig_ss);
TaxonInfo.pm:281:      Classification</td>
TaxonInfo.pm:299:    my ($htmlCOF,$htmlClassification);
TaxonInfo.pm:301:        ($htmlCOF,$htmlClassification) = displayTaxonClassification($dbt, $taxon_no, $taxon_name, $is_real_user);
TaxonInfo.pm:440:        print $htmlClassification;
TaxonInfo.pm:575:        $parent_no = PBDB::Taxon::getBestClassification($dbt,'',$genus,'',$subgenus,'',$species);
TaxonInfo.pm:585:    <span class="displayPanelHeader" class="large">Classification of relatives</span>
TaxonInfo.pm:1175:## displayTaxonClassification
TaxonInfo.pm:1179:sub displayTaxonClassification {
TaxonInfo.pm:1209:        $classification_no = PBDB::Taxon::getBestClassification($dbt,'',$genus,'',$subgenus,'',$species);
TaxonInfo.pm:1247:                # the PBDB does.  PBDB::Taxon::getBestClassification will find a proximate match if we can't
TaxonInfo.pm:1564:        $output .= '<p><b><a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download authority and opinion data</a></b> - <b><a href=# onClick="javascript: document.doViewClassification.submit()">View classification of included taxa</a></b>';
TaxonInfo.pm:1569:        $output .= "<form method=\"POST\" action=\"\" name=\"doViewClassification\">";
TaxonInfo.pm:1686:    #  to getMostRecentClassification because (1) the code was redundant, and
TaxonInfo.pm:1691:    my @results = getMostRecentClassification($dbt,$orig,{'use_synonyms'=>'no'});
TaxonInfo.pm:1697:        # getMostRecentClassification returns the opinions in reliability_index
TaxonInfo.pm:2183:sub getMostRecentClassification {
TaxonInfo.pm:2369:#  getMostRecentClassification by finding the most recent parent opinion
TaxonInfo.pm:2428:# this is an interval function not to be called directly.  call getMostRecentClassification
TaxonInfo.pm:2590:        my $classification_no = PBDB::Taxon::getBestClassification($dbt,'',$genus,'',$subgenus,'',$species);
TaxonInfo.pm:4079:				print qq|<p><a href=# onClick="javascript: document.doViewClassification.submit()">View classification</a></span></p>\n\n|;
TaxonInfo.pm:4080:				print "\n<form method=\"POST\" action=\"\" name=\"doViewClassification\">";
TaxonInfo.pm:4821:        my $parent = getMostRecentClassification($dbt,$taxon_no,$options);
TaxonInfo.pm:4863:        my $recent = getMostRecentClassification($dbt,$t,{'use_synonyms'=>'no'});
TaxonInfo.pm:4879:                my $parent = getMostRecentClassification($dbt,$row->{'child_no'},{'use_synonyms'=>'no'});
TaxonInfo.pm:5225:            my $mrpo = getMostRecentClassification($dbt,$row->{'child_no'});
TaxonInfo.pm:5229:                my $mrpo_no_nomen = getMostRecentClassification($dbt,$row->{'child_no'},{'exclude_nomen'=>1});
TypoChecker.pm:455:                my $best_taxon_no = Taxon::getBestClassification($dbt,'',$g2,'',$sg2,'',$sp2);
------------ Collection
Classic.pm:31:use PBDB::Collection;
Classic.pm:32:use PBDB::CollectionEntry;  # slated for removal
Classic.pm:317:	$row->{latest_collection} = "<a href=\"?a=basicCollectionSearch&amp;collection_no=$coll->{collection_no}\">".$coll->{collection_name}."</a>";
Classic.pm:332:	$sp = PBDB::Collection::getClassOrderFamily($dbt,\$sp,\@class_array);
Classic.pm:340:		$row->{type_locality} = "Type locality <a href=\"?a=basicCollectionSearch&amp;collection_no=".$sp->{type_locality}."\">".${$dbt->getData($sql)}[0]->{collection_name}."</a><br>";
Classic.pm:402:		$row->{collection_links} .= qq|<div class="verysmall collectionLink"><a class="homeBodyLinks" href="?a=basicCollectionSearch&amp;collection_no=$coll->{collection_no}">$coll->{collection_name}</a></div>\n|;
Classic.pm:908:		my $found = PBDB::Collection::basicCollectionSearch($dbt,$q,$s,$hbo);
Classic.pm:910:	# if basicCollectionSearch finds any match it should exit somehow before
Classic.pm:930:			my $found = PBDB::Collection::basicCollectionSearch($dbt,$q,$s,$hbo);
Classic.pm:1029:	$vars{'page_title'} = "Collection search form";
Classic.pm:1035:sub basicCollectionSearch	{
Classic.pm:1040:	PBDB::Collection::basicCollectionSearch($dbt,$q,$s,$hbo);
Classic.pm:1053:	# dataRows might be passed in by basicCollectionSearch
Classic.pm:1109:          ($type eq "add") ? "displayCollectionDetails"
Classic.pm:1110:        : ($type eq "edit") ? "displayCollectionForm"
Classic.pm:1111:        : ($type eq "view") ? "displayCollectionDetails"
Classic.pm:1118:        : "displayCollectionDetails";
Classic.pm:1129:		($dataRows,$ofRows) = processCollectionsSearchForAdd();
Classic.pm:1158:		($dataRows,$ofRows,$warnings,$occRows) = PBDB::CollectionEntry::getCollections($dbt,$s,\%options,$fields);
Classic.pm:1173:		PBDB::Collection::countOccurrences($dbt,$hbo,\@dataRows,$occRows);
Classic.pm:1231:<th>Collection</th>
Classic.pm:1233:<th align=left nowrap>Collection name</th>
Classic.pm:1315:                    print "<td align=center valign=top><a href=\"$exec_url?a=basicCollectionSearch&amp;$COLLECTION_NO=$dataRow->{$COLLECTION_NO}";
Classic.pm:1392:			PBDB::Collection::basicCollectionInfo($dbt,$q,$s,$hbo);
Classic.pm:1400:			displayCollectionForm();
Classic.pm:1414:    # this q2  var is necessary because the processCollectionSearch
Classic.pm:1462:		print qq|<input type="hidden" name="action" value="displayCollectionForm">
Classic.pm:1646:	my $cof = PBDB::Collection::getClassOrderFamily($dbt,'',\@parent_array);
Classic.pm:1651:sub jsonCollection	{
Classic.pm:1655:	PBDB::Collection::jsonCollection($dbt,$q,$s);
Classic.pm:1661:sub processCollectionsSearchForAdd	{
Classic.pm:1670:	# some generally useful trig stuff needed by processCollectionsSearchForAdd
Classic.pm:1687:	    PBDB::CollectionEntry::fromDecDeg($q->param('latdeg'), $q->param('latdec')) :
Classic.pm:1688:		    PBDB::CollectionEntry::fromMinSec($q->param('latdeg'),$q->param('latmin'),$q->param('latsec'));
Classic.pm:1691:	    PBDB::CollectionEntry::fromDecDeg($q->param('lngdeg'),$q->param('lngdec')) :
Classic.pm:1692:		    PBDB::CollectionEntry::fromMinSec($q->param('lngdeg'),$q->param('lngmin'),$q->param('lngsec'));
Classic.pm:1802:        my $distance = 111 * PBDB::CollectionEntry::GCD($mylat,$lat,abs($mylng-$lng));
Classic.pm:1818:sub displayCollectionForm {
Classic.pm:1829:    PBDB::CollectionEntry::displayCollectionForm($dbt,$q,$s,$hbo);
Classic.pm:1833:sub processCollectionForm {
Classic.pm:1842:    PBDB::CollectionEntry::processCollectionForm($dbt,$q,$s,$hbo);
Classic.pm:1847:sub displayCollectionDetails {
Classic.pm:1852:    PBDB::CollectionEntry::displayCollectionDetails($dbt,$q,$s,$hbo);
Classic.pm:1863:    PBDB::Collection::rarefyAbundances($dbt,$q,$s,$hbo);
Classic.pm:1867:sub displayCollectionEcology	{
Classic.pm:1874:	PBDB::Collection::displayCollectionEcology($dbt,$q,$s,$hbo);
Classic.pm:1884:	PBDB::Collection::explainAEOestimate($dbt,$q,$s,$hbo);
Classic.pm:3249:	$header_vars->{collection_number} = qq{[<a href="$WRITE_URL?action=displayCollectionForm&collection_no=$collection_no">$collection_no</a>]};
Classic.pm:3542:        my $collection_name = escapeHTML(generateCollectionLabel($collection_no));
Classic.pm:3544:            qq|<a target="_blank" href="?a=basicCollectionSearch&amp;collection_no=$collection_no"><img border="0" src="/public/collection_labels/$collection_no.png" alt="$collection_name"/></a>|.
Classic.pm:3567:        my $show_name = PBDB::CollectionEntry::formatOccurrenceTaxonName(\%hash);
Classic.pm:3894:                PBDB::CollectionEntry::setSecondaryRef($dbt,$collection_no,$session_ref);
Classic.pm:3902:        my $taxon_name = PBDB::CollectionEntry::formatOccurrenceTaxonName({
Classic.pm:3980:sub generateCollectionLabel {
Classic.pm:4435:	my $taxon_name = PBDB::CollectionEntry::formatOccurrenceTaxonName(\%fields);
Classic.pm:4512:                    unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'})){
Classic.pm:4513:                           PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO},$fields{'reference_no'});
Classic.pm:4535:            unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'}))	{
Classic.pm:4536:               PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO}, $fields{'reference_no'});
Classic.pm:4550:                push @occurrences_to_delete, [$fields{$OCCURRENCE_NO},PBDB::CollectionEntry::formatOccurrenceTaxonName($old_row),$i];
Classic.pm:4568:                    unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'}))	{
Classic.pm:4569:                           PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO}, $fields{'reference_no'});
Classic.pm:4586:            unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'}))	{
Classic.pm:4587:                   PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO}, $fields{'reference_no'});
Classic.pm:4633:            $links .= "<a href=\"$WRITE_URL?a=displayCollectionForm&$COLLECTION_NO=$collection_no\"><nobr>Edit the collection record</nobr></a><br>";
Classic.pm:4655:    	$return = PBDB::CollectionEntry::buildTaxonomicList($dbt,$hbo,$s,{$COLLECTION_NO=>$collection_no, 'hide_reference_no'=>$coll->{'reference_no'},'new_genera'=>\@new_genera, 'new_subgenera'=>\@new_subgenera, 'new_species'=>\@new_species, 'do_reclassify'=>1, 'warnings'=>\@warnings, 'save_links'=>$links });
Classic.pm:4657:    	$return = PBDB::CollectionEntry::buildTaxonomicList($dbt,$hbo,$s,{'occurrence_list'=>\@occurrences, 'new_genera'=>\@new_genera, 'new_subgenera'=>\@new_subgenera, 'new_species'=>\@new_species, 'do_reclassify'=>1, 'warnings'=>\@warnings, 'save_links'=>$links });
Classic.pm:4757:	my $printCollectionDetails = 0;
Classic.pm:4766:		$printCollectionDetails = 1;
Classic.pm:4847:            my ($table,$classification) = PBDB::CollectionEntry::getReidHTMLTableByOccNum($dbt,$hbo,$s,$row->{'occurrence_no'}, 0);
Classic.pm:4858:            if ( $printCollectionDetails) {
Classic.pm:4863:                $html .= "Collection:";
Classic.pm:4864:                my $details = " <a href=\"?a=basicCollectionSearch&collection_no=$row->{'collection_no'}\">$row->{'collection_no'}</a>"." ".$collRow{'collection_name'};
Classic.pm:5332:sub listCollections {
Classic.pm:5346:            print "<a href=\"?a=listCollections&page=$i\">$i</a> ";
Classic.pm:5352:        print "<a href=\"?a=basicCollectionSearch&collection_no=$i\">$i</a> ";
Classic.pm:5373:            print "<a href=\"?a=listCollections&page=$i\">$i</a> ";
Collection.pm:1:# the following functions were moved into CollectionEntry.pm by JA 4.6.13:
Collection.pm:2:# displayCollectionForm, processCollectionForm, getReleaseDate,
Collection.pm:3:#  getReleaseString, validateCollectionForm, setMaIntervalNo,
Collection.pm:4:#  displayCollectionDetails, fromMinSec, toMinSec, displayCollectionDetailsPage,
Collection.pm:9:#  CollectionEntry::displayCollectionDetails and
Collection.pm:10:#  Collection::basicCollectionInfo
Collection.pm:12:package PBDB::Collection;
Collection.pm:43:sub getCollections {
Collection.pm:736:		main::displayCollectionForm($message);
Collection.pm:780:    dbg("Collections sql: $sql");
Collection.pm:825:# split out of CollectionEntry::displayCollectionDetails JA 6.11.09
Collection.pm:875:# split off from basicCollectionInfo JA 28.6.12
Collection.pm:929:		# used by jsonCollection 30.6.12
Collection.pm:1035:sub basicCollectionSearch	{
Collection.pm:1069:			basicCollectionInfo($dbt,$q,$s,$hbo);
Collection.pm:1087:			basicCollectionInfo($dbt,$q,$s,$hbo);
Collection.pm:1187:			basicCollectionInfo($dbt,$q,$s,$hbo);
Collection.pm:1216:sub basicCollectionInfo	{
Collection.pm:1533:		print "<p>Collection methods: $c->{'coll_meth'}</p>\n\n";
Collection.pm:1539:		print "<p>Collection methods: $c->{'collection_comments'}</p>\n\n";
Collection.pm:1775:			 print qq|<a href="$WRITE_URL?a=displayCollectionForm&collection_no=$c->{'collection_no'}">Edit collection</a> - |;
Collection.pm:1777:		print qq|<a href="$WRITE_URL?a=displayCollectionForm&prefill_collection_no=$c->{'collection_no'}">Add a collection copied from this one</a> - |;
Collection.pm:1789:<input type="hidden" name="a" value="basicCollectionSearch">
Collection.pm:1807:sub jsonCollection	{
Collection.pm:1811:	my ($colls_ref) = getCollections($dbt,$s,\%options,['*']);
Collection.pm:1937:		print "<center><p>Diversity statistics not available</p>\n<p class=\"medium\">Statistics for $collection_name (PBDB collection <a href=\"?a=basicCollectionSearch&collection_no=$collection_no\">$collection_no</a>) cannot<br>be computed because $reason</p></center>\n\n";
Collection.pm:2004:	print "<span class=\"displayPanelHeader\"><span class=\"large\">Diversity statistics for <a href=\"?a=basicCollectionSearch&collection_no=$collection_no\">$collection_name</a></span></span>\n\n";
Collection.pm:2060:	print "<span class=\"displayPanelHeader\"><span class=\"large\" >Rarefaction curve for <a href=\"?a=basicCollectionSearch&collection_no=$collection_no\">$collection_name</a></span></span>\n\n";
Collection.pm:2085:#  getCollections separately finds useable colls and occs
Collection.pm:2176:sub displayCollectionEcology	{
Collection.pm:2215:		print "<center><p><b><a href=\"?a=basicCollectionSearch&collection_no=" . $q->param('collection_no') . "\">Return to the collection record</a></b></p></center>\n\n";
Collection.pm:2380:	print "<div align=\"center\"><p><b><a href=\"?a=basicCollectionSearch&collection_no=".$q->param('collection_no')."\">Return to the collection record</a></b> - ";
CollectionEntry.pm:1:# includes entry functions extracted from Collection.pm JA 4.6.13
CollectionEntry.pm:3:package PBDB::CollectionEntry;
CollectionEntry.pm:12:use PBDB::Collection;
CollectionEntry.pm:24:#  because PBDB::Collection::getCollections is going with Fossilworks JA 4.6.13
CollectionEntry.pm:25:sub getCollections	{
CollectionEntry.pm:31:	return (PBDB::Collection::getCollections($dbt,$s,\%options,\@fields));
CollectionEntry.pm:35:# this is actually a near-complete rewrite of PBDB::Collection::getClassOrderFamily
CollectionEntry.pm:63:sub displayCollectionForm {
CollectionEntry.pm:68:    my $reSubmission = ($q->param('action') =~ /processCollectionForm/) ? 1 : 0;
CollectionEntry.pm:228:        $vars{'page_title'} =  "Collection entry form";
CollectionEntry.pm:231:        $vars{'page_title'} =  "Collection number ".$vars{'collection_no'};
CollectionEntry.pm:246:sub processCollectionForm {
CollectionEntry.pm:309:    return unless validateCollectionForm($dbt,$q,$s);
CollectionEntry.pm:440:        print "<center><p class=\"pageTitle\" style=\"margin-bottom: -0.5em;\"><font color='red'>Collection record $verb</font></p><p class=\"medium\"><i>Do not hit the back button!</i></p></center>";
CollectionEntry.pm:443:       	my ($colls_ref) = getCollections($dbt,$s,{$COLLECTION_NO=>$collection_no},['authorizer','enterer','modifier','*']);
CollectionEntry.pm:455:                $links .= qq|<li><a href="$WRITE_URL?a=displayCollectionForm&collection_no=$collection_no">Edit this collection</a></li>|;
CollectionEntry.pm:457:            $links .= qq|<li><a href="$WRITE_URL?a=displayCollectionForm&prefill_collection_no=$collection_no">Add a collection copied from this one</a></li>|;
CollectionEntry.pm:475:            displayCollectionDetailsPage($dbt,$hbo,$q,$s,$coll);
CollectionEntry.pm:531:sub validateCollectionForm {
CollectionEntry.pm:606:sub displayCollectionDetails {
CollectionEntry.pm:665:            $links .= qq|<a href="$WRITE_URL?a=displayCollectionForm&collection_no=$collection_no">Edit collection</a> - |;
CollectionEntry.pm:667:        $links .=  qq|<a href="$WRITE_URL?a=displayCollectionForm&prefill_collection_no=$collection_no">Add a collection copied from this one</a>|;  
CollectionEntry.pm:674:    displayCollectionDetailsPage($dbt,$hbo,$q,$s,$coll);
CollectionEntry.pm:679:# split out of displayCollectionDetails JA 6.11.09
CollectionEntry.pm:763:sub displayCollectionDetailsPage {
CollectionEntry.pm:812:      push @links, "<a href=\"?a=displayCollectionDetails&collection_no=$ref->[0]\">$ref->[0]</a>";
CollectionEntry.pm:1029:        $row->{'collection_subset'} =  "<a href=\"?a=displayCollectionDetails&collection_no=$row->{collection_subset}\">$row->{collection_subset}</a>";
CollectionEntry.pm:1060:} # end sub displayCollectionDetails()
CollectionEntry.pm:1540:	#  displayCollectionEcology but these are going with Fossilworks
CollectionQuery.pm:2:# PBCollectionQuery
CollectionQuery.pm:9:package PBDB::CollectionQuery;
CollectionQuery.pm:192:# fetchInfoManyCollections ( )
CollectionQuery.pm:353:# fetchInfoSingleCollection ( collection_requested )
CollectionQuery.pm:483:	return $self->emitCollectionXML($row);
CollectionQuery.pm:488:	return ($options{is_first} ? "\n" : "\n,") . $self->emitCollectionJSON($row);
CollectionQuery.pm:493:# emitCollectionXML ( row, short_record )
CollectionQuery.pm:498:sub emitCollectionXML {
CollectionQuery.pm:506:    $output .= '  <Collection>' . "\n";
CollectionQuery.pm:536:    $output .= '  </Collection>' . "\n";
CollectionQuery.pm:540:# emitCollectionJSON ( row, options )
CollectionQuery.pm:548:sub emitCollectionJSON {
Confidence.pm:7:use PBDB::Collection;
Confidence.pm:103:    my ($dataRows) = Collection::getCollections($dbt,$s,\%options,$fields);
Confidence.pm:253:    # this q2  var is necessary because the processCollectionSearch
Curve.pm:1515:		$listorfm = "Collections"; # I'm not sure why this is a variable
Curve.pm:2097:				my $items = "Collections";
DataQuery.pm:6:# TaxonQuery.pm and CollectionQuery.pm. 
Download.pm:493:    # Collection methods
Download.pm:495:        $html .= $self->retellOptionsRow('Collection methods:',$q->param('sieve'));
Download.pm:498:    # Collection types
Download.pm:710:        $html .= $self->retellOptionsRow ( "Collection output fields", $fieldnames );
Download.pm:1478:sub getCollectionTypeString{
Download.pm:1483:    # Collection types
Download.pm:1666:sub getCollectionsWhereClause {
Download.pm:1775:        $self->getCollectionTypeString(),
Download.pm:1961:    @where = $self->getCollectionsWhereClause();
Download.pm:3490:                print OUTFILE "Collection_$row->{'collection_no'}\n";
Ecology.pm:152:                    # (used in displayCollectionEcology), get that as well
FossilRecord.pm:6:use PBDB::Collection;
Main.pm:30:use PBDB::Collection;
Main.pm:31:use PBDB::CollectionEntry;  # slated for removal
Map.pm:214:                my ($dataRowsRef,$ofRows) = Collection::getCollections($dbt,$s,\%toptions,$fields);  
Map.pm:229:                my ($dataRowsRef,$ofRows,$warnings) = Collection::getCollections($dbt,$s,\%options,$fields);  
Map.pm:1812:    # getCollections could be used very indirectly to get these counts, but
Map.pm:1932:                    #dbg("Collection ".$coll{'collection_no'}." pixels($x1,$y1) " 
Map.pm:1963:			    print MAPOUT "\" href=\"?a=basicCollectionSearch";
Measurement.pm:747:	#  reIDs, as done by getCollections
MeasurementEntry.pm:110:        my ($things,$collection_header,$knownUnknown) = ('occurrences and names','Collection','unknown');
MeasurementEntry.pm:178:                print "<td><span class=\"small\" style=\"margin-right: 1em;\"><a href=\"$READ_URL?action=displayCollectionDetails&collection_no=$row->{collection_no}\">$row->{collection_name}</a></span><br><span class=\"verysmall\">$row->{collection_no}: $interval, $row->{place}</span></td>";
PAST.pm:44:If you want to view collection attributes like country, stage, formation, lithology, or environment, make sure to check the relevant boxes in the "Collection fields" section.
Reclassify.pm:119:            print "<tr><th class=\"large\" colspan=2>Collection</th><th class=\"large\" colspan=2 style=\"text-align: left; padding-left: 2em;\">Classification based on</th></tr>";
Reclassify.pm:192:                    print "<td style=\"padding-right: 1.5em; padding-left: 1.5em;\"><a href=\"$READ_URL?action=displayCollectionDetails&collection_no=$o->{collection_no}\">$o->{collection_no}</a></td><td>$collection_string</td>";
Reclassify.pm:330:        print "<tr><th class=\"large\">Collection</th><th class=\"large\">Classification based on</th></tr>";
Reference.pm:5:#  functions), getSecondaryRefs (used in CollectionEntry.pm),
Reference.pm:757:                my $coll_link = qq|<a href="?a=basicCollectionSearch&collection_no=$row->{collection_no}" $style>$row->{collection_no}</a>|;
Reference.pm:771:            print $box->(qq'Collections (<a href="?a=displayCollResults&type=view&wild=N&reference_no=$reference_no">$collection_count</a>)',$html);
Reference.pm:874:	# Handle Collections
Reference.pm:912:		$action = "basicCollectionSearch";
Report.pm:42:    $self->{'grandTotalCollections'} = 0;
Report.pm:109:    my $grandTotal = ($q->param('output') eq 'collections') ? $self->{'grandTotalCollections'} : $self->{'grandTotalOccurrences'};
Report.pm:140:            print "<td align=right class=dataTableCellTotal>".sprintf("%.1f",$self->{'grandTotalOccurrences'}/$self->{'grandTotalCollections'})."</td>";
Report.pm:152:    #    if ($self->{'grandTotal1'} ne $self->{'grandTotalCollections'}) { 
Report.pm:157:    print "".$self->{'grandTotalCollections'} . " collections";
Report.pm:158:    print ", ".sprintf("%.1f",$self->{'grandTotalOccurrences'}/$self->{'grandTotalCollections'}) . " occurrences per collection" if ($q->param('output') eq 'average occurrences');
Report.pm:222:    my $grandTotal = ($q->param('output') eq 'collections') ? $self->{'grandTotalCollections'} : $self->{'grandTotalOccurrences'};
Report.pm:247:    push @line, $self->{'grandTotalCollections'} if ($q->param('output') eq 'collections');
Report.pm:248:    push @line, sprintf("%.1f",$self->{'grandTotalOccurrences'}/$self->{'grandTotalCollections'}) if ($q->param('output') eq 'average occurrences');
Report.pm:438:        $self->{'grandTotalCollections'} += $row->{'collections_cnt'};
Report.pm:1470:		$vars{museum_list} .= qq|<td valign="top"><span class="mockLink" onClick="searchCollections('$code');">$collCount{$code}</span></td>\n|;
Review.pm:460:	$text =~ s/\[\[collection /<a href="$READ_URL\?a=basicCollectionSearch&amp;collection_no=/g;
Review.pm:662:	my ($colls) = Collection::getCollections($dbt,$s,\%options,$fields);
Scales.pm:16:# +/- displayCollectionDetails
Strata.pm:29:    my ($dataRows,$ofRows) = Collection::getCollections($dbt,$s,\%options,\@fields);
Strata.pm:38:    # Also important for having TaxonInfo::doCollections return what we want
Strata.pm:300:    # Set this q parameter so processCollectionsSearch (called from doCollections) builds correct SQL query
Strata.pm:301:    print TaxonInfo::doCollections($dbt, $s, $dataRows, '' ,'', '','for_strata_module');
Strata.pm:302:#    print TaxonInfo::doCollections($q, $dbt, $s, '', '', "for_strata_module");
Strata.pm:487:    my ($dataRows,$ofRows) = Collection::getCollections($dbt,$s,\%options,$fields);
Strata.pm:649:    # this q2  var is necessary because the processCollectionSearch
Taxon.pm:732:				$errors->add("Collections $collnos are all marked as the type locality of ".$q->param('taxon_name').", so it's not clear what should go in the authorities table");
Taxon.pm:736:				$errors->add("Collections $collnos are both marked as the type locality of ".$q->param('taxon_name').", so it's not clear what should go in the authorities table");
TaxonInfo.pm:6:use PBDB::Collection;
TaxonInfo.pm:7:use PBDB::CollectionEntry;
TaxonInfo.pm:343:		$discussion =~ s/(\[\[)([A-Za-z0-9\'"\.\-\(\) ]+|)(coll )([0-9]+)(\|)/<a href="?a=basicCollectionSearch&amp;collection_no=$4">/g;
TaxonInfo.pm:485:        $collectionsSet = getCollectionsSet($dbt,$q,$s,$in_list,$taxon_name);
TaxonInfo.pm:516:		    print doCollections($dbt, $s, $collectionsSet, $display_name, $taxon_no, $in_list, '', $is_real_user, $type_locality);
TaxonInfo.pm:541:sub getCollectionsSet {
TaxonInfo.pm:562:    my ($dataRows) = PBDB::CollectionEntry::getCollections($dbt,$s,\%options,$fields);
TaxonInfo.pm:744:sub doCollections{
TaxonInfo.pm:751:<span class="displayPanelHeader" class="large">Collections</span>
TaxonInfo.pm:851:        #     my ($dataRows,$ofRows) = PBDB::CollectionEntry::getCollections($dbt,$s,\%options,$fields);
TaxonInfo.pm:866:        # $range .= "<span class=\"verysmall\" style=\"padding-left: 2em;\"><i>Collections with crown group taxa are in <b>bold</b>.</i></span></div><br>\n";
TaxonInfo.pm:1002:		$output .= qq|<div class="small" style="margin-left: 2em; margin-bottom: -1em;"><p>Collections|;
TaxonInfo.pm:1007:<span class="displayPanelHeader">Collections</span>
TaxonInfo.pm:1064:					$formatted_no =~ s/([0-9])/<a href=\"?a=basicCollectionSearch&amp;collection_no=$no&amp;is_real_user=$is_real_user\"><b>$1/;
TaxonInfo.pm:1067:					$formatted_no =~ s/([0-9])/<a href=\"?a=basicCollectionSearch&amp;collection_no=$no&amp;is_real_user=$is_real_user\">$1/;
TaxonInfo.pm:1229:        my $cof = PBDB::CollectionEntry::getClassOrderFamily($dbt,'',\@parent_array);
TaxonInfo.pm:2095:                $text .= "Its type locality is <a href=\"?a=basicCollectionSearch&amp;collection_no=".$taxon->{'type_locality'}."&amp;is_real_user=$is_real_user\">".$coll_row->{'collection_name'}."</a>, which is in $strat $lith $fm $coll_row->{'place'}. ";
TaxonInfo.pm:2385:        # currently only used by PBDB::CollectionEntry::getSynonymName, so it doesn't
TaxonInfo.pm:3132:	my ($colls) = PBDB::Collection::getCollections($dbt,$s,\%options,$fields);
TaxonInfo.pm:3280:	printf "<p>Collections per Myr between %.1f and %.1f Ma: %.2f</p>\n",$lb,$lb - $agerange,$ncoll / $agerange;
TaxonInfo.pm:3428:	# getCollections won't return multiple occurrences per collection, so...
TaxonInfo.pm:3432:	# not returning occurrences means that getCollections can't apply this
TaxonInfo.pm:3525:		print "<p style=\"padding-left: 1em; text-indent: -1em;\">The collection documenting the first appearance is <a href=\"?a=basicCollectionSearch&amp;collection_no=$firsts[0]->{'collection_no'}\">$firsts[0]->{'collection_name'}</a> ($agerange $firsts[0]->{'formation'} of $firsts[0]->{'country'}: includes ".join(', ',@includes).")</p>\n";
TaxonInfo.pm:3528:		print "<p class=\"large\" style=\"margin-bottom: -1em;\">Collections including first appearances</p>\n";
TaxonInfo.pm:3547:			$coll->{'collection_no'} = "&nbsp;&nbsp;<a href=\"?a=basicCollectionSearch&amp;collection_no=$coll->{'collection_no'}\">".$coll->{'collection_no'}."</a>";
TaxonInfo.pm:3865:		my $cof = PBDB::Collection::getClassOrderFamily($dbt,'',\@parent_array);
TaxonInfo.pm:3888:		$discussion =~ s/(\[\[)([A-Za-z0-9\'"\.\-\(\) ]+|)(coll )([0-9]+)(\|)/<a href="?a=basicCollectionSearch&amp;collection_no=$4">/g;
TaxonInfo.pm:4232:			print qq| found only at <a href="?a=basicCollectionSearch&amp;collection_no=$o->{collection_no}">$o->{'collection_name'}</a>|;
TaxonQuery.pm:1639:    # we could use getCollectionsSet but it would be overkill
TaxonQuery.pm:1660:    # my ($colls) = Collection::getCollections($dbt, $s, $options, $fields);
TimeLookup.pm:1467:#  sorts out period, epoch, etc. interval names and is used by Collection
TypoChecker.pm:5:use PBDB::CollectionEntry;
TypoChecker.pm:107:        my $link = "<a target=\"_COLWINDOW\" href=\"$READ_URL?action=displayCollectionDetails&collection_no=$_\">$_</a>";
TypoChecker.pm:114:        my $link = "<a target=\"_COLWINDOW\" href=\"$READ_URL?action=displayCollectionDetails&collection_no=$_\">$_</a>";
TypoChecker.pm:145:        my ($dataRows,$ofRows,$warnings) = CollectionEntry::getCollections($dbt,$s,\%options,['collection_no']);  
TypoChecker.pm:320:                $row .= "<tr $class><td>Collections: $collections</td></tr>";
TypoChecker.pm:322:                $row .= "<tr $class><td>Collections: none</td></tr>";
------------ CollectionEntry
Classic.pm:32:use PBDB::CollectionEntry;  # slated for removal
Classic.pm:1158:		($dataRows,$ofRows,$warnings,$occRows) = PBDB::CollectionEntry::getCollections($dbt,$s,\%options,$fields);
Classic.pm:1687:	    PBDB::CollectionEntry::fromDecDeg($q->param('latdeg'), $q->param('latdec')) :
Classic.pm:1688:		    PBDB::CollectionEntry::fromMinSec($q->param('latdeg'),$q->param('latmin'),$q->param('latsec'));
Classic.pm:1691:	    PBDB::CollectionEntry::fromDecDeg($q->param('lngdeg'),$q->param('lngdec')) :
Classic.pm:1692:		    PBDB::CollectionEntry::fromMinSec($q->param('lngdeg'),$q->param('lngmin'),$q->param('lngsec'));
Classic.pm:1802:        my $distance = 111 * PBDB::CollectionEntry::GCD($mylat,$lat,abs($mylng-$lng));
Classic.pm:1829:    PBDB::CollectionEntry::displayCollectionForm($dbt,$q,$s,$hbo);
Classic.pm:1842:    PBDB::CollectionEntry::processCollectionForm($dbt,$q,$s,$hbo);
Classic.pm:1852:    PBDB::CollectionEntry::displayCollectionDetails($dbt,$q,$s,$hbo);
Classic.pm:3567:        my $show_name = PBDB::CollectionEntry::formatOccurrenceTaxonName(\%hash);
Classic.pm:3894:                PBDB::CollectionEntry::setSecondaryRef($dbt,$collection_no,$session_ref);
Classic.pm:3902:        my $taxon_name = PBDB::CollectionEntry::formatOccurrenceTaxonName({
Classic.pm:4435:	my $taxon_name = PBDB::CollectionEntry::formatOccurrenceTaxonName(\%fields);
Classic.pm:4512:                    unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'})){
Classic.pm:4513:                           PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO},$fields{'reference_no'});
Classic.pm:4535:            unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'}))	{
Classic.pm:4536:               PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO}, $fields{'reference_no'});
Classic.pm:4550:                push @occurrences_to_delete, [$fields{$OCCURRENCE_NO},PBDB::CollectionEntry::formatOccurrenceTaxonName($old_row),$i];
Classic.pm:4568:                    unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'}))	{
Classic.pm:4569:                           PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO}, $fields{'reference_no'});
Classic.pm:4586:            unless(PBDB::CollectionEntry::isRefPrimaryOrSecondary($dbt, $fields{$COLLECTION_NO}, $fields{'reference_no'}))	{
Classic.pm:4587:                   PBDB::CollectionEntry::setSecondaryRef($dbt,$fields{$COLLECTION_NO}, $fields{'reference_no'});
Classic.pm:4655:    	$return = PBDB::CollectionEntry::buildTaxonomicList($dbt,$hbo,$s,{$COLLECTION_NO=>$collection_no, 'hide_reference_no'=>$coll->{'reference_no'},'new_genera'=>\@new_genera, 'new_subgenera'=>\@new_subgenera, 'new_species'=>\@new_species, 'do_reclassify'=>1, 'warnings'=>\@warnings, 'save_links'=>$links });
Classic.pm:4657:    	$return = PBDB::CollectionEntry::buildTaxonomicList($dbt,$hbo,$s,{'occurrence_list'=>\@occurrences, 'new_genera'=>\@new_genera, 'new_subgenera'=>\@new_subgenera, 'new_species'=>\@new_species, 'do_reclassify'=>1, 'warnings'=>\@warnings, 'save_links'=>$links });
Classic.pm:4847:            my ($table,$classification) = PBDB::CollectionEntry::getReidHTMLTableByOccNum($dbt,$hbo,$s,$row->{'occurrence_no'}, 0);
Collection.pm:1:# the following functions were moved into CollectionEntry.pm by JA 4.6.13:
Collection.pm:9:#  CollectionEntry::displayCollectionDetails and
Collection.pm:825:# split out of CollectionEntry::displayCollectionDetails JA 6.11.09
CollectionEntry.pm:3:package PBDB::CollectionEntry;
Main.pm:31:use PBDB::CollectionEntry;  # slated for removal
Reference.pm:5:#  functions), getSecondaryRefs (used in CollectionEntry.pm),
TaxonInfo.pm:7:use PBDB::CollectionEntry;
TaxonInfo.pm:562:    my ($dataRows) = PBDB::CollectionEntry::getCollections($dbt,$s,\%options,$fields);
TaxonInfo.pm:851:        #     my ($dataRows,$ofRows) = PBDB::CollectionEntry::getCollections($dbt,$s,\%options,$fields);
TaxonInfo.pm:1229:        my $cof = PBDB::CollectionEntry::getClassOrderFamily($dbt,'',\@parent_array);
TaxonInfo.pm:2385:        # currently only used by PBDB::CollectionEntry::getSynonymName, so it doesn't
TypoChecker.pm:5:use PBDB::CollectionEntry;
TypoChecker.pm:145:        my ($dataRows,$ofRows,$warnings) = CollectionEntry::getCollections($dbt,$s,\%options,['collection_no']);  
------------ CollectionQuery
CollectionQuery.pm:2:# PBCollectionQuery
CollectionQuery.pm:9:package PBDB::CollectionQuery;
DataQuery.pm:6:# TaxonQuery.pm and CollectionQuery.pm. 
------------ Confidence
Classic.pm:5070:# Confidence Intervals JSM #
Classic.pm:5075:#     require Confidence;
Classic.pm:5078:#     Confidence::displaySearchSectionResults($q, $s, $dbt,$hbo);
Classic.pm:5083:#     require Confidence;
Classic.pm:5085:#     Confidence::displaySearchSectionForm($q, $s, $dbt,$hbo);
Classic.pm:5090:#     require Confidence;
Classic.pm:5092:#     Confidence::displayTaxaIntervalsForm($q, $s, $dbt,$hbo);
Classic.pm:5098:#     require Confidence;
Classic.pm:5101:#     Confidence::displayTaxaIntervalsResults($q, $s, $dbt,$hbo);
Classic.pm:5107:#     require Confidence;
Classic.pm:5109:#     Confidence::buildList($q, $s, $dbt,$hbo,{});
Classic.pm:5118:    require Confidence;
Classic.pm:5120:    Confidence::displayStratTaxa($q, $s, $dbt);
Classic.pm:5129:    require Confidence;
Classic.pm:5131:	Confidence::optionsForm($q, $s, $dbt);
Classic.pm:5140:    require Confidence;
Classic.pm:5143:	Confidence::calculateTaxaInterval($q, $s, $dbt);
Classic.pm:5152:    require Confidence;
Classic.pm:5155:	Confidence::calculateStratInterval($q, $s, $dbt);
Classification.pm:387:#       sort_alphabetical: an array sorted in alphabetical fashion, suitable for TaxonInfo.pm or Confidence.pm
Collection.pm:728:		} elsif ( $options{"calling_script"} eq "Confidence" )	{
Confidence.pm:1:package PBDB::Confidence;
Confidence.pm:100:    $options{'calling_script'} = 'Confidence';
Confidence.pm:437:            print "<div align=\"center\"><p class=\"pageTitle\">Confidence interval taxon list</p></div><br>\n";
Confidence.pm:654:        print "<div align=\"center\"><p class=\"pageTitle\">Confidence interval options</p></div>\n";
Confidence.pm:663:        print "<tr><th align=\"right\"> <nobr>Confidence interval method:</nobr> </th><td> $method_select<a href=\"javascript: tipsPopup('/public/tips/confidencetips1.html')\">   Help</a></td></tr>";
Confidence.pm:665:        print "<tr><th align=\"right\"> <nobr>Confidence level:</nobr> </th><td>$confidence_select</td></tr>";
Confidence.pm:679:        print "<tr><th align=\"right\"> Confidence interval method: </td><td> $method_select <a href=\"javascript: tipsPopup('/public/tips/confidencetips1.html')\">   Help</a></td>";
Confidence.pm:680:        print "<TH align=\"right\"> Confidence level: </TH><TD>$confidence_select</td></tr>";
Confidence.pm:890:    my $cg = new ConfidenceGraph(
Confidence.pm:958:    print printResultsPage($q,'Confidence interval results',$image_map,$image_name,\%taxa_hash,\@sortedTaxa,"Ma",\@not_in_scale);
Confidence.pm:990:    print "<div align=\"center\"><table><tr><td valign=\"top\" align=\"center\"><img src=\"/public/confidence/$image_name.png\"  usemap=\"#ConfidenceMap\" ismap border=0><br>";
Confidence.pm:1318:    my $cg = new ConfidenceGraph(
Confidence.pm:1877:package PBDB::ConfidenceGraph;
Confidence.pm:2070:    my $image_map = '<map name="ConfidenceMap">'."\n";
Strata.pm:481:    $options{'calling_script'} = 'Confidence';
TaxonInfo.pm:3290:	print "<div class=\"displayPanel\" style=\"margin-top: 2em;\">\n<span class=\"displayPanelHeader\" style=\"font-size: 1.2em;\">Confidence intervals on the first appearance</span>\n<div class=\"displayPanelContents\">\n";
------------ Constants
Cladogram.pm:8:use PBDB::Constants qw($DATA_DIR $HTML_DIR $WRITE_URL $READ_URL);
Classic.pm:51:use PBDB::Constants qw($WRITE_URL $HOST_URL $HTML_DIR $DATA_DIR $IS_FOSSIL_RECORD $TAXA_TREE_CACHE $DB $PAGE_TOP $PAGE_BOTTOM $COLLECTIONS $COLLECTION_NO $OCCURRENCES $OCCURRENCE_NO $CGI_DEBUG $ALLOW_LOGIN);
Classic.pm:494:	$vars{'data_url'} = $Constants::DATA_URL;
Collection.pm:28:use PBDB::Constants qw($WRITE_URL $HTML_DIR $HOST_URL $TAXA_TREE_CACHE $DB $COLLECTIONS $COLLECTION_NO $OCCURRENCES $OCCURRENCE_NO $PAGE_TOP $PAGE_BOTTOM);
CollectionEntry.pm:21:use PBDB::Constants qw($WRITE_URL $INTERVAL_URL $HTML_DIR $HOST_URL $TAXA_TREE_CACHE $DB $COLLECTIONS $COLLECTION_NO $OCCURRENCES $OCCURRENCE_NO $PAGE_TOP $PAGE_BOTTOM);
Confidence.pm:16:use PBDB::Constants qw($READ_URL $HTML_DIR);
Confidence.pm:1881:use Constants qw($READ_URL $HTML_DIR);
Constants.pm:4:package PBDB::Constants;
Constants.pm:11:$PBDB::Constants::conf = read_conf();
Constants.pm:12:my $conf = $PBDB::Constants::conf;
Constants.pm:14:$PBDB::Constants::HOST_URL        = $conf->{'HOST_URL'};
Constants.pm:15:$PBDB::Constants::DATA_URL	    = $conf->{'DATA_URL'};
Constants.pm:16:$PBDB::Constants::HTML_DIR        = $conf->{'HTML_DIR'};
Constants.pm:17:$PBDB::Constants::DATA_DIR        = $conf->{'DATA_DIR'};
Constants.pm:18:$PBDB::Constants::DB_SOCKET       = $conf->{'DB_SOCKET'};
Constants.pm:19:$PBDB::Constants::DB_PASSWD       = $conf->{'DB_PASSWD'};
Constants.pm:20:$PBDB::Constants::DB_USER	    = $conf->{'DB_USER'} || 'pbdbuser';
Constants.pm:21:$PBDB::Constants::ALLOW_LOGIN	    = $conf->{'ALLOW_LOGIN'};
Constants.pm:22:$PBDB::Constants::CGI_DEBUG	    = $conf->{'CGI_DEBUG'};
Constants.pm:23:$PBDB::Constants::ADMIN_EMAIL	    = $conf->{'ADMIN_EMAIL'};
Constants.pm:24:$PBDB::Constants::IP_MAIN         = '137.111.92.50';
Constants.pm:25:$PBDB::Constants::IP_BACKUP       = '137.111.92.50';
Constants.pm:26:$PBDB::Constants::MESSAGE_FILE    = $conf->{'MESSAGE_FILE'};
Constants.pm:28:$PBDB::Constants::IS_FOSSIL_RECORD = $conf->{'IS_FOSSIL_RECORD'};
Constants.pm:30:$PBDB::Constants::TAXA_TREE_CACHE = 'taxa_tree_cache';
Constants.pm:31:$PBDB::Constants::TAXA_LIST_CACHE = 'taxa_list_cache';
Constants.pm:32:$PBDB::Constants::READ_URL = 'classic';
Constants.pm:33:$PBDB::Constants::WRITE_URL = 'classic';
Constants.pm:35:$PBDB::Constants::DB = 'pbdb';
Constants.pm:36:$PBDB::Constants::SQL_DB = 'pbdb';
Constants.pm:37:$PBDB::Constants::DB_TYPE = '';
Constants.pm:38:$PBDB::Constants::PAGE_TOP = 'std_page_top';
Constants.pm:39:$PBDB::Constants::PAGE_BOTTOM = 'std_page_bottom';
Constants.pm:40:$PBDB::Constants::COLLECTIONS = 'collections';
Constants.pm:41:$PBDB::Constants::COLLECTION_NO = 'collection_no';
Constants.pm:42:$PBDB::Constants::OCCURRENCES = 'occurrences';
Constants.pm:43:$PBDB::Constants::OCCURRENCE_NO = 'occurrence_no';
Constants.pm:45:    $PBDB::Constants::PAGE_TOP = 'mobile_top';
Constants.pm:46:    $PBDB::Constants::PAGE_BOTTOM = 'mobile_bottom';
Constants.pm:49:$PBDB::Constants::INTERVAL_URL = $conf->{INTERVAL_URL} || '';
Constants.pm:55:    $PBDB::Constants::APP_DIR = $base_dir;
Constants.pm:56:    # $PBDB::Constants::APP_DIR =~ s/\/config$//;
Curve.pm:10:use PBDB::Constants qw($READ_URL $DATA_DIR $HTML_DIR);
DBConnection.pm:10:use PBDB::Constants qw($SQL_DB $DB_USER $DB_SOCKET $DB_PASSWD);
DBTransactionManager.pm:8:use PBDB::Constants qw($APP_DIR);
Debug.pm:12:use PBDB::Constants qw($APP_DIR $CGI_DEBUG);
Download.pm:15:use PBDB::Constants qw($READ_URL $HTML_DIR $DATA_DIR $TAXA_TREE_CACHE $TAXA_LIST_CACHE);
DownloadTaxonomy.pm:13:use PBDB::Constants qw($READ_URL $DATA_DIR $HTML_DIR $TAXA_TREE_CACHE $TAXA_LIST_CACHE);
Ecology.pm:8:use PBDB::Constants qw($TAXA_TREE_CACHE $TAXA_LIST_CACHE);
EcologyEntry.pm:6:use PBDB::Constants qw($WRITE_URL);
FossilRecord.pm:16:use PBDB::Constants qw($READ_URL $WRITE_URL $IS_FOSSIL_RECORD $TAXA_TREE_CACHE);
HTMLBuilder.pm:9:use PBDB::Constants qw($READ_URL $WRITE_URL $IS_FOSSIL_RECORD $MESSAGE_FILE);
HTMLBuilder.pm:226:    my $APP_DIR = $PBDB::Constants::APP_DIR;
Images.pm:8:use PBDB::Constants qw($READ_URL $WRITE_URL $HTML_DIR $PAGE_TOP $PAGE_BOTTOM);
Main.pm:50:use PBDB::Constants qw($WRITE_URL $HOST_URL $HTML_DIR $DATA_DIR $IS_FOSSIL_RECORD $TAXA_TREE_CACHE $DB $PAGE_TOP $PAGE_BOTTOM $COLLECTIONS $COLLECTION_NO $OCCURRENCES $OCCURRENCE_NO $CGI_DEBUG $ALLOW_LOGIN);
Map.pm:12:use PBDB::Constants qw($WRITE_URL $DATA_DIR $HTML_DIR $TAXA_TREE_CACHE);
Measurement.pm:9:use PBDB::Constants qw($READ_URL $HTML_DIR $TAXA_TREE_CACHE);
MeasurementEntry.pm:6:use PBDB::Constants qw($READ_URL $WRITE_URL $TAXA_TREE_CACHE);
Neptune.pm:9:use PBDB::Constants qw($WRITE_URL $READ_URL $HTML_DIR);
Nexusfile.pm:17:use PBDB::Constants qw($HTML_DIR $READ_URL);
NexusfileWeb.pm:14:use PBDB::Constants qw($READ_URL $WRITE_URL $HTML_DIR $PAGE_TOP $PAGE_BOTTOM);
NexusfileWrite.pm:16:use PBDB::Constants qw($READ_URL);
Opinion.pm:9:use PBDB::Constants qw($READ_URL $WRITE_URL $IS_FOSSIL_RECORD $TAXA_TREE_CACHE);
PAST.pm:9:use PBDB::Constants qw($HTML_DIR);
Permissions.pm:13:use PBDB::Constants qw($WRITE_URL);
Person.pm:3:use PBDB::Constants qw($READ_URL $WRITE_URL $IS_FOSSIL_RECORD $PAGE_TOP $PAGE_BOTTOM);
PrintHierarchy.pm:5:use PBDB::Constants qw($READ_URL $WRITE_URL $HTML_DIR $PAGE_TOP $PAGE_BOTTOM $TAXA_TREE_CACHE);
Reclassify.pm:7:use PBDB::Constants qw($READ_URL $WRITE_URL $DB $COLLECTIONS $COLLECTION_NO $OCCURRENCES $OCCURRENCE_NO $PAGE_TOP $PAGE_BOTTOM);
Reference.pm:13:use PBDB::Constants qw($WRITE_URL $IS_FOSSIL_RECORD $HTML_DIR $TAXA_TREE_CACHE $DB $COLLECTIONS $COLLECTION_NO $PAGE_TOP $PAGE_BOTTOM);
ReferenceEntry.pm:8:use PBDB::Constants qw($WRITE_URL $IS_FOSSIL_RECORD $HTML_DIR $TAXA_TREE_CACHE $DB $COLLECTIONS $COLLECTION_NO $PAGE_TOP $PAGE_BOTTOM);
Report.pm:13:use PBDB::Constants qw($READ_URL $WRITE_URL $HOST_URL $IS_FOSSIL_RECORD $DATA_DIR $HTML_DIR $TAXA_TREE_CACHE $TAXA_LIST_CACHE);
Review.pm:4:use PBDB::Constants qw($READ_URL $HTML_DIR $TAXA_TREE_CACHE);
SanityCheck.pm:3:use PBDB::Constants qw($TAXA_TREE_CACHE);
Scales.pm:5:use Constants qw($READ_URL $WRITE_URL);
Session.pm:6:use PBDB::Constants qw($WRITE_URL $IP_MAIN $IP_BACKUP);
Strata.pm:10:use PBDB::Constants qw($READ_URL $WRITE_URL);
TaxaCache.pm:29:use PBDB::Constants qw($TAXA_TREE_CACHE $TAXA_LIST_CACHE $IS_FOSSIL_RECORD);
Taxon.pm:25:use PBDB::Constants qw($READ_URL $WRITE_URL $HOST_URL $TAXA_TREE_CACHE);
TaxonInfo.pm:17:use PBDB::Constants qw($HOST_URL $WRITE_URL $INTERVAL_URL $SQL_DB $IS_FOSSIL_RECORD $PAGE_TOP $PAGE_BOTTOM $HTML_DIR $TAXA_TREE_CACHE $TAXA_LIST_CACHE);
TypoChecker.pm:8:use PBDB::Constants qw($READ_URL $WRITE_URL);
------------ Curve
Classic.pm:728:# sub displayCurveForm {
Classic.pm:750:# sub displayCurveResults	{
Classic.pm:751:# 	require Curve;
Classic.pm:758:# 	my $c = Curve->new($q, $s, $dbt );
Classic.pm:759:# 	$c->buildCurve($hbo);
Classic.pm:2702:sub displayFossilRecordCurveForm {
Classic.pm:2707:	FossilRecord::displayFossilRecordCurveForm($dbt,$q,$s,$hbo);
Classic.pm:2710:sub submitFossilRecordCurveForm {
Classic.pm:2715:	FossilRecord::submitFossilRecordCurveForm($dbt,$q,$s,$hbo);
Curve.pm:3:package PBDB::Curve;
Curve.pm:34:sub buildCurve {
Download.pm:1700:    # added by rjp on 12/30/2003, some code copied from Curve.pm.
Download.pm:2896:                # Curve.pm will lump them together when doing a calculation
FossilRecord.pm:365:sub displayFossilRecordCurveForm {
FossilRecord.pm:369:sub submitFossiLRecordCurveForm {
Neptune.pm:3:# then be fed into the Curve script for diversity analyses
Neptune.pm:388:        print "<a href=\"$READ_URL?action=displayCurveForm&input_data=neptune_pbdb$yourname\"><b>Generate diversity curves</b></a>";
Neptune.pm:390:        print "<a href=\"$READ_URL?action=displayCurveForm&input_data=neptune$yourname\"><b>Generate diversity curves</b></a>";
Scales.pm:755:	print "These bin definitions are used by the <a href=\"$READ_URL?action=displayCurveForm\">diversity curve generator</a>.\n\n";
------------ DBConnection
Classic.pm:19:use PBDB::DBConnection;
DBConnection.pm:7:package PBDB::DBConnection;
DBTransactionManager.pm:6:use PBDB::DBConnection;
DBTransactionManager.pm:39:		$dbh = PBDB::DBConnection::connect();
Main.pm:18:use PBDB::DBConnection;
------------ DBTransactionManager
Classic.pm:20:use PBDB::DBTransactionManager;
Classic.pm:86:    my $dbt = new PBDB::DBTransactionManager();
CollectionEntry.pm:1984:	DBTransactionManager::logEvent({ stmt => 'INSERT',
CollectionEntry.pm:2058:	DBTransactionManager::logEvent({ stmt => 'DELETE',
DBTransactionManager.pm:3:package PBDB::DBTransactionManager;
DBTransactionManager.pm:36:	my DBTransactionManager $self = fields::new($class);
DBTransactionManager.pm:64:	my DBTransactionManager $self = shift;
DBTransactionManager.pm:77:	my DBTransactionManager $self = shift;
DBTransactionManager.pm:120:		croak("invalid session or enterer in DBTransactionManager::insertRecord");
DBTransactionManager.pm:557:## The following methods are from the old DBTransactionManager class 
DBTransactionManager.pm:626:# from the old DBTransactionManager class...
DBTransactionManager.pm:628:	my DBTransactionManager $self = shift;
DBTransactionManager.pm:632:# from the old DBTransactionManager class...
DBTransactionManager.pm:634:	my DBTransactionManager $self = shift;
DBTransactionManager.pm:640:# from the old DBTransactionManager class...
DBTransactionManager.pm:653:	my DBTransactionManager $self = shift;
DBTransactionManager.pm:672:# from the old DBTransactionManager class... 
DBTransactionManager.pm:675:	my DBTransactionManager $self = shift;
Debug.pm:173:    # We use the my_* routines from DBTransactionManager, because they are
Debug.pm:179:	DBTransactionManager::my_error("cannot open $log_name: $!");
Debug.pm:183:    unless ( DBTransactionManager::my_lock($logfile) )
Debug.pm:185:	DBTransactionManager::my_error("cannot lock or seek $log_name: $!");
Debug.pm:195:    unless ( DBTransactionManager::my_unlock($logfile) )
Debug.pm:197:	DBTransactionManager::my_error("cannot unlock $log_name: $!");
Debug.pm:200:    close($logfile) or DBTransactionManager::my_error("closing $log_name: $!");
Download.pm:9:use PBDB::DBTransactionManager;
DownloadTaxonomy.pm:6:use PBDB::DBTransactionManager;
Main.pm:19:use PBDB::DBTransactionManager;
Main.pm:68:my $dbt = new DBTransactionManager();
Map.pm:9:use PBDB::DBTransactionManager;
Map.pm:15:my $dbt;    # The DBTransactionManager object
Map.pm:1052:		my $dbt = new DBTransactionManager();
PBDBUtil.pm:13:#	Parameters:	$dbt - DBTransactionManager object
Permissions.pm:27:    my $dbt = shift;    # DBTransactionManager object
Permissions.pm:36:	unless (UNIVERSAL::isa($dbt,'PBDB::DBTransactionManager')) {
Permissions.pm:37:		carp ("Permissions must be created with valid DBTransactionManager object");
Reference.pm:151:    if (UNIVERSAL::isa($_[0],'PBDB::DBTransactionManager')) {
Reference.pm:217:    if (UNIVERSAL::isa($_[0],'DBTransactionManager')) {
TaxonQuery.pm:1462:    # 	$dbt = DBTransactionManager->new($dbh);
TimeLookup.pm:1331:    if ($self->isa('DBTransactionManager')) {
------------ DataQuery
CollectionQuery.pm:5:# collection or a category of collections.  This is a subclass of PBDataQuery.
CollectionQuery.pm:12:use base 'DataQuery';
CollectionQuery.pm:54:    # First tell our superclass (PBDataQuery) to set any parameters it
CollectionQuery.pm:358:# parent class PBDataQuery.
CollectionQuery.pm:509:    $output .= '    <dwc:collectionCode>' . DataQuery::xml_clean($row->{collection_name}) . 
CollectionQuery.pm:521:	$output .= DataQuery::xml_clean(join(', ', @{$row->{taxa}}));
CollectionQuery.pm:527:	my $pubref = DataQuery::xml_clean($row->{pubref});
CollectionQuery.pm:532:	$output .= '    <collectionRemarks>' . DataQuery::xml_clean(join('; ', @remarks)) . 
CollectionQuery.pm:557:    $output .= ',"collectionCode":"' . DataQuery::json_clean($row->{collection_name}) . '"';
CollectionQuery.pm:568:	$output .= DataQuery::xml_clean(join('","', @{$row->{taxa}}));
CollectionQuery.pm:574:	my $pubref = DataQuery::json_clean($row->{pubref});
DataQuery.pm:2:# DataQuery
DataQuery.pm:10:package PBDB::DataQuery;
DataQuery.pm:75:return at most the specified number of records (positive integer or 'all') - defaults to $DataQuery::DEFAULT_RESULT_LIMIT if not specified\n\n";
TaxonQuery.pm:5:# taxon or a category of taxa.  This is a subclass of DataQuery.
TaxonQuery.pm:12:use base 'DataQuery';
TaxonQuery.pm:457:	unless ( $DataQuery::ACCEPTED_RANK{$rank} )
TaxonQuery.pm:648:# parent class DataQuery.
TaxonQuery.pm:978:		die "400 Unknown taxon rank '$rank'" unless $DataQuery::TAXONOMIC_RANK{lc $rank};
TaxonQuery.pm:1788:	? DataQuery::generateURN($row->{taxon_no}, 'taxon_no')
TaxonQuery.pm:1797:    $output .= '    <dwc:scientificName>' . DataQuery::xml_clean($row->{taxon_name}) . 
TaxonQuery.pm:1816:	    ? DataQuery::generateURN($row->{parent_no}, 'taxon_no')
TaxonQuery.pm:1827:    	$output .= '    <dwc:parentNameUsage>' . DataQuery::xml_clean($row->{parent_name}) . 
TaxonQuery.pm:1833:	$output .= '    <dwc:scientificNameAuthorship>' . DataQuery::xml_clean($row->{attribution}) .
TaxonQuery.pm:1842:	$authorship = DataQuery::xml_clean($authorship);
TaxonQuery.pm:1860:	    ? DataQuery::generateURN($row->{accepted_no}, 'taxon_no')
TaxonQuery.pm:1868:	$output .= '    <dwc:acceptedNameUsage>' . DataQuery::xml_clean($row->{accepted_name}) . 
TaxonQuery.pm:1873:	my $pubref = DataQuery::xml_clean($row->{pubref});
TaxonQuery.pm:1887:	    DataQuery::xml_clean($row->{common_name}) . '</dwc:vernacularName>' . "\n";
TaxonQuery.pm:1925:		? DataQuery::generateURN($row->{taxon_no}, 'taxon_no')
TaxonQuery.pm:1936:	    $value = DataQuery::xml_clean($row->{taxon_name})
TaxonQuery.pm:1944:		$value .= ' ' . DataQuery::xml_clean($row->{attribution});
TaxonQuery.pm:1956:		    ? DataQuery::generateURN($row->{parent_no}, 'taxon_no')
TaxonQuery.pm:1968:		$value = DataQuery::xml_clean($row->{parent_name});
TaxonQuery.pm:1977:		    ? DataQuery::generateURN($row->{accepted_no}, 'taxon_no')
TaxonQuery.pm:1986:		$value = DataQuery::xml_clean($row->{accepted_name});
TaxonQuery.pm:2007:	    $value = DataQuery::xml_clean($row->{attribution})
TaxonQuery.pm:2013:	    $value = DataQuery::xml_clean($row->{pubref})
TaxonQuery.pm:2026:	    $value = DataQuery::xml_clean($row->{common_name}) 
TaxonQuery.pm:2122:    $output .= ',"scientificName":"' . DataQuery::json_clean($row->{taxon_name}) . '"';
TaxonQuery.pm:2126:	$output .= ',"scientificNameAuthorship":"' . DataQuery::json_clean($row->{attribution}) . '"';
TaxonQuery.pm:2134:	$output .= ',"scientificNameAuthorship":"' . DataQuery::json_clean($authorship) . '"';
TaxonQuery.pm:2150:	$output .= ',"parentNameUsage":"' . DataQuery::json_clean($row->{parent_name}) . '"';
TaxonQuery.pm:2170:	$output .= ',"acceptedNameUsage":"' . DataQuery::json_clean($row->{accepted_name}) . '"';
TaxonQuery.pm:2175:	$output .= ',"namePublishedIn":"' . DataQuery::json_clean($row->{pubref}) . '"';
TaxonQuery.pm:2179:	$output .= ',"vernacularName":"' . DataQuery::json_clean($row->{common_name}) . '"';
TreeQuery.pm:5:# taxon or a category of taxa.  This is a subclass of DataQuery.
TreeQuery.pm:12:use parent 'DataQuery';
TreeQuery.pm:201:	unless ( $DataQuery::ACCEPTED_RANK{$rank} )
TreeQuery.pm:550:    $output .= '{"scientificName":"' . DataQuery::json_clean($row->{taxon_name}) . '"';
TreeQuery.pm:555:	$output .= ',"vernacularName":"' . DataQuery::json_clean($row->{common_name}) . '"';
TreeQuery.pm:563:	$output .= ',"scientificNameAuthorship":"' . DataQuery::json_clean($attr) . '"';
TreeQuery.pm:593:    $output .= '    <dwc:scientificName>' . DataQuery::xml_clean($row->{taxon_name}) . 
TreeQuery.pm:604:	$output .= '    <dwc:scientificNameAuthorship>' . DataQuery::xml_clean($attr) . 
------------ Debug
AuthorNames.pm:3:use PBDB::Debug qw(dbg);
Cladogram.pm:7:use PBDB::Debug qw(dbg);
Cladogram.pm:123:        $vars->{'error_message'} = "<div align=\"center\">".Debug::printErrors($errors)."</div><br>";
Classic.pm:50:use PBDB::Debug qw(dbg);
Classic.pm:1199:            print "<div align=\"center\">".Debug::printWarnings($warnings)."</div>";
Classic.pm:2142:                    print "<div align=\"center\" class=\"large\">".Debug::printWarnings(\@errormessages)."</div>";
Classic.pm:2756:# sub displayTenMyBinsDebug {
Classic.pm:2760:#     Scales::displayTenMyBinsDebug($dbt,$q,$s,$hbo);
Classic.pm:2832:#         print "<div align=\"center\">".Debug::printErrors(["No image number specified"])."</div>";
Classic.pm:3966:        print qq|<tr><td colspan="3">|.Debug::printWarnings(['Multiple versions of some names exist in the database.  Please select the version wanted and hit "Classify taxa"']).qq|</td></tr>|;
Classic.pm:5272:        print "<div align=\"center\">".Debug::printErrors(["No valid reference supplied"])."</div>";
Classification.pm:6:use PBDB::Debug qw(dbg);
Collection.pm:25:use PBDB::Debug qw(dbg);
Collection.pm:27:use PBDB::Debug;
Collection.pm:721:		my $message = "<div align=\"center\">".Debug::printErrors(\@errors)."<br>";
CollectionEntry.pm:18:use PBDB::Debug qw(dbg);
CollectionEntry.pm:622:        print PBDB::Debug::printErrors(["Invalid collection number $collection_no"]);
CollectionEntry.pm:637:		print PBDB::Debug::printErrors(["No collection with collection number $collection_no"]);
CollectionEntry.pm:1363:            $return .= PBDB::Debug::printWarnings(\@warnings);
CollectionEntry.pm:1559:            $return .= PBDB::Debug::printWarnings(\@warnings);
Confidence.pm:15:use PBDB::Debug qw(dbg);
Confidence.pm:1105:        print "<div align=\"center\">".Debug::printWarnings(\@warnings)."</div><br>\n\n";
Confidence.pm:1880:use Debug qw(dbg);
DBTransactionManager.pm:12:use PBDB::Debug qw(dbg);
DBTransactionManager.pm:825:            print Debug::printWarnings(["Record addition canceled"]);
Debug.pm:7:package PBDB::Debug;
Debug.pm:15:# Debug level, 1 is minimal debugging, higher is more verbose
Debug.pm:16:$Debug::DEBUG = 0;
Debug.pm:103:    if ( $Debug::DEBUG && $Debug::DEBUG >= $level && $message ) {
Debug.pm:106:    return $Debug::DEBUG;
Download.pm:252:        print Debug::printWarnings(\@form_warnings);
DownloadTaxonomy.pm:12:use PBDB::Debug qw(dbg);
Ecology.pm:7:use PBDB::Debug qw(dbg);
EcologyEntry.pm:5:use PBDB::Debug qw(dbg);
FossilRecord.pm:12:use PBDB::Debug qw(dbg);
FossilRecord.pm:515:        print "<div align=\"center\">".Debug::printErrors(\@errors)."</div>";
HTMLBuilder.pm:507:# Debug;
Images.pm:7:use PBDB::Debug qw(dbg);
Main.pm:49:use PBDB::Debug qw(dbg);
Map.pm:3:use PBDB::Debug qw(dbg);
MeasurementEntry.pm:25:        print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
MeasurementEntry.pm:99:        print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
MeasurementEntry.pm:108:        print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
MeasurementEntry.pm:217:		print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
MeasurementEntry.pm:564:            print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
MeasurementEntry.pm:823:        print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
MeasurementEntry.pm:852:            print "<center><p>".Debug::printWarnings(\@error)."</p></center>\n";
Neptune.pm:8:use PBDB::Debug;
Neptune.pm:536:        print Debug::printErrors(\@errors);
Opinion.pm:8:use PBDB::Debug qw(dbg);
PAST.pm:8:use PBDB::Debug qw(dbg);
PBDBUtil.pm:5:use PBDB::Debug qw(dbg);
Permissions.pm:12:use PBDB::Debug qw(dbg);
Reclassify.pm:6:use PBDB::Debug qw(dbg);
Reclassify.pm:257:        print Debug::printWarnings(\@warnings);
Reference.pm:12:use PBDB::Debug qw(dbg);
ReferenceEntry.pm:7:use PBDB::Debug qw(dbg);
ReferenceEntry.pm:493:        print "<div align=\"center\">".Debug::printWarnings("This reference was not entered since it is a duplicate of reference $reference_no")."</div>";
Report.pm:12:use PBDB::Debug qw(dbg);
Report.pm:74:    my $msg = Debug::printWarnings($self->{'warnings'});
Report.pm:678:        print "<div align=\"center\">".Debug::printErrors(["Invalid taxon name"])."</div>";
Review.pm:6:use PBDB::Debug;
Review.pm:18:		print "<div align=\"center\">".Debug::printWarnings("Only authorizers can edit review pages. Many apologies.")."</div>";
Review.pm:48:			print "<div align=\"center\">".Debug::printWarnings("You don't own this review page, so you can't edit it. Nothing personal.")."</div>";
Strata.pm:7:use PBDB::Debug qw(dbg);
Taxon.pm:24:use PBDB::Debug qw(dbg);
Taxon.pm:1020:            $end_message .= Debug::printWarnings(\@warnings);
Taxon.pm:1820:        print Debug::printWarnings(\@warnings);
Taxon.pm:1868:        print Debug::printWarnings(\@warnings);
TaxonInfo.pm:15:use PBDB::Debug qw(dbg);
TaxonInfo.pm:197:            print "<div align=\"center\">".PBDB::Debug::printErrors(["taxon number $taxon_no doesn't exist in the database"])."</div>";
TypoChecker.pm:3:use PBDB::Debug qw(dbg);
------------ Download
Cladogram.pm:968:	$caption .= "<nobr>Download as: <a href=\"/public/cladograms/cladogram_$cladogram_no.nhx\">NHX</a>, <a href=\"/public/cladograms/cladogram_$cladogram_no.png\">PNG</a></nobr></p></div>";
Classic.pm:446:sub displayDownloadForm {
Classic.pm:486:sub displayDownloadGenerator {
Classic.pm:527:sub displayBasicDownloadForm {
Classic.pm:546:sub displayDownloadResults {
Classic.pm:550:    require Download;
Classic.pm:555:	my $m = Download->new($dbt,$q,$s,$hbo);
Classic.pm:556:	$m->buildDownload( );
Classic.pm:561:sub emailDownloadFiles	{
Classic.pm:565:	require Download;
Classic.pm:569:	my $m = Download->new($dbt,$q,$s,$hbo);
Classic.pm:570:	$m->emailDownloadFiles();
Classic.pm:577:sub displayDownloadMeasurementsForm	{
Classic.pm:589:sub displayDownloadMeasurementsResults	{
Classic.pm:594:	require Download;
Classic.pm:597:	PBDB::Measurement::displayDownloadMeasurementsResults($q,$s,$dbt,$hbo);
Classic.pm:601:sub displayDownloadTaxonomyForm {
Classic.pm:621:    require DownloadTaxonomy;
Classic.pm:622:    DownloadTaxonomy::getTaxonomyXML($dbt,$q,$s,$hbo);
Classic.pm:625:sub displayDownloadTaxonomyResults {
Classic.pm:630:    require DownloadTaxonomy;
Classic.pm:635:        DownloadTaxonomy::displayITISDownload($dbt,$q,$s);
Classic.pm:637:        DownloadTaxonomy::displayPBDBDownload($dbt,$q,$s);
Classic.pm:1477:    require Download;
Classic.pm:1522:    my $d = new Download($dbt,$q,$s,$hbo);
Collection.pm:268:        #These seeminly pointless four lines are necessary if this script is called from Download or whatever.
Collection.pm:2174:# Download.pm uses some similar calculations but I see no easy way to
Confidence.pm:991:    print "<br>Download image as: <a href=\"/public/confidence/$image_name.png\">PNG</a>";
Confidence.pm:995:    print "Download data as: <a href=\"/public/confidence/confidence$image_count.csv\">CSV</a>";
Confidence.pm:1150:#    $html .= "<b>Download as: <a href=\"/public/confidence/confidence$tableNo.csv\">CSV</a></b>";
Curve.pm:20:my $downloadForm = "displayDownloadForm";
Curve.pm:53:	# this is the output directory used by Download.pm, not this program
Curve.pm:355:		$downloadForm = "displayDownloadNeptuneForm";
Curve.pm:2072:			$downloadForm = "displayDownloadNeptuneForm";
Curve.pm:2954:# major rewrite to use data output by Download.pm instead of vetting all
Download.pm:1:package PBDB::Download;
Download.pm:75:sub buildDownload {
Download.pm:86:            main::displayDownloadForm();
Download.pm:88:            main::displayBasicDownloadForm();
Download.pm:178:            main::displayDownloadForm();
Download.pm:180:            main::displayBasicDownloadForm();
Download.pm:190:    print "<div align=\"center\"><p class=\"pageTitle\">Download results</p></div>\n\n";
Download.pm:306:        print "<p>You can also e-mail the files.<br>\n<nobr><form method=\"post\" action=$READ_URL>Address: <input type=\"hidden\" name=\"action\" value=\"emailDownloadFiles\"><input type=\"hidden\" name=\"filenames\" value=\"$fileNames\"><input name=\"email\" size=\"20\"> <input type=\"submit\" value=\"e-mail\"></form></nobr></p>\n\n";
Download.pm:311:    print qq|<p align="center" style="white-space: nowrap;"><a href="?action=displayDownloadForm">Do another download</a> |;
Download.pm:380:        push @errors , "You must pull down a 'Download only the following' value if you want to use this option";
Download.pm:396:        main::displayDownloadForm();
Download.pm:398:        main::displayBasicDownloadForm();
Download.pm:411:    $html .= '<tr><td colspan=2><p class="large darkList" style="padding: 2px; margin-bottom: 0.5em;">Download criteria</p></td></tr>';
Download.pm:3989:sub emailDownloadFiles	{
Download.pm:4024:	print "<center>\n<p class=\"pageTitle\">Download sent</p>\n\nYour download files have been mailed to:</p>\n\n<p><b>".$q->param('email')."</b></p></center>";
DownloadTaxonomy.pm:1:package PBDB::DownloadTaxonomy;
DownloadTaxonomy.pm:322:sub displayITISDownload {
DownloadTaxonomy.pm:363:        print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Please try again</a></h5></div><br>";
DownloadTaxonomy.pm:634:    print "<div align=\"center\"><h5><a href='/public/taxa_downloads/$dirname.tar.gz'>Download file</a> - <a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Do another download</a></h5></div><br>";
DownloadTaxonomy.pm:659:sub displayPBDBDownload {
DownloadTaxonomy.pm:706:        print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Please try again</a></h5></div><br>";
DownloadTaxonomy.pm:897:  print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Do another download</a></h5></div><br>";
Measurement.pm:28:#          only the taxon_no is known. used in TaxonInfo and in limited cases in Download
Measurement.pm:194:# See TaxonInfo or Download for examples of this function being called. i.e.:
Measurement.pm:453:sub displayDownloadMeasurementsResults  {
Measurement.pm:460:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:510:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:523:			main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:576:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:601:			main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:672:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:679:	my $download = Download->new($dbt,$q,$s,$hbo);
Measurement.pm:772:			main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:1352:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:1356:	print "<p class=\"pageTitle\" style=\"margin-left: 8em;\">Download results</p>\n";
Neptune.pm:10:use PBDB::Download;
Neptune.pm:97:sub displayNeptuneDownloadResults {
Neptune.pm:170:        my $d = new Download($dbt,$q2,$s,$hbo);
Neptune.pm:386:    print "<a href=\"$READ_URL?action=displayDownloadNeptuneForm\"><b>Do another download</b></a> - ";
PAST.pm:24:    my $filename = getDownloadFileName($q,$s);
PAST.pm:36:        print "You must do a <a href=\"classic?action=displayDownloadForm\">download</a> before you can use these functions.\n";
PAST.pm:38:        print "You may want to do another <a href=\"classic?action=displayDownloadForm\">download</a> before using these functions.\n";
PAST.pm:70:    my $filename = getDownloadFileName($q,$s);
PAST.pm:107:      #print "<br><br><a href=\"$PAST_HTML_DIR/$outfile\">Download results</a>";
PAST.pm:112:sub getDownloadFileName {
PrintHierarchy.pm:290:		print qq|<form method="POST" action="$READ_URL" name="doDownloadTaxonomy">
PrintHierarchy.pm:291:<input type="hidden" name="action" value="displayDownloadTaxonomyResults">
PrintHierarchy.pm:301:		print '<a href="/public/classification/classification.csv">Download</a></b> this list of taxonomic names';
PrintHierarchy.pm:302:		print ' - <a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download</a> authority and opinion data for these taxa';
Reference.pm:14:use PBDB::Download;
Reference.pm:493:        print qq|<a href="/public/references/${authname}_refs.csv">Download all the references</a> -\n|;
Reference.pm:1260:			my $d = Download->new($dbt,$q,$s,$hbo);
TaxonInfo.pm:1564:        $output .= '<p><b><a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download authority and opinion data</a></b> - <b><a href=# onClick="javascript: document.doViewClassification.submit()">View classification of included taxa</a></b>';
TaxonInfo.pm:1565:        $output .= "<form method=\"POST\" action=\"\" name=\"doDownloadTaxonomy\">";
TaxonInfo.pm:1566:        $output .= '<input type="hidden" name="action" value="displayDownloadTaxonomyResults">';
TaxonInfo.pm:3449:	print "<p><a href=\"/public/downloads/$filename\">Download the full data set</a></p>\n\n";
TaxonInfo.pm:5209:# JA: it is currently used only in DownloadTaxonomy.pm
TimeLookup.pm:1468:#  and Download, so it shouldn't be deprecated
------------ DownloadTaxonomy
Classic.pm:601:sub displayDownloadTaxonomyForm {
Classic.pm:621:    require DownloadTaxonomy;
Classic.pm:622:    DownloadTaxonomy::getTaxonomyXML($dbt,$q,$s,$hbo);
Classic.pm:625:sub displayDownloadTaxonomyResults {
Classic.pm:630:    require DownloadTaxonomy;
Classic.pm:635:        DownloadTaxonomy::displayITISDownload($dbt,$q,$s);
Classic.pm:637:        DownloadTaxonomy::displayPBDBDownload($dbt,$q,$s);
DownloadTaxonomy.pm:1:package PBDB::DownloadTaxonomy;
DownloadTaxonomy.pm:363:        print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Please try again</a></h5></div><br>";
DownloadTaxonomy.pm:634:    print "<div align=\"center\"><h5><a href='/public/taxa_downloads/$dirname.tar.gz'>Download file</a> - <a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Do another download</a></h5></div><br>";
DownloadTaxonomy.pm:706:        print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Please try again</a></h5></div><br>";
DownloadTaxonomy.pm:897:  print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Do another download</a></h5></div><br>";
PrintHierarchy.pm:290:		print qq|<form method="POST" action="$READ_URL" name="doDownloadTaxonomy">
PrintHierarchy.pm:291:<input type="hidden" name="action" value="displayDownloadTaxonomyResults">
PrintHierarchy.pm:302:		print ' - <a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download</a> authority and opinion data for these taxa';
TaxonInfo.pm:1564:        $output .= '<p><b><a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download authority and opinion data</a></b> - <b><a href=# onClick="javascript: document.doViewClassification.submit()">View classification of included taxa</a></b>';
TaxonInfo.pm:1565:        $output .= "<form method=\"POST\" action=\"\" name=\"doDownloadTaxonomy\">";
TaxonInfo.pm:1566:        $output .= '<input type="hidden" name="action" value="displayDownloadTaxonomyResults">';
TaxonInfo.pm:5209:# JA: it is currently used only in DownloadTaxonomy.pm
------------ Ecology
Classic.pm:35:use PBDB::Ecology;
Classic.pm:1867:sub displayCollectionEcology	{
Classic.pm:1874:	PBDB::Collection::displayCollectionEcology($dbt,$q,$s,$hbo);
Classic.pm:1992:        : ($goal eq 'ecotaph')    ? 'startPopulateEcologyForm'
Classic.pm:1993:        : ($goal eq 'ecovert')    ? 'startPopulateEcologyForm'
Classic.pm:2165:        EcologyEntry::populateEcologyForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2168:        EcologyEntry::populateEcologyForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2849:## Ecology stuff
Classic.pm:2850:sub startStartEcologyTaphonomySearch{
Classic.pm:2861:sub startStartEcologyVertebrateSearch{
Classic.pm:2872:sub startPopulateEcologyForm	{
Classic.pm:2877:	EcologyEntry::populateEcologyForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2880:sub startProcessEcologyForm	{
Classic.pm:2885:	EcologyEntry::processEcologyForm($dbt, $q, $s, $WRITE_URL);
Classic.pm:2888:## END Ecology stuff
Collection.pm:2176:sub displayCollectionEcology	{
Collection.pm:2211:    my $ecology = Ecology::getEcology($dbt,$parents,\@categories,'get_basis');
Collection.pm:2225:                    $ecology->{$taxon_no}{$_} = Ecology::kgToGrams($ecology->{$taxon_no}{$_});
Collection.pm:2279:        # See Ecology::getEcology for further explanation
CollectionEntry.pm:1540:	#  displayCollectionEcology but these are going with Fossilworks
Download.pm:7:use PBDB::Ecology;
Download.pm:691:        # Ecology fields
Download.pm:693:            $html .= $self->retellOptionsRow ( "Ecology output fields", join ( "<br>", @ecoFields) );
Download.pm:2353:	%ecotaph = %{Ecology::getEcology($dbt,\%master_class,\@ecoFields,0,0)};
Ecology.pm:1:# the following functions were moved into EcologyEntry.pm by JA 5.6.13:
Ecology.pm:2:# populateEcologyForm, processEcologyForm, gramsToKg, kgToGrams
Ecology.pm:4:package PBDB::Ecology;
Ecology.pm:14:sub getEcology {
Ecology.pm:51:        dbg("Ecology sql: $sql");
Ecology.pm:101:        dbg("Ecology recurse sql: $sql");
Ecology.pm:152:                    # (used in displayCollectionEcology), get that as well
Ecology.pm:229:sub fastEcologyLookup	{
EcologyEntry.pm:1:# includes entry functions extracted from Ecology.pm JA 5.6.13
EcologyEntry.pm:3:package PBDB::EcologyEntry;
EcologyEntry.pm:13:sub populateEcologyForm	{
EcologyEntry.pm:103:sub processEcologyForm	{
EcologyEntry.pm:159:    my $action = ($q->param('goal') eq 'ecovert') ? 'startStartEcologyVertebrateSearch' : 'startStartEcologyTaphonomySearch';
EcologyEntry.pm:160:	print "<center><p><a href=\"$WRITE_URL?action=startPopulateEcologyForm&taxon_no=$taxon_no&goal=".$q->param('goal')."\">Edit data for this taxon</a> - \n";
FossilRecord.pm:9:use PBDB::Ecology;
FossilRecord.pm:244:      onMouseOut="setState(4)">Ecology</td>
FossilRecord.pm:291:                print "<a href=\"$WRITE_URL.pl?action=startPopulateEcologyForm&amp;taxon_no=$taxon_no\"><b>Add/edit ecological/taphonomic data</b></a> - ";
FossilRecord.pm:354:		print "<div align=\"center\"><h3>Ecology and taphonomy</h3></div>\n";
FossilRecord.pm:357:		    print TaxonInfo::displayEcology($dbt,$taxon_no,$in_list);
Main.pm:34:use PBDB::Ecology;
Measurement.pm:7:use PBDB::Ecology;
Measurement.pm:588:			my %temp_lookup = %{PBDB::Ecology::fastEcologyLookup($dbt,'life_habit',$p->{lft},$p->{rgt})};
ReferenceEntry.pm:545:            <li>Add <a href="#" onClick="popup = window.open('$WRITE_URL?a=startStartEcologyTaphonomySearch', 'blah', 'left=100,top=100,height=700,width=700,toolbar=yes,scrollbars=yes,resizable=yes');">ecological/taphonomic data</a>, <a href="#" onClick="popup = window.open('$WRITE_URL?a=displaySpecimenSearchForm', 'blah', 'left=100,top=100,height=700,width=700,toolbar=yes,scrollbars=yes,resizable=yes');">specimen measurements</a>, and <a href="#" onClick="popup = window.open('$WRITE_URL?a=startImage', 'blah', 'left=100,top=100,height=700,width=700,toolbar=yes,scrollbars=yes,resizable=yes');">images</a>
TaxonInfo.pm:11:use PBDB::Ecology;
TaxonInfo.pm:12:use PBDB::EcologyEntry;
TaxonInfo.pm:289:      Ecology and taphonomy</td>
TaxonInfo.pm:403:                print "<a href=\"$WRITE_URL?a=startPopulateEcologyForm&amp;taxon_no=$taxon_no\"><b>Add/edit ecological/taphonomic data</b></a> - ";
TaxonInfo.pm:477:            print displayEcology($dbt,$taxon_no,$in_list);
TaxonInfo.pm:2435:sub displayEcology	{
TaxonInfo.pm:2456:    my $eco_hash = PBDB::Ecology::getEcology($dbt,$class_hash,\@ecotaphFields,'get_basis');
TaxonInfo.pm:2470:                    $ecotaphVals->{$_} = PBDB::EcologyEntry::kgToGrams($ecotaphVals->{$_});
TaxonInfo.pm:4121:		my $eco_hash = PBDB::Ecology::getEcology($dbt,$class_hash,['locomotion','life_habit','diet1','diet2'],'get_basis');
TaxonInfo.pm:4125:			print "<p>Ecology:";
------------ EcologyEntry
Classic.pm:2165:        EcologyEntry::populateEcologyForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2168:        EcologyEntry::populateEcologyForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2877:	EcologyEntry::populateEcologyForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2885:	EcologyEntry::processEcologyForm($dbt, $q, $s, $WRITE_URL);
Ecology.pm:1:# the following functions were moved into EcologyEntry.pm by JA 5.6.13:
EcologyEntry.pm:3:package PBDB::EcologyEntry;
TaxonInfo.pm:12:use PBDB::EcologyEntry;
TaxonInfo.pm:2470:                    $ecotaphVals->{$_} = PBDB::EcologyEntry::kgToGrams($ecotaphVals->{$_});
------------ Errors
Cladogram.pm:123:        $vars->{'error_message'} = "<div align=\"center\">".Debug::printErrors($errors)."</div><br>";
Classic.pm:1932:	my $errors = Errors->new();
Classic.pm:2832:#         print "<div align=\"center\">".Debug::printErrors(["No image number specified"])."</div>";
Classic.pm:5272:        print "<div align=\"center\">".Debug::printErrors(["No valid reference supplied"])."</div>";
Collection.pm:721:		my $message = "<div align=\"center\">".Debug::printErrors(\@errors)."<br>";
CollectionEntry.pm:622:        print PBDB::Debug::printErrors(["Invalid collection number $collection_no"]);
CollectionEntry.pm:637:		print PBDB::Debug::printErrors(["No collection with collection number $collection_no"]);
Debug.pm:80:sub printErrors{
DownloadTaxonomy.pm:362:        displayErrors(@errors);
DownloadTaxonomy.pm:705:        displayErrors(@errors);
DownloadTaxonomy.pm:1341:sub displayErrors {
Errors.pm:7:package PBDB::Errors;
Errors.pm:22:	my PBDB::Errors $self = fields::new($class);
Errors.pm:33:	my PBDB::Errors $self = shift;
Errors.pm:44:	my PBDB::Errors $self = shift;
Errors.pm:52:	my PBDB::Errors $self = shift;	
Errors.pm:58:	my PBDB::Errors $self = shift;
Errors.pm:85:sub appendErrors {
Errors.pm:86:	my PBDB::Errors $self = shift;
Errors.pm:96:# end of Errors.pm
FossilRecord.pm:515:        print "<div align=\"center\">".Debug::printErrors(\@errors)."</div>";
FossilRecord.pm:527:        my $banner = "<span class=\"error_text\">Errors</span> or <span class=\"warning_text\">warnings</span> were encountered in processing this form.  Please correct all errors and optionally correct warnings and resubmit";
FossilRecord.pm:691:            # Errors printed first, then warnings
Neptune.pm:536:        print Debug::printErrors(\@errors);
Opinion.pm:737:	my $errors = Errors->new();
Report.pm:678:        print "<div align=\"center\">".Debug::printErrors(["Invalid taxon name"])."</div>";
Taxon.pm:18:use PBDB::Errors;
Taxon.pm:395:#	        my $errors = Errors->new();
Taxon.pm:524:	my $errors = Errors->new();
TaxonInfo.pm:197:            print "<div align=\"center\">".PBDB::Debug::printErrors(["taxon number $taxon_no doesn't exist in the database"])."</div>";
------------ FossilRecord
Classic.pm:41:#use FossilRecord;
Classic.pm:2313:	FossilRecord::displayClassificationTableForm($dbt, $hbo, $s, $q);	
Classic.pm:2331:	FossilRecord::displayClassificationUploadForm($dbt, $hbo, $s, $q);	
Classic.pm:2345:	FossilRecord::submitClassificationTableForm($dbt,$hbo, $s, $q);
Classic.pm:2358:	FossilRecord::submitClassificationUploadForm($dbt,$hbo, $s, $q);
Classic.pm:2646:         FossilRecord::submitSearchTaxaForm($dbt,$q,$s,$hbo);
Classic.pm:2685:sub displaySearchFossilRecordTaxaForm {
Classic.pm:2693:sub submitSearchFossilRecordTaxa {
Classic.pm:2702:sub displayFossilRecordCurveForm {
Classic.pm:2707:	FossilRecord::displayFossilRecordCurveForm($dbt,$q,$s,$hbo);
Classic.pm:2710:sub submitFossilRecordCurveForm {
Classic.pm:2715:	FossilRecord::submitFossilRecordCurveForm($dbt,$q,$s,$hbo);
Curve.pm:341:			$bin_type = "FossilRecord2";
Curve.pm:444:	} elsif ( $bin_type eq "FossilRecord2" ) {
FossilRecord.pm:1:package PBDB::FossilRecord;
FossilRecord.pm:365:sub displayFossilRecordCurveForm {
Main.pm:40:#use FossilRecord;
Opinion.pm:1282:            my ($max_no,$err1) = FossilRecord::parseIntervalName($dbt,$q->param('max_interval_name'));
Opinion.pm:1292:            my ($min_no,$err2) = FossilRecord::parseIntervalName($dbt,$q->param('min_interval_name'));
TimeLookup.pm:1010:# JA: this one is only ever used by FossilRecord::submitSearchTaxaForm,
------------ HTMLBuilder
Classic.pm:18:use PBDB::HTMLBuilder;
Classic.pm:94:    my $hbo = PBDB::HTMLBuilder->new($dbt,$s,$use_guest,'');
Collection.pm:15:use PBDB::HTMLBuilder;
Collection.pm:521:            $environment = join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{'environment_general'}});
Collection.pm:523:            $environment = join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{'environment_terrestrial'}});
Collection.pm:525:            $environment = join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{'environment_siliciclastic'}});
Collection.pm:526:            $environment .= "," . join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{'environment_carbonate'}});
Collection.pm:528:            $environment = join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{'environment_siliciclastic'}});
Collection.pm:530:            $environment = join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{'environment_carbonate'}});
Collection.pm:534:                    $environment = join(",", map {"'".$_."'"} @{$PBDB::HTMLBuilder::hard_lists{"zone_$z"}});
Confidence.pm:10:use PBDB::HTMLBuilder;
Confidence.pm:612:        $scale_select = HTMLBuilder::htmlSelect('scale',\@keys,\@values,$scale_selected);
Confidence.pm:634:    my $method_select = HTMLBuilder::htmlSelect('conf_method',$methods,$methods,$q->param('conf_method'));
Confidence.pm:637:    my $estimate_select = HTMLBuilder::htmlSelect('conf_type',$estimates,$estimates,$q->param('conf_type'));
Confidence.pm:641:    my $confidence_select = HTMLBuilder::htmlSelect('alpha',$confidences,$confidences,$alpha);
Confidence.pm:644:    my $order_by_select = HTMLBuilder::htmlSelect('order',$order_by,$order_by,$q->param('order'));
Confidence.pm:647:    my $color_select = HTMLBuilder::htmlSelect('color',$colors,$colors,$q->param('color'));
Confidence.pm:651:    my $glyph_type_select = HTMLBuilder::htmlSelect('glyph_type',$glyph_types,$glyph_types,$glyph_type);
HTMLBuilder.pm:1:package PBDB::HTMLBuilder;
HTMLBuilder.pm:13:%HTMLBuilder::hard_lists = (
HTMLBuilder.pm:86:            '','-- General --','',@{$HTMLBuilder::hard_lists{'environment_general'}},
HTMLBuilder.pm:87:            '', '-- Carbonate marine --', '', @{$HTMLBuilder::hard_lists{'environment_carbonate'}},
HTMLBuilder.pm:88:            '', '-- Siliciclastic marine --', '', @{$HTMLBuilder::hard_lists{'environment_siliciclastic'}},
HTMLBuilder.pm:89:            '', '-- Terrestrial --','',@{$HTMLBuilder::hard_lists{'environment_terrestrial'}}], 
HTMLBuilder.pm:717:    } elsif (exists $HTMLBuilder::hard_lists{$name}) {
HTMLBuilder.pm:719:        @keys = @{$HTMLBuilder::hard_lists{$name}};
HTMLBuilder.pm:857:    # available to the template engine HTMLBuilder.pm.
HTMLBuilder.pm:915:    my @list = @{$HTMLBuilder::hard_lists{$name}};
Main.pm:17:use PBDB::HTMLBuilder;
Opinion.pm:270:# Pass this an HTMLBuilder object,
Opinion.pm:280:				 # we'll pass to HTMLBuilder to pop. the form.
Opinion.pm:282:	# Fields we'll pass to HTMLBuilder that the user can't edit.
Opinion.pm:714:# Pass it the HTMLBuilder object, $hbo, the cgi parameters, $q, and the session, $s.
Taxon.pm:145:# Pass this an HTMLBuilder object,
Taxon.pm:162:				 # we'll pass to HTMLBuilder to pop. the form.
Taxon.pm:434:            my $original_no_select = HTMLBuilder::htmlSelect('original_no',\@names,\@nos,$orig_no);
Taxon.pm:504:# Pass it the HTMLBuilder object, $hbo, the cgi parameters, $q, and the session, $s.
------------ Images
Classic.pm:36:#use Images;
Classic.pm:2162:    #     Images::displayLoadImageForm($dbt,$q,$s); 
Classic.pm:2788:## Images stuff
Classic.pm:2800:# 	Images::displayLoadImageForm($dbt, $q, $s);
Classic.pm:2810:# 	Images::processLoadImage($dbt, $q, $s);
Classic.pm:2821:# 	Images::gallery($q,$s,$dbt,$hbo);
Classic.pm:2836:#         Images::displayImage($dbt,$image_no,$height,$width);
FossilRecord.pm:10:use PBDB::Images;
Images.pm:1:package PBDB::Images;
Images.pm:291:	print qq|<center><p class="pageTitle">Images of $taxon_name</p>\n\n<div style="width: $width; margin-left: auto; margin-right: auto; overflow: hidden; border: $borderWidth solid LightGray;">\n|;
Main.pm:35:#use Images;
TaxonInfo.pm:13:#use Images;
TaxonInfo.pm:640:# 	my @thumbs = Images::getImageList($dbt, $in_list);
TaxonInfo.pm:3927:		# my @thumbs = Images::getImageList($dbt, \@all_spellings);
------------ Main
Classic.pm:96:    if ( param('redirectMain') )
Download.pm:74:# Main handling routine
------------ Map
Classic.pm:1668:	#require Map;
Classic.pm:4931:# an occurrence, and marks all not-most-recent to NO.  Needed for collections search for Map and such
Collection.pm:334:	# Handle half/quarter degrees for long/lat respectively passed by Map.pm PS 11/23/2004
Collection.pm:726:		} elsif ( $options{"calling_script"} eq "Map" )	{
CollectionEntry.pm:11:# use Map;
CollectionEntry.pm:20:#use Map;    
CollectionEntry.pm:1875:            # Get Map rotation information - needs maptime to be set (to collage)
CollectionEntry.pm:1877:            my $map_o = new Map;
Confidence.pm:113:    my $int2period = $t->getScaleMapping('69','names');
Confidence.pm:726:    my $mapping  = $t->getScaleMapping($scale);
Confidence.pm:990:    print "<div align=\"center\"><table><tr><td valign=\"top\" align=\"center\"><img src=\"/public/confidence/$image_name.png\"  usemap=\"#ConfidenceMap\" ismap border=0><br>";
Confidence.pm:2041:sub makePixelMapper {
Confidence.pm:2070:    my $image_map = '<map name="ConfidenceMap">'."\n";
Confidence.pm:2133:    my $toPixel = makePixelMapper($y_offset,$graph_height,$oldest,$youngest,$y_axis_order);
Download.pm:3866:        ($interval_lookup) = $self->{t}->getScaleMapping('bins');
Download.pm:3869:        ($interval_lookup) = $self->{t}->getScaleMapping($time_scale,'names');
DownloadTaxonomy.pm:393:    # A Map of taxon_no --> kingdom_name. Needed for ITIS, since the kingdom name
DownloadTaxonomy.pm:395:    my %kingdom = getKingdomMap($dbt);
DownloadTaxonomy.pm:1249:sub getKingdomMap {
HTMLBuilder.pm:38:    # Map form parameters 
Map.pm:1:package PBDB::Map;
Map.pm:60:	# some functions that call Map do not pass a q or s object
Map.pm:75:sub buildMap {
Map.pm:193:    $options{'calling_script'} = 'Map';
Map.pm:319:    my $clickstring = "?a=displayMapResults";
Map.pm:417:            print MAPOUT "<b><a href='?a=basicMapForm'>Search&nbsp;again</a></b></p>\n";
Map.pm:2870:#        carp "Map.pm warning, bad args passed to acos: $_[0] x $x y $y";
Report.pm:795:        my $binning = $t->getScaleMapping('bins');
Report.pm:798:		my $intervalInScaleRef = $t->getScaleMapping(69,'names');
Report.pm:801:		my $intervalInScaleRef = $t->getScaleMapping(71,'names');
Report.pm:804:		my $intervalInScaleRef = $t->getScaleMapping(73,'names');
Review.pm:404:	my @mapsections = split /\[\[Map:/,$text;
Review.pm:421:				makeMap($dbt,$q,$s,$hbo,join('_',@tags));
Review.pm:425:			makeMap($dbt,$q,$s,$hbo,join('_',@tags));
Review.pm:568:sub makeMap	{
Review.pm:670:	require Map;
Review.pm:671:	my $m = Map->new($q,$dbt,$s);
Review.pm:672:	my ($map_html_path,$errors,$warnings) = $m->buildMap('dataSet'=>$colls);
Scales.pm:914:	$general_html .= "<a href=# onClick=\"document.doMap.submit();\">See map of collections within this interval</a><br>";
Scales.pm:916:	$general_html .= qq|<form method="POST" action="$READ_URL" name="doMap"><input type="hidden" name="action" value="displaySimpleMap"><input type="hidden" name="max_interval_no" value="$i"></form>|;
Session.pm:592:<tr><td valign="top">Map view</td></tr>
Strata.pm:501:    my $int2period = $t->getScaleMapping('69','names');
TaxonInfo.pm:494:	# 	displayMap($dbt,$q,$s,$collectionsSet);
TaxonInfo.pm:695:# sub displayMap {
TaxonInfo.pm:697:#     require Map;
TaxonInfo.pm:715:#         my $m = Map->new($q,$dbt,$s);
TaxonInfo.pm:716:#         ($map_html_path,$errors,$warnings) = $m->buildMap('dataSet'=>$collectionsSet);
TaxonInfo.pm:732:# <span class="displayPanelHeader" class="large">Map</span>
TaxonInfo.pm:4359:# function requestMap()	{
TaxonInfo.pm:4360:# 	document.getElementById('taxonImage').src = '$HOST_URL/?a=displayMapOnly&amp;display_header=NO&amp;$taxon_param';
TaxonInfo.pm:4362:# 	document.getElementById('moreMapLinkText').innerHTML = '';
TaxonInfo.pm:4364:# 	swapID = setInterval( "swapInMap()" , 2000 );
TaxonInfo.pm:4371:# function swapInMap()	{
TimeLookup.pm:1179:# I.E.:  $hashref = $t->getScaleMapping('bins'), $hashref = $t->getScaleMapping(69,'name');
TimeLookup.pm:1180:sub getScaleMapping {
TimeLookup.pm:1206:        # Map intervals accepts both 10 my bins and integers
TypoChecker.pm:183:    my $period_lookup= $t->getScaleMapping('69','names');
------------ Measurement
Classic.pm:37:use PBDB::Measurement;
Classic.pm:38:use PBDB::MeasurementEntry;  # slated for removal
Classic.pm:577:sub displayDownloadMeasurementsForm	{
Classic.pm:589:sub displayDownloadMeasurementsResults	{
Classic.pm:597:	PBDB::Measurement::displayDownloadMeasurementsResults($q,$s,$dbt,$hbo);
Classic.pm:2912:    PBDB::MeasurementEntry::submitSpecimenSearch($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2921:    PBDB::MeasurementEntry::displaySpecimenList($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2925:sub populateMeasurementForm{
Classic.pm:2930:    PBDB::MeasurementEntry::populateMeasurementForm($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2934:sub processMeasurementForm {
Classic.pm:2939:    PBDB::MeasurementEntry::processMeasurementForm($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2947:    my $err_msg = PBDB::MeasurementEntry::deleteSpecimen($dbt, $hbo, $q, $s);
Classic.pm:2953:    PBDB::MeasurementEntry::displaySpecimenList($dbt,$hbo,$q,$s,$WRITE_URL);
FossilRecord.pm:11:use PBDB::Measurement;
Main.pm:36:use PBDB::Measurement;
Main.pm:37:use PBDB::MeasurementEntry;  # slated for removal
Measurement.pm:1:# the following functions were moved into MeasurementEntry.pm by JA 4.6.13:
Measurement.pm:2:# submitSpecimenSearch, displaySpecimenList, populateMeasurementForm,
Measurement.pm:3:#  processMeasurementForm, syncWithAuthorities
Measurement.pm:5:package PBDB::Measurement;
Measurement.pm:30:sub getMeasurements	{
Measurement.pm:189:# Pass in a joined specimen/measurement table, as returned by the getMeasurements function above.
Measurement.pm:195:# @results = getMeasurements($dbt,{'collection_no'=>1234});
Measurement.pm:196:# $p_table = getMeasurementTable(\@results);
Measurement.pm:200:sub getMeasurementTable {
Measurement.pm:367:# stolen from TaxonInfo::displayMeasurements, but greatly simplified with double join on
Measurement.pm:453:sub displayDownloadMeasurementsResults  {
Measurement.pm:460:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:510:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:523:			main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:546:	#  (2) get measurements of these species (getMeasurements)
Measurement.pm:550:	#  (6) take averages (getMeasurementTable)
Measurement.pm:576:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:601:			main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:631:	# step 2: get measurements of the included species (getMeasurements)
Measurement.pm:668:	my @measurements = getMeasurements($dbt,\%options);
Measurement.pm:672:		main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:744:	#  join in getMeasurements
Measurement.pm:772:			main::displayDownloadMeasurementsForm($errorMessage);
Measurement.pm:1040:	# step 6: take averages (getMeasurementTable)
Measurement.pm:1050:			my $p_table = getMeasurementTable(\@{$by_valid{$vn}});
Measurement.pm:1071:	# much of this section is lifted from TaxonInfo::displayMeasurements
Measurement.pm:1352:		main::displayDownloadMeasurementsForm($errorMessage);
MeasurementEntry.pm:1:# includes entry functions extracted from Measurement.pm JA 4.6.13
MeasurementEntry.pm:3:package PBDB::MeasurementEntry;
MeasurementEntry.pm:122:        <tr><th><span style="margin-right: 1em">Occurrence</span></th><th>$collection_header</th><th>Measurements</th></tr>
MeasurementEntry.pm:223:        @results = getMeasurements($dbt,$q->param('occurrence_no'));
MeasurementEntry.pm:271:    print "<input type=hidden name=\"action\" value=\"populateMeasurementForm\">\n";
MeasurementEntry.pm:300:function deleteMeasurement ( specimen_id, specimen_no )
MeasurementEntry.pm:360:            print qq|<tr><td align="center"><a href="$WRITE_URL?action=populateMeasurementForm&occurrence_no=| . $q->param('occurrence_no') . qq|&specimen_no=-1"><span class="measurementBullet">&#149;</span></td>|;
MeasurementEntry.pm:362:            print qq|<tr><td align="center"><a href="$WRITE_URL?action=populateMeasurementForm&taxon_no=| . $q->param('taxon_no') . qq|&specimen_no=-1"><span class="measurementBullet">&#149;</span></td>|;
MeasurementEntry.pm:504:	    print qq|<a onClick="deleteMeasurement('$id', $specimen_no)">delete</a>&nbsp;|;
MeasurementEntry.pm:505:	    print qq|<a href="$WRITE_URL?action=populateMeasurementForm&occurrence_no=$occurrence_no&specimen_no=$specimen_no">edit</a></td>|;
MeasurementEntry.pm:509:	    print qq|<a onClick="deleteMeasurement('$id', $specimen_no)">delete</a>&nbsp;|;
MeasurementEntry.pm:510:	    print qq|<a href="$WRITE_URL?action=populateMeasurementForm&taxon_no=$taxon_no&specimen_no=$specimen_no">edit</a></td>|;
MeasurementEntry.pm:530:if ( $called_from eq "processMeasurementForm" )	{
MeasurementEntry.pm:536:sub populateMeasurementForm {
MeasurementEntry.pm:717:        my %m_table = (); # Measurement table, only used right below
MeasurementEntry.pm:816:sub processMeasurementForm	{
MeasurementEntry.pm:1077:                my %m_table = (); # Measurement table, only used right below
MeasurementEntry.pm:1137:	displaySpecimenList($dbt,$hbo,$q,$s,'processMeasurementForm',$more_links);
MeasurementEntry.pm:1240:sub getMeasurements	{
Opinion.pm:1632:		my @specimens = Measurement::getMeasurements($dbt,{'taxon_list'=>\@in_list,'get_global_specimens'=>1});
Opinion.pm:1634:			my $p_table = Measurement::getMeasurementTable(\@specimens);
Opinion.pm:1635:			my @m = Measurement::getMassEstimates($dbt,$e,$p_table);
Reference.pm:674:		print $box->("Measurements",join('<br>',@taxa));
Taxon.pm:1092:        processSpecimenMeasurement($dbt,$s,$resultTaxonNumber,$resultReferenceNumber,\%fields);
Taxon.pm:1282:sub processSpecimenMeasurement {
TaxonInfo.pm:14:use PBDB::Measurement;
TaxonInfo.pm:467:            print displayMeasurements($dbt,$taxon_no,$taxon_name,$in_list);
TaxonInfo.pm:2567:sub displayMeasurements {
TaxonInfo.pm:2577:            @specimens = PBDB::Measurement::getMeasurements($dbt,{'taxon_list'=>$in_list,'get_global_specimens'=>1});
TaxonInfo.pm:2584:            @specimens = PBDB::Measurement::getMeasurements($dbt,{'taxon_list'=>\@small_in_list,'get_global_specimens'=>1});
TaxonInfo.pm:2587:        @specimens = PBDB::Measurement::getMeasurements($dbt,{'taxon_name'=>$taxon_name,'get_global_specimens'=>1});
TaxonInfo.pm:2600:    my $p_table_ref = PBDB::Measurement::getMeasurementTable(\@specimens);
TaxonInfo.pm:2606:<span class="displayPanelHeader" class="large">Measurements</span>
TaxonInfo.pm:2647:        my @m = PBDB::Measurement::getMassEstimates($dbt,$taxon_no,$p_table_ref);
TaxonInfo.pm:4147:		@specimens = PBDB::Measurement::getMeasurements($dbt,{'taxon_list'=>\@all_spellings,'get_global_specimens'=>1});
TaxonInfo.pm:4149:			my $p_table = PBDB::Measurement::getMeasurementTable(\@specimens);
TaxonInfo.pm:4152:			my @m = PBDB::Measurement::getMassEstimates($dbt,$ss,$p_table,'skip area');
------------ MeasurementEntry
Classic.pm:38:use PBDB::MeasurementEntry;  # slated for removal
Classic.pm:2912:    PBDB::MeasurementEntry::submitSpecimenSearch($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2921:    PBDB::MeasurementEntry::displaySpecimenList($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2930:    PBDB::MeasurementEntry::populateMeasurementForm($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2939:    PBDB::MeasurementEntry::processMeasurementForm($dbt,$hbo,$q,$s,$WRITE_URL);
Classic.pm:2947:    my $err_msg = PBDB::MeasurementEntry::deleteSpecimen($dbt, $hbo, $q, $s);
Classic.pm:2953:    PBDB::MeasurementEntry::displaySpecimenList($dbt,$hbo,$q,$s,$WRITE_URL);
Main.pm:37:use PBDB::MeasurementEntry;  # slated for removal
Measurement.pm:1:# the following functions were moved into MeasurementEntry.pm by JA 4.6.13:
MeasurementEntry.pm:3:package PBDB::MeasurementEntry;
------------ Neptune
Classic.pm:736:#             $html =~ s/<option>Neptune-PBDB PACMAN/<option selected>Neptune-PBDB PACMAN/;
Classic.pm:738:#             $html =~ s/<option>Neptune PACMAN/<option selected>Neptune PACMAN/;
Curve.pm:355:		$downloadForm = "displayDownloadNeptuneForm";
Curve.pm:397:			printError("Please enter a positive decimal number for the bin size to use if you are analyzing data from the Neptune database.");
Curve.pm:450:	# Neptune data ranges from -3 to 150 mA right now, use those at defaults
Curve.pm:488:                # the Neptune database uses non integer collection numbers.  So we map
Curve.pm:2072:			$downloadForm = "displayDownloadNeptuneForm";
Curve.pm:2561:					print "<p>Good's <i>u</i> was based on counts of one-occurrence taxa because Neptune data files do not include a reference field.</p>\n";
Neptune.pm:5:package PBDB::Neptune;
Neptune.pm:97:sub displayNeptuneDownloadResults {
Neptune.pm:103:    my $dbh_neptune = Neptune::connect();
Neptune.pm:107:        print "<div align=\"center\"><p class=\"pageTitle\">Neptune/Paleobiology Database download results</p></div>";
Neptune.pm:109:        print "<div align=\"center\"><p class=\"pageTitle\">Neptune download results</p></div>";
Neptune.pm:114:        push @form_notes, "The summary file only contains taxa and information pertaining to Neptune data.  Paleobiology Database data are not included in the summary";
Neptune.pm:115:        push @form_notes, "The Pacman algorithm only applies to Neptune data, not Paleobiology Database data";
Neptune.pm:173:    my $results = queryNeptuneDB($q,$dbh_neptune);
Neptune.pm:366:        print "<p>$neptune_taxa_count Neptune taxa were printed to the <a href=\"/public/downloads/$filename-neptune_pbdb_summary.$ext\">summary file</a></p>";
Neptune.pm:368:        print "<p>$neptune_pacman_count Neptune occurrences and $pbdb_count Paleobiology Database occurrences were printed to the <a href=\"/public/downloads/$filename-neptune_pbdb_pacman.$ext\">Pacman results file</a></p>";
Neptune.pm:369:        print "<p>$neptune_count Neptune occurrences and $pbdb_count Paleobiology Database occurrences were printed to the <a href=\"/public/downloads/$filename-neptune_pbdb.$ext\">results file</a></p>";
Neptune.pm:386:    print "<a href=\"$READ_URL?action=displayDownloadNeptuneForm\"><b>Do another download</b></a> - ";
Neptune.pm:396:sub queryNeptuneDB {
------------ Nexusfile
Classic.pm:44:use PBDB::NexusfileWeb;  # slated for removal
Classic.pm:3005:    PBDB::NexusfileWeb::displayUploadPage($dbt, $hbo, $q, $s);
Classic.pm:3014:    PBDB::NexusfileWeb::processUpload($dbt, $hbo, $q, $s);
Classic.pm:3023:    PBDB::NexusfileWeb::editFile($dbt, $hbo, $q, $s);
Classic.pm:3032:    PBDB::NexusfileWeb::processEdit($dbt, $hbo, $q, $s);
Classic.pm:3041:    PBDB::NexusfileWeb::viewFile($dbt, $hbo, $q, $s);
Classic.pm:3050:    PBDB::NexusfileWeb::displaySearchPage($dbt, $hbo, $q, $s);
Classic.pm:3059:    PBDB::NexusfileWeb::processSearch($dbt, $hbo, $q, $s);
Classic.pm:3068:    PBDB::NexusfileWeb::sendFile($dbt, $q, $s);
Main.pm:43:use PBDB::NexusfileWeb;  # slated for removal
Nexusfile.pm:2:# Nexusfile.pm
Nexusfile.pm:8:# this information, use NexusfileWrite.pm.
Nexusfile.pm:11:package PBDB::Nexusfile;
Nexusfile.pm:24:Nexusfile
Nexusfile.pm:38:The argument C<nexusfile_no> can be either an object of type Nexusfile, a
Nexusfile.pm:103:resulting Nexusfile objects.  Its value should be a list of one or more of the
Nexusfile.pm:316:	bless $f, 'Nexusfile';
Nexusfile.pm:330:    # corresponding Nexusfile objects.  Note that for the moment, we are using the
Nexusfile.pm:359:    # corresponding Nexusfile objects.
NexusfileWeb.pm:2:# NexusfileWeb.pm
NexusfileWeb.pm:9:package PBDB::NexusfileWeb;
NexusfileWeb.pm:12:use PBDB::Nexusfile;
NexusfileWeb.pm:13:use PBDB::NexusfileWrite;
NexusfileWeb.pm:138:    my ($nexusfile) = Nexusfile::getFileInfo($dbt, undef, { filename => $upload_file, 
NexusfileWeb.pm:150:    my $nexusfile_no = Nexusfile::addFile($dbt, $upload_file, $s->{authorizer_no}, $s->{enterer_no}, 
NexusfileWeb.pm:157:	$data_result = Nexusfile::setFileData($dbt, $nexusfile_no, $nexus_data);
NexusfileWeb.pm:158:	$taxa_result = Nexusfile::generateTaxa($dbt, $nexusfile_no, $nexus_data);
NexusfileWeb.pm:219:	($nexusfile) = Nexusfile::getFileInfo($dbt, $nexusfile_no, { fields => 'all' });
NexusfileWeb.pm:239:    my $content = Nexusfile::getFileData($dbt, $nexusfile_no);
NexusfileWeb.pm:384:	     Nexusfile::checkWritePermission($dbt, $nexusfile_no, $s->get('authorizer_no')) )
NexusfileWeb.pm:397:	Nexusfile::addReference($dbt, $nexusfile_no, $reference_no);
NexusfileWeb.pm:402:    my ($nexusfile) = Nexusfile::getFileInfo($dbt, $nexusfile_no, { fields => 'all' });
NexusfileWeb.pm:421:    my $content = Nexusfile::getFileData($dbt, $nexusfile_no);
NexusfileWeb.pm:593:	     Nexusfile::checkWritePermission($dbt, $nexusfile_no, $s->get('authorizer_no')) )
NexusfileWeb.pm:618:	Nexusfile::deleteReference($dbt, $nexusfile_no, $reference_no);
NexusfileWeb.pm:628:	Nexusfile::moveReference($dbt, $nexusfile_no, $reference_no);
NexusfileWeb.pm:637:	my $data = Nexusfile::getFileData($dbt, $nexusfile_no);
NexusfileWeb.pm:638:	Nexusfile::generateTaxa($dbt, $nexusfile_no, $data) if $data;
NexusfileWeb.pm:648:	Nexusfile::deleteFile($dbt, $nexusfile_no);
NexusfileWeb.pm:667:	Nexusfile::setFileInfo($dbt, $nexusfile_no, { notes => $notes, filename => $filename });
NexusfileWeb.pm:815:    my (@file_list) = Nexusfile::getFileInfo($dbt, undef, $options);
NexusfileWeb.pm:970:# Given a Nexusfile object, generate the URL by which it can be fetched.
NexusfileWeb.pm:1010:    print encode_utf8(Nexusfile::getFileData($dbt, $nf->{nexusfile_no}));
NexusfileWeb.pm:1018:# and session information.  If we can find one, return a Nexusfile object.
NexusfileWeb.pm:1033:	($nf) = Nexusfile::getFileInfo($dbt, $nexusfile_no);
NexusfileWeb.pm:1071:	($nf) = Nexusfile::getFileInfo($dbt, undef, { authorizer_no => $authorizer_no,
NexusfileWeb.pm:1078:	    ($nf) = Nexusfile::getFileInfo($dbt, undef, { authorizer_no => $authorizer_no,
NexusfileWrite.pm:2:# NexusfileWrite.pm
NexusfileWrite.pm:10:package PBDB::Nexusfile;
Reference.pm:17:use PBDB::Nexusfile;
Reference.pm:678:    my @nexus_files = Nexusfile::getFileInfo($dbt, undef, { reference_no => $reference_no });
ReferenceEntry.pm:9:use PBDB::Nexusfile;
------------ NexusfileWeb
Classic.pm:44:use PBDB::NexusfileWeb;  # slated for removal
Classic.pm:3005:    PBDB::NexusfileWeb::displayUploadPage($dbt, $hbo, $q, $s);
Classic.pm:3014:    PBDB::NexusfileWeb::processUpload($dbt, $hbo, $q, $s);
Classic.pm:3023:    PBDB::NexusfileWeb::editFile($dbt, $hbo, $q, $s);
Classic.pm:3032:    PBDB::NexusfileWeb::processEdit($dbt, $hbo, $q, $s);
Classic.pm:3041:    PBDB::NexusfileWeb::viewFile($dbt, $hbo, $q, $s);
Classic.pm:3050:    PBDB::NexusfileWeb::displaySearchPage($dbt, $hbo, $q, $s);
Classic.pm:3059:    PBDB::NexusfileWeb::processSearch($dbt, $hbo, $q, $s);
Classic.pm:3068:    PBDB::NexusfileWeb::sendFile($dbt, $q, $s);
Main.pm:43:use PBDB::NexusfileWeb;  # slated for removal
NexusfileWeb.pm:2:# NexusfileWeb.pm
NexusfileWeb.pm:9:package PBDB::NexusfileWeb;
------------ NexusfileWrite
Nexusfile.pm:8:# this information, use NexusfileWrite.pm.
NexusfileWeb.pm:13:use PBDB::NexusfileWrite;
NexusfileWrite.pm:2:# NexusfileWrite.pm
------------ Opinion
Classic.pm:48:use PBDB::Opinion;  # slated for removal
Classic.pm:1893:sub submitOpinionSearch {
Classic.pm:1903:        PBDB::Opinion::displayOpinionChoiceForm($dbt,$s,$q);
Classic.pm:1989:        : ($goal eq 'opinion')    ? 'displayOpinionChoiceForm'
Classic.pm:2159:        PBDB::Opinion::displayOpinionChoiceForm($dbt,$s,$q);
Classic.pm:2240:# startTaxonomy separated out into startAuthority and startOpinion 
Classic.pm:2366:## Opinion stuff
Classic.pm:2370:sub displayOpinionSearchForm {
Classic.pm:2383:    $vars{'action'} = "submitOpinionSearch";
Classic.pm:2391:# Changed from displayOpinionList to just be a stub for function in Opinion module
Classic.pm:2393:sub displayOpinionChoiceForm {
Classic.pm:2401:    PBDB::Opinion::displayOpinionChoiceForm($dbt,$s,$q);
Classic.pm:2405:sub reviewOpinionsForm	{
Classic.pm:2413:	PBDB::Opinion::reviewOpinionsForm($dbt,$hbo,$s,$q);
Classic.pm:2416:sub reviewOpinions	{
Classic.pm:2424:	PBDB::Opinion::reviewOpinions($dbt,$hbo,$s,$q);
Classic.pm:2431:sub displayOpinionForm {
Classic.pm:2450:	PBDB::Opinion::displayOpinionForm($dbt, $hbo, $s, $q);
Classic.pm:2454:sub submitOpinionForm {
Classic.pm:2459:	PBDB::Opinion::submitOpinionForm($dbt,$hbo, $s, $q);
Classic.pm:2510:	PBDB::Opinion::badNames($dbt,$hbo,$s,$q);
Classic.pm:2514:## END Opinion stuff
Classic.pm:5257:sub displayTaxonomicNamesAndOpinions {
Classic.pm:5269:            PBDB::Opinion::displayOpinionChoiceForm($dbt,$s,$q);
Classification.pm:21:#   * 4th arg: Restrict the search to a certain reference_no.  This is used by the type_taxon part of the Opinions scripts, so
DownloadTaxonomy.pm:10:use PBDB::Opinion;
DownloadTaxonomy.pm:28:	#  getTaxonomicNames or getTaxonomicOpinions because the allowed query
DownloadTaxonomy.pm:545:    my ($opinions,$opinion_file_message) = getTaxonomicOpinions($dbt,$http_dir,\%people,\%options); 
DownloadTaxonomy.pm:731:    my ($opinions,$opinion_file_message) = getTaxonomicOpinions($dbt,$http_dir,\%people,\%options);
DownloadTaxonomy.pm:1109:sub getTaxonomicOpinions {
DownloadTaxonomy.pm:1218:        dbg("getTaxonomicOpinions called: ($sql)");
FossilRecord.pm:290:                print "<a href=\"$WRITE_URL?action=displayOpinionChoiceForm&amp;taxon_no=$entered_no\"><b>Edit taxonomic opinions about $entered_name</b></a> - ";
FossilRecord.pm:870:            $row->{'spelling_reason'} = Opinion::guessSpellingReason($child,$spelling) || 'original spelling';
FossilRecord.pm:889:                my $o = Opinion->new($dbt,$id);
FossilRecord.pm:893:                print qq|<li><a href="$WRITE_URL?action=displayOpinionForm&amp;child_no=$child_no&amp;child_spelling_no=$child_spelling_no&amp;opinion_no=$id">$opinion</a></li>|;
FossilRecord.pm:1051:            push @row_errors, {'type'=>'error','message'=>"This opinion is already in the database (<a target=\"_NEW\" href=\"$WRITE_URL?action=displayOpinionForm&opinion_no=$o[0]->{opinion_no}\">view opinion</a>)"};
Main.pm:47:use PBDB::Opinion;  # slated for removal
Opinion.pm:1:package PBDB::Opinion;
Opinion.pm:19:	my Opinion $self = fields::new($class);
Opinion.pm:43:    my Opinion $self = shift;
Opinion.pm:54:    my Opinion $self = shift;
Opinion.pm:107:sub getOpinion {
Opinion.pm:121:	my Opinion $self = shift;
Opinion.pm:154:	my Opinion $self = shift;
Opinion.pm:274:sub displayOpinionForm {
Opinion.pm:289:		croak("Opinion::displayOpinionForm had invalid arguments passed to it.");
Opinion.pm:305:        $o = Opinion->new($dbt,$q->param('opinion_no'));
Opinion.pm:307:            carp "Could not create opinion object in displayOpinionForm for opinion_no ".$q->param('opinion_no');
Opinion.pm:498:            my ($ref1,$ref2,$error) = getOpinionsToMigrate($dbt,$fields{'child_no'},$parent_nos[0],$fields{'opinion_no'});
Opinion.pm:647:        my ($ref1,$ref2,$error) = getOpinionsToMigrate($dbt,$fields{'child_no'},$child_spelling_nos[0],$fields{'opinion_no'});
Opinion.pm:697:    dbg("showOpinionForm, fields are: <pre>".Dumper(\%fields)."</pre>");
Opinion.pm:718:sub submitOpinionForm {
Opinion.pm:726:		croak("Opinion::submitOpinionForm had invalid arguments passed to it");
Opinion.pm:748:        $o = Opinion->new($dbt,$q->param('opinion_no'));
Opinion.pm:750:            carp "Could not create opinion object in displayOpinionForm for opinion_no ".$q->param('opinion_no');
Opinion.pm:1078:            my ($ref1,$ref2,$error) = getOpinionsToMigrate($dbt,$fields{'parent_no'},$fields{'child_no'},$fields{'opinion_no'});
Opinion.pm:1088:        my ($ref1,$ref2,$error) = getOpinionsToMigrate($dbt,$fields{'child_no'},$fields{'child_spelling_no'},$fields{'opinion_no'});
Opinion.pm:1100:            $msg .= "<b>$childSpellingName</b> already exists with <a href=\"$WRITE_URL?action=displayOpinionChoiceForm&taxon_no=$fields{child_spelling_no}\" target=\"_BLANK\"> opinions classifying it</a>."; 
Opinion.pm:1103:            $msg .= "<b>$childSpellingName</b> already exists with <a href=\"$WRITE_URL?action=displayOpinionChoiceForm&taxon_no=$fields{child_spelling_no}\" target=\"_BLANK\"> opinions classifying it</a>."; 
Opinion.pm:1328:		Opinion::displayOpinionForm($dbt, $hbo, $s, $q, $message);
Opinion.pm:1357:	my $resultOpinionNumber;
Opinion.pm:1360:    dbg("submitOpinionForm, fields are: <pre>".Dumper(\%fields)."</pre>");
Opinion.pm:1366:			croak("Opinion::submitOpinionForm, tried to insert a record without knowing its child_no (original taxon)");
Opinion.pm:1370:		($code, $resultOpinionNumber) = $dbt->insertRecord($s,'opinions', \%fields);
Opinion.pm:1379:		$resultOpinionNumber = $o->get('opinion_no');
Opinion.pm:1380:		$dbt->updateRecord($s,'opinions', 'opinion_no',$resultOpinionNumber, \%fields);
Opinion.pm:1403:        $resultOpinionNumber = removeDuplicateOpinions($dbt,$s,$fields{'child_no'},$resultOpinionNumber);
Opinion.pm:1408:    $o = Opinion->new($dbt,$resultOpinionNumber); 
Opinion.pm:1423:        my %authorHasOpinion;
Opinion.pm:1428:                if ( ! $authorHasOpinion{$cr->{child_no}} )	{
Opinion.pm:1429:                    $authorHasOpinion{$cr->{child_no}} = "NO";
Opinion.pm:1434:                    $authorHasOpinion{$cr->{child_no}} = "YES";
Opinion.pm:1436:                    $authorHasOpinion{$cr->{child_no}} = "YES";
Opinion.pm:1440:        my @children = sort { $speciesName{$a} cmp $speciesName{$b} } keys %authorHasOpinion;
Opinion.pm:1441:        my $needOpinion;
Opinion.pm:1443:            if ( $authorHasOpinion{$ch} eq "NO" )	{
Opinion.pm:1444:                if ( ! $needOpinion )	{
Opinion.pm:1445:                    $needOpinion = $speciesName{$ch};
Opinion.pm:1447:                    if ( $needOpinion !~ / and / )	{
Opinion.pm:1448:                        $needOpinion .= " and " . $speciesName{$ch};
Opinion.pm:1450:                        $needOpinion =~ s/ and /, /;
Opinion.pm:1451:                        $needOpinion .= " and " . $speciesName{$ch};
Opinion.pm:1456:        $needOpinion =~ s/^, //;
Opinion.pm:1463:        if ( $needOpinion =~ / and / )	{
Opinion.pm:1464:            push @warnings , $authors . " opinions on " . $needOpinion . " still may need to be entered";
Opinion.pm:1465:        } elsif ( $needOpinion )	{
Opinion.pm:1466:            push @warnings , $authors . " opinion on " . $needOpinion . " still may need to be entered";
Opinion.pm:1501:    $message_vals{'result_opinion'} = $resultOpinionNumber;
Opinion.pm:1553:sub getOpinionsToMigrate {
Opinion.pm:1650:# Moved/Adapted from Taxon::displayOpinionChoiceForm PS 01/24/2004
Opinion.pm:1651:sub displayOpinionChoiceForm {
Opinion.pm:1673:            my $o = Opinion->new($dbt,$row->{'opinion_no'});
Opinion.pm:1680:                print qq|<li><a href="$WRITE_URL?action=displayOpinionForm&amp;child_no=$orig_no&amp;child_spelling_no=$child_no&amp;opinion_no=$row->{opinion_no}">$opinion</a>$authority</li>|;
Opinion.pm:1683:                $sepkoski = qq|<br>\n*Opinions from Sepkoski's Compendium cannot be edited.|;
Opinion.pm:1686:        print qq|<li><a href="$WRITE_URL?action=displayOpinionForm&amp;child_no=$orig_no&amp;child_spelling_no=$child_no&amp;opinion_no=-1">Create a <b>new</b> opinion record</a></li>|;
Opinion.pm:1743:                main::displayOpinionSearchForm();
Opinion.pm:1750:                print "<p class=\"pageTitle\">Opinions from ".Reference::formatShortRef($dbt,$q->param("reference_no"))."</p>\n";
Opinion.pm:1757:                my $o = Opinion->new($dbt,$row->{'opinion_no'});
Opinion.pm:1767:                    print "<li><a href=\"$WRITE_URL?action=displayOpinionForm&amp;opinion_no=$row->{opinion_no}\">$opinion</a>$authority</li>\n";
Opinion.pm:1782:                main::displayOpinionSearchForm();
Opinion.pm:1786:                main::displayOpinionSearchForm();
Opinion.pm:1808:sub removeDuplicateOpinions {
Opinion.pm:1809:    my ($dbt,$s,$child_no,$resultOpinionNumber,$debug_only) = @_;
Opinion.pm:1828:    my $newNo = $resultOpinionNumber;
Opinion.pm:1835:                $dbt->deleteRecord($s,'opinions','opinion_no',$row->{'opinion_no'},"Deleted by Opinion::removeDuplicateOpinion, duplicates $orig_row->{opinion_no}");
Opinion.pm:1836:                if ( $orig_row->{'opinion_no'} != $resultOpinionNumber )	{
Reference.pm:627:            $html .= qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no&display=authorities">|;
Reference.pm:647:                    my $o = Opinion->new($dbt,$_->{'opinion_no'}); 
Reference.pm:656:            $html .= qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no&display=opinions">|;
Reference.pm:844:		push @chunks , qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no">$authority_count taxonomic name$plural</a>|;
Reference.pm:847:	# Handle Opinions
Reference.pm:860:		push @chunks , qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no">$opinion_total taxonomic opinion$plural</a>|;
ReferenceEntry.pm:539:            <li>Add or edit all the new or second-hand <a href="#" onClick="popup = window.open('$WRITE_URL?a=displayOpinionSearchForm', 'blah', 'left=100,top=100,height=700,width=700,toolbar=yes,scrollbars=yes,resizable=yes');">taxonomic opinions</a> about classification or synonymy
TaxaCache.pm:408:# and Opinion.pm (when creating a new spelling on fly)
TaxaCache.pm:431:# its from Taxon.pm or Opinion.pm.  Its smart enough not to move stuff around if it doesn't have
Taxon.pm:943:			addImplicitChildOpinion($dbt,$s,$resultTaxonNumber,$parent_no,\%fields,$pubyr);
Taxon.pm:958:                Opinion::resetOriginalNo($dbt,$fields{'original_no'},$row);
Taxon.pm:1033:      <br><li><a href="$WRITE_URL?action=displayTaxonomicNamesAndOpinions&reference_no=$resultReferenceNumber">Edit a name from the same reference</a></li>
Taxon.pm:1039:      <p class="large" style="margin-left: 2em;">Opinion functions</p>
Taxon.pm:1041:          <li><a href="$WRITE_URL?action=displayOpinionSearchForm">Add/edit opinion about another taxon</a></li>
Taxon.pm:1059:                $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&opinion_no=$opinion_no">Edit this author's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1065:                  $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&author1init=|.$q->param('author1init').qq|&author1last=|.$q->param('author1last').qq|&author2init=|.$q->param('author2init').qq|&author2last=|.$q->param('author2last').qq|&otherauthors=|.$q->param('otherauthors').qq|&pubyr=|.$q->param('pubyr').qq|&reference_no=$resultReferenceNumber&opinion_no=-1">Add this author's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1074:            $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&opinion_no=$opinion_no">Edit this reference's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1077:            $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&opinion_no=-1">Add this reference's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1080:        $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&opinion_no=-1&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber">Add an opinion about $fields{taxon_name}</a></li>
Taxon.pm:1082:        $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionChoiceForm&taxon_no=$resultTaxonNumber">Edit an opinion about $fields{taxon_name}</a></li>
Taxon.pm:1085:          <li$style><a href="$WRITE_URL?action=displayTaxonomicNamesAndOpinions&reference_no=$resultReferenceNumber&amp;display=opinions">Edit an opinion from the same reference</a></li>
Taxon.pm:1086:          <li$style><a href="$WRITE_URL?action=displayOpinionSearchForm&use_reference=new">Add/edit opinion about another taxon from another reference</a></li>
Taxon.pm:1411:        addImplicitChildOpinion($dbt,$s,$taxon_no,$parent_no,$fields,0);
Taxon.pm:1451:            addImplicitChildOpinion($dbt,$s,$taxon_no,$parent_no,$fields,0);
Taxon.pm:1456:sub addImplicitChildOpinion {
Taxon.pm:2485:	Opinion::fixMassEstimates($dbt,$dbh,TaxonInfo::getOriginalCombination($dbt,$version1[0]));
Taxon.pm:2486:	Opinion::fixMassEstimates($dbt,$dbh,TaxonInfo::getOriginalCombination($dbt,$version2[0]));
TaxonInfo.pm:402:                print "<a href=\"$WRITE_URL?a=displayOpinionChoiceForm&amp;taxon_no=$entered_no\"><b>Edit taxonomic opinions about $entered_name</b></a> -<br> ";
TaxonInfo.pm:2182:# See _getMostRecentParentOpinion
TaxonInfo.pm:2426:# PS, used to be selectMostRecentParentOpinion, changed to this to simplify code 
TaxonInfo.pm:2427:# PS, changed from getMostRecentParentOpinion to _getMostRecentParentOpinion, to denote
TaxonInfo.pm:4405:			print "<p><a href=\"$WRITE_URL?a=displayOpinionChoiceForm&amp;taxon_no=$taxon_no\">Add/edit taxonomic opinions about ".italicize($auth)."</a></p>\n\n";
------------ PAST
Classic.pm:3125:## PAST stuff
Classic.pm:3126:sub PASTQueryForm {
Classic.pm:3130:    require PAST;
Classic.pm:3132:    PAST::queryForm($dbt,$q,$hbo,$s);
Classic.pm:3135:sub PASTQuerySubmit {
Classic.pm:3139:    require PAST;
Classic.pm:3141:    PAST::querySubmit($dbt,$q,$hbo,$s);
Classic.pm:3144:## End PAST stuff
Download.pm:315:    #print qq|<a href="?action=PASTQueryForm">Analyze with PAST functions</a></p></div>|;
PAST.pm:1:package PBDB::PAST;
PAST.pm:12:use PAST::Util;
PAST.pm:13:use PAST::DCA;
PAST.pm:17:my $PAST_HTML_DIR = "/public/past";
PAST.pm:18:my $PAST_FILE_DIR = $HTML_DIR.$PAST_HTML_DIR;
PAST.pm:26:<div align="center"><h2>PAST functions</h2></div>
PAST.pm:29:These functions were adapted by &Oslash;yvind Hammer from his free, easy-to-use <a href="http://folk.uio.no/ohammer/past/index.html">PAST</a> (PAlaeontological STatistics) data analysis package, which is written for the Windows operating system.
PAST.pm:55:<input type="hidden" name="action" value="PASTQuerySubmit">
PAST.pm:71:    my @download_data = PAST::Util::parseTextFile($filename);
PAST.pm:76:    my @matrix_data = PAST::Util::binaryPresenceMatrix(@download_data);
PAST.pm:84:    #TBD writeCSV($PAST_FILE_DIR."/".$outfile,\@matrix,\@row_header,\@col_header);
PAST.pm:85:    #TBD @data = PAST::DCA::dca(\@matrix,\@row_header,\@col_header);
PAST.pm:89:      PAST::DCA::dca(\@matrix,\@row_header,\@col_header,\%extra_data);
PAST.pm:93:      print "<table border=0 cellspacing=0 class=\"PASTtable\">\n<tr><td></td>\n";
PAST.pm:95:        print "<td class=\"PASTheader\">$col_header[$i]</td> ";
PAST.pm:99:        print "<tr><td class=\"PASTheader\">$row_header[$i]</td> ";
PAST.pm:101:          print "<td class=\"PASTcell\">$matrix[$i][$j]</td> ";
PAST.pm:107:      #print "<br><br><a href=\"$PAST_HTML_DIR/$outfile\">Download results</a>";
------------ PBDBUtil
Classic.pm:25:use PBDB::PBDBUtil;
Classic.pm:584:	print PBDB::PBDBUtil::printIntervalsJava($dbt,1);
Classic.pm:593:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:619:    return if PBDB::PBDBUtil::checkForBot();
Classic.pm:629:    return if PBDB::PBDBUtil::checkForBot();
Classic.pm:700:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:825:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:1030:	print PBDB::PBDBUtil::printIntervalsJava($dbt,1);
Classic.pm:1060:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:1667:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:1859:    return if PBDB::PBDBUtil::checkForBot();
Classic.pm:1871:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:1882:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:2757:#     return if PBDB::PBDBUtil::checkForBot();
Classic.pm:2776:#     return if PBDB::PBDBUtil::checkForBot();
Classic.pm:3081:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:3092:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:3113:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:3990:    PBDB::PBDBUtil::autoCreateDir("$HTML_DIR/public/collection_labels");
Classic.pm:4705:    print PBDB::PBDBUtil::printIntervalsJava($dbt,1);
Classic.pm:4979:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:4988:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:4997:	return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5074:#     return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5097:#     return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5106:#     return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5117:    return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5128:    return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5139:    return if PBDB::PBDBUtil::checkForBot();
Classic.pm:5151:    return if PBDB::PBDBUtil::checkForBot();
Classification.pm:275:# deprecated, see taxonomic_search. moved here from PBDBUtil.pm
Classification.pm:380:# Moved here from PBDBUtil
Collection.pm:16:use PBDB::PBDBUtil;
Collection.pm:549:        my $research_group_sql = PBDBUtil::getResearchGroupSQL($dbt,$options{'research_group'});
Collection.pm:800:        my %lookup = %{PBDBUtil::getPersonLookup($dbt)};
Collection.pm:1227:		} elsif (PBDBUtil::checkForBot())	{
Collection.pm:2063:    PBDBUtil::autoCreateDir("$HTML_DIR/public/rarefaction");
CollectionEntry.pm:8:use PBDB::PBDBUtil;
CollectionEntry.pm:225:	print PBDBUtil::printIntervalsJava($dbt);
CollectionEntry.pm:612:	if ( PBDBUtil::checkForBot() )	{
CollectionEntry.pm:628:	my %name = %{PBDBUtil::getPersonLookup($dbt)};
CollectionEntry.pm:820:    my %lookup = %{PBDBUtil::getPersonLookup($dbt)};
CollectionEntry.pm:1201:				$mostRecentReID = PBDBUtil::getMostRecentReIDforOcc($dbt,$rowref->{$OCCURRENCE_NO},1);
Confidence.pm:11:use PBDB::PBDBUtil;
Confidence.pm:80:    print PBDBUtil::printIntervalsJava($dbt,1);
Confidence.pm:2429:    PBDBUtil::autoCreateDir($IMAGE_DIR);
Curve.pm:7:use PBDB::PBDBUtil;
Curve.pm:39:	PBDBUtil::autoCreateDir($OUTPUT_DIR);
Curve.pm:73:	PBDBUtil::autoCreateDir($OUTPUT_DIR);
Curve.pm:214:    my $filename = PBDBUtil::getFilename($name); 
Download.pm:3:use PBDB::PBDBUtil;
Download.pm:56:    my $filename = PBDBUtil::getFilename($name);
Download.pm:147:    PBDBUtil::autoCreateDir($HTML_DIR."/public/downloads");
Download.pm:1696:    my $resGrpString = PBDBUtil::getResearchGroupSQL($dbt,$q->param('research_group'),$resGrpRestrictedTo);
DownloadTaxonomy.pm:4:use PBDB::PBDBUtil;
DownloadTaxonomy.pm:1273:    my $filename = PBDBUtil::getFilename($name,1); 
DownloadTaxonomy.pm:1277:    PBDBUtil::autoCreateDir($filesystem_dir);
Errors.pm:9:use PBDB::PBDBUtil;
Errors.pm:60:	my $count = PBDBUtil::numberToName($self->{count});
FossilRecord.pm:13:use PBDB::PBDBUtil;
FossilRecord.pm:170:    if (PBDBUtil::checkForBot()) {
Images.pm:3:use PBDB::PBDBUtil;
Images.pm:258:	if ( ! PBDBUtil::checkForBot() && (  $q->request_method() eq 'POST' || $q->param('is_real_user') || $s->isDBMember() ) )	{
Main.pm:24:use PBDB::PBDBUtil;
Map.pm:1072:    PBDBUtil::autoCreateDir($GIF_DIR);
Measurement.pm:459:		print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:509:		print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:522:			print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:575:		print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:600:			print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:671:		print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:771:			print PBDBUtil::printIntervalsJava($dbt,1);
Measurement.pm:1135:	my $outfile = PBDBUtil::getFilename($person)."_raw_measurements.txt";
Measurement.pm:1136:	my $outfile2 = PBDBUtil::getFilename($person)."_average_measurements.txt";
Measurement.pm:1137:	my $outfile3 = PBDBUtil::getFilename($person)."_measurement_table.txt";
Measurement.pm:1351:		print PBDBUtil::printIntervalsJava($dbt,1);
MeasurementEntry.pm:231:        my $reid_row = PBDBUtil::getMostRecentReIDforOcc($dbt,$row->{'occurrence_no'},1);
MeasurementEntry.pm:553:        my $reid_row = PBDBUtil::getMostRecentReIDforOcc($dbt,$row->{'occurrence_no'},1);
MeasurementEntry.pm:841:        my $reid_row = PBDBUtil::getMostRecentReIDforOcc($dbt,$row->{'occurrence_no'},1);
Neptune.pm:70:    my $filename = PBDBUtil::getFilename($name); 
Neptune.pm:72:    PBDBUtil::autoCreateDir($OUT_FILE_DIR);
Neptune.pm:355:        $yourname = "&yourname=".PBDBUtil::getFilename($q->param('yourname')); 
PAST.pm:5:use PBDB::PBDBUtil;
PAST.pm:118:    my $base_filename = PBDBUtil::getFilename($name);
PBDBUtil.pm:1:package PBDB::PBDBUtil;
Reclassify.pm:36:        print PBDBUtil::printIntervalsJava($dbt,1);
Reference.pm:136:        my %lookup = %{PBDBUtil::getPersonLookup($dbt)};
Reference.pm:1160:    PBDBUtil::autoCreateDir("$HTML_DIR/public/references");
Report.pm:9:use PBDB::PBDBUtil;
Report.pm:193:    PBDBUtil::autoCreateDir("$HTML_DIR/public/reports");
Report.pm:649:    my $research_group_sql = PBDBUtil::getResearchGroupSQL($dbt,$q->param('research_group'));
Report.pm:701:        # Changed PBDBUtil funct to optionally use taxon_nos and used those
Report.pm:1045:	my $filename = PBDBUtil::getFilename($username);
Report.pm:1049:	PBDBUtil::autoCreateDir("$HTML_DIR/public/taxa");
Scales.pm:1019:	print PBDBUtil::printIntervalsJava($dbt,1);
Scales.pm:1035:        $eml = PBDBUtil::stripTags($eml);
Scales.pm:1036:        $name = PBDBUtil::stripTags($name);
Scales.pm:1040:        print PBDBUtil::printIntervalsJava($dbt,1);
Strata.pm:9:use PBDB::PBDBUtil;
Strata.pm:457:    print PBDBUtil::printIntervalsJava($dbt,1);
TaxonInfo.pm:16:use PBDB::PBDBUtil;
TaxonInfo.pm:184:    if (PBDB::PBDBUtil::checkForBot()) {
TaxonInfo.pm:1437:#                    PBDB::PBDBUtil::debug(1,"rank mismatch $focal_taxon_rank -- $record->{taxon_rank} for sister $record->{taxon_name}");
TaxonInfo.pm:3448:	my $filename = PBDB::PBDBUtil::getFilename($name) . "-appearances.txt";;
TaxonInfo.pm:3651:	if (PBDB::PBDBUtil::checkForBot()) {
TaxonInfo.pm:4439:	return if PBDB::PBDBUtil::checkForBot();
TypoChecker.pm:7:use PBDB::PBDBUtil;
TypoChecker.pm:32:    print PBDBUtil::printIntervalsJava($dbt,1);
------------ Permissions
Classic.pm:26:use PBDB::Permissions;
Classic.pm:1242:            $p = Permissions->new($s,$dbt);
Classic.pm:1765:	my $p = Permissions->new ($s,$dbt);
Classic.pm:2524:    Permissions::displayPermissionListForm($dbt,$q,$s,$hbo);
Classic.pm:2533:    Permissions::submitPermissionList($dbt,$q,$s,$hbo);
Classic.pm:2542:    Permissions::submitHeir($dbt,$q,$s,$hbo);
Classic.pm:3192:	my $p = Permissions->new($s,$dbt);
Classic.pm:3415:    my $p = new Permissions($s,$dbt);
Classic.pm:3776:    my $p = new Permissions($s,$dbt);
Collection.pm:23:use PBDB::Permissions;
Collection.pm:784:    my $p = PBDB::Permissions->new($s,$dbt); 
Collection.pm:1239:	my $p = PBDB::Permissions->new($s,$dbt);
Collection.pm:1771:		my $p = PBDB::Permissions->new($s,$dbt);
CollectionEntry.pm:16:use PBDB::Permissions;
CollectionEntry.pm:147:        my $p = Permissions->new($s,$dbt);
CollectionEntry.pm:450:            my $p = Permissions->new($s,$dbt);
CollectionEntry.pm:660:        my $p = Permissions->new($s,$dbt);
DBTransactionManager.pm:9:use PBDB::Permissions;
DBTransactionManager.pm:292:    my $p = Permissions->new($s,$self);
DBTransactionManager.pm:474:    my $p = Permissions->new($s,$self);
Download.pm:58:    my $p = Permissions->new($s,$dbt);
Download.pm:1940:    my $p = $self->{'p'}; #Permissions object
Main.pm:25:use PBDB::Permissions;
Permissions.pm:8:package PBDB::Permissions;
Permissions.pm:24:	my PBDB::Permissions $self = fields::new($class);
Permissions.pm:33:		carp ("Permissions must be created with valid Session object");
Permissions.pm:37:		carp ("Permissions must be created with valid DBTransactionManager object");
Reclassify.pm:130:#    my $p = Permissions->new($s,$dbt);
Reference.pm:728:            my $p = Permissions->new($s,$dbt);
Reference.pm:889:	my $p = Permissions->new($s,$dbt);
Report.pm:655:    # Permissions conditionals, since we can't use Permissions Module
TypoChecker.pm:184:    my $p = Permissions->new($s,$dbt);
TypoChecker.pm:411:        my $p = Permissions->new($s,$dbt);
------------ Person
Classic.pm:24:use PBDB::Person;
Classic.pm:366:	$row->{'enterer_names'} = PBDB::Person::homePageEntererList($dbt);
Classic.pm:480:	print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:521:	print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:610:    print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:690:	require Person;
Classic.pm:691:	print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:1028:	print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:1948:            my $sql = "SELECT person_no FROM person WHERE name LIKE ".$dbh->quote(PBDB::Person::reverseName($q->param('authorizer_reversed')));
Classic.pm:2258:    print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:2380:    print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:4706:    print PBDB::Person::makeAuthEntJavascript($dbt);
Classic.pm:4972:# Person pages
Classic.pm:4981:	PBDB::Person::personForm($dbt,$hbo,$s,$q);
Classic.pm:4984:sub addPerson	{
Classic.pm:4990:	PBDB::Person::addPerson($dbt,$hbo,$s,$q);
Classic.pm:4993:sub editPerson	{
Classic.pm:4999:	PBDB::Person::editPerson($dbt,$hbo,$s,$q);
Classic.pm:5008:    print PBDB::Person::showEnterers($dbt,$IS_FOSSIL_RECORD);
Classic.pm:5018:    print PBDB::Person::showAuthorizers($dbt,$IS_FOSSIL_RECORD);
Classic.pm:5028:    print PBDB::Person::showFeaturedAuthorizers($dbt,$IS_FOSSIL_RECORD);
Classic.pm:5038:    print PBDB::Person::showInstitutions($dbt,$IS_FOSSIL_RECORD);
Classic.pm:5048:    PBDB::Person::publications($dbt,$q,$s,$hbo);
Classic.pm:5057:    PBDB::Person::publicationForm($q,$dbt,$hbo);
Classic.pm:5065:    PBDB::Person::editPublication($q,$dbt);
Collection.pm:22:use PBDB::Person;
Collection.pm:393:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($options{'person_reversed'}));
Collection.pm:410:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($options{'authorizer_reversed'}));
Collection.pm:416:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($options{'enterer_reversed'}));
Collection.pm:423:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($options{'modifier_reversed'}));
Collection.pm:800:        my %lookup = %{PBDBUtil::getPersonLookup($dbt)};
CollectionEntry.pm:15:use PBDB::Person;
CollectionEntry.pm:151:            my $authorizer = PBDB::Person::getPersonName($dbt,$row{'authorizer_no'});
CollectionEntry.pm:628:	my %name = %{PBDBUtil::getPersonLookup($dbt)};
CollectionEntry.pm:820:    my %lookup = %{PBDBUtil::getPersonLookup($dbt)};
Confidence.pm:8:use PBDB::Person;
Confidence.pm:81:    print Person::makeAuthEntJavascript($dbt);
DownloadTaxonomy.pm:9:use PBDB::Person;
DownloadTaxonomy.pm:342:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($q->param('person_reversed')));
DownloadTaxonomy.pm:351:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($q->param('person_reversed')));
DownloadTaxonomy.pm:677:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($q->param('person_reversed')));
DownloadTaxonomy.pm:686:        my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($q->param('person_reversed')));
HTMLBuilder.pm:8:use PBDB::Person;
Main.pm:23:use PBDB::Person;
Opinion.pm:539:            $fields{'authorizer_name'} = "<span class=\"fieldName\">Authorizer:</span> " . Person::getPersonName($dbt,$o->get('authorizer_no')); 
Opinion.pm:542:            $fields{'enterer_name'} = " <span class=\"fieldName\">Enterer:</span> " . Person::getPersonName($dbt,$o->get('enterer_no')); 
Opinion.pm:545:            $fields{'modifier_name'} = " <span class=\"fieldName\">Modifier:</span> ".Person::getPersonName($dbt,$o->get('modifier_no'));
Opinion.pm:1696:            my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($q->param('authorizer_reversed')));
Opinion.pm:1705:            my $sql = "SELECT person_no FROM person WHERE name like ".$dbh->quote(Person::reverseName($q->param('enterer_reversed')));
PBDBUtil.pm:325:sub getPersonLookup	{
Permissions.pm:11:use PBDB::Person;
Permissions.pm:362:    my @authorizers = @{Person::listOfAuthorizers($dbt,1)};
Permissions.pm:363:    my $authList = join(",", map {'"'.Person::reverseName($_->{'name'}).'"'} @authorizers);
Permissions.pm:378:        $heir_reversed = Person::reverseName($results[0]->{'heir'});
Permissions.pm:530:                $q->param("authorizer_reversed" => Person::reverseName($q->param("authorizer_reversed")));
Permissions.pm:532:            my $sql = "SELECT person_no FROM person WHERE name LIKE ".$dbh->quote(Person::reverseName($q->param('authorizer_reversed')));
Permissions.pm:585:        $q->param("heir_reversed" => Person::reverseName($q->param("heir_reversed")));
Permissions.pm:589:        my $sql = "SELECT person_no FROM person WHERE name LIKE ".$dbh->quote(Person::reverseName($q->param('heir_reversed')));
Person.pm:2:package PBDB::Person;
Person.pm:67:			push @values , "editPerson";
Person.pm:73:			$q->param('action' => 'addPerson');
Person.pm:100:sub addPerson	{
Person.pm:102:	my ($fields,$values) = checkPersonData($dbt,$hbo,$s,$q);
Person.pm:112:sub editPerson	{
Person.pm:114:	my ($fields,$values) = checkPersonData($dbt,$hbo,$s,$q);
Person.pm:124:sub checkPersonData	{
Person.pm:271:sub getPersonName {
Person.pm:664:# end of Person.pm
Reclassify.pm:37:        print Person::makeAuthEntJavascript($dbt);
Reclassify.pm:140:        my $authorizer = ($editable) ? '' : '(Authorizer: '.Person::getPersonName($dbt,$o->{'authorizer_no'}).')';
Reference.pm:15:use PBDB::Person;
Reference.pm:136:        my %lookup = %{PBDBUtil::getPersonLookup($dbt)};
Reference.pm:824:	print Person::makeAuthEntJavascript($dbt);
Reference.pm:1018:            push @where, "p1.name LIKE ".$dbh->quote(Person::reverseName($options{'authorizer_reversed'}));
Reference.pm:1022:            push @where, "p2.name LIKE ".$dbh->quote(Person::reverseName($options{'enterer_reversed'}));
Session.pm:88:	if (! Person::checkName($dbt,$enterer) || ! Person::checkName($dbt,$authorizer)) {
Strata.pm:8:use PBDB::Person;
Strata.pm:458:    print Person::makeAuthEntJavascript($dbt);
Taxon.pm:271:            $fields{'authorizer_name'} = " <span class=\"fieldName\">Authorizer:</span> " . Person::getPersonName($dbt,$fields{'authorizer_no'}); 
Taxon.pm:274:            $fields{'enterer_name'} = " <span class=\"fieldName\">Enterer:</span> " . Person::getPersonName($dbt,$fields{'enterer_no'}); 
Taxon.pm:277:            $fields{'modifier_name'} = " <span class=\"fieldName\">Modifier:</span> ".Person::getPersonName($dbt,$fields{'modifier_no'}); 
Taxon.pm:1812:                    push @warnings,"Can't unset this as the type taxon for authority $parent->{taxon_name}, its owned by a difference authorizer: ".Person::getPersonName($dbt,$parent->{'authorizer_no'});
Taxon.pm:1863:            push @warnings,"Can't change the type taxon for authority $parent->{taxon_name}, its owned by a difference authorizer: ".Person::getPersonName($dbt,$parent->{'authorizer_no'});
TypoChecker.pm:6:use PBDB::Person;
TypoChecker.pm:31:    print Person::makeAuthEntJavascript($dbt);
------------ PrintHierarchy
Classic.pm:3076:## PrintHierarchy stuff
Classic.pm:3082:	require PrintHierarchy;
Classic.pm:3085:	PrintHierarchy::classificationForm($hbo, $s);
Classic.pm:3093:	PrintHierarchy::classify($dbt, $hbo, $s, $q);
Classic.pm:3095:## END PrintHierarchy stuff
Classification.pm:386:#       sort_hierarchical: an array sorted in hierarchical fashion, suitable for PrintHierarchy.pm
PrintHierarchy.pm:2:package PBDB::PrintHierarchy;
TaxonInfo.pm:10:use PBDB::PrintHierarchy;
TaxonInfo.pm:595:        my $subtaxa = PBDB::PrintHierarchy::classify($dbt,$hbo,$s,$q);
------------ Reclassify
Classic.pm:27:use PBDB::Reclassify;
Classic.pm:1116:        : ($type eq "reclassify_occurrence") ?  "startDisplayOccurrenceReclassify"
Classic.pm:1190:				PBDB::Reclassify::displayOccurrenceReclassify($q,$s,$dbt,$hbo,\@colls);
Classic.pm:2586:## Reclassify stuff
Classic.pm:2588:sub startStartReclassifyOccurrences	{
Classic.pm:2592:	PBDB::Reclassify::startReclassifyOccurrences($q, $s, $dbt, $hbo);
Classic.pm:2595:sub startDisplayOccurrenceReclassify	{
Classic.pm:2599:	PBDB::Reclassify::displayOccurrenceReclassify($q, $s, $dbt, $hbo);
Classic.pm:2602:sub startProcessReclassifyForm	{
Classic.pm:2606:	PBDB::Reclassify::processReclassifyForm($q, $s, $dbt, $hbo);
Classic.pm:2609:## END Reclassify stuff
Classic.pm:3783:    print '<input type="hidden" name="action" value="startProcessReclassifyForm">';
Classic.pm:3954:                $row .= qq|Multiple versions of this name exist and must be <a target="_new" href="$WRITE_URL?a=startDisplayOccurrenceReclassify&collection_list=$collection_list&taxon_name=$simple_taxon_name">manually classified</a>. |;
Classic.pm:4359:	# see Reclassify.pm for a similar operation
Classic.pm:4632:            $links .= "<a href=\"$WRITE_URL?a=startStartReclassifyOccurrences&$COLLECTION_NO=$collection_no\"><nobr>Reclassify these IDs</nobr></a> - ";
CollectionEntry.pm:1273:                            $rowref->{'classification_select'} = Reclassify::classificationSelect($dbt, $rowref->{$OCCURRENCE_NO},0,1,\@all_matches,$rowref->{'taxon_no'},$taxon_name);
CollectionEntry.pm:1370:            $return .= "<input type=\"hidden\" name=\"action\" value=\"startProcessReclassifyForm\">\n"; 
CollectionEntry.pm:1739:	my ($dbt,$hbo,$s,$occNum,$isReidNo,$doReclassify) = @_;
CollectionEntry.pm:1801:                if ($doReclassify) {
CollectionEntry.pm:1809:                        $row->{'classification_select'} = Reclassify::classificationSelect($dbt, $row->{$OCCURRENCE_NO},0,1,\@all_matches,$row->{'taxon_no'},$taxon_name);
Main.pm:26:use PBDB::Reclassify;
Reclassify.pm:1:package PBDB::Reclassify;
Reclassify.pm:13:sub startReclassifyOccurrences	{
Reclassify.pm:24:		displayOccurrenceReclassify($q,$s,$dbt,$hbo);
Reclassify.pm:45:sub displayOccurrenceReclassify	{
Reclassify.pm:88:        dbg("Reclassify sql:".$sql);
Reclassify.pm:106:        dbg("Reclassify sql:".$sql);
Reclassify.pm:114:		print "<input id=\"action\" type=\"hidden\" name=\"action\" value=\"startProcessReclassifyForm\">\n";
Reclassify.pm:245:		print "<p><input type=submit value='Reclassify'></p>\n";
Reclassify.pm:300:sub processReclassifyForm	{
Reclassify.pm:423:            print "<a href=\"$WRITE_URL?action=startStartReclassifyOccurrences&occurrences_authorizer_no=".$q->param('occurrences_authorizer_no')."&collection_no=";
Reclassify.pm:425:            print "\">Reclassify this collection</a> - ";
Reclassify.pm:429:            print "\">Reclassify ".$q->param('taxon_name')."</a> - ";
Reclassify.pm:431:    	print "<a href=\"$WRITE_URL?action=startStartReclassifyOccurrences\">Reclassify another collection or taxon</a></p>\n\n";
Taxon.pm:1633:Or log in, go to the main menu, click "Reclassify occurrences" and enter $taxon_name into the taxon name field.
------------ Reference
Cladogram.pm:5:use PBDB::Reference;
Cladogram.pm:63:            my $short_ref = Reference::formatShortRef($dbt,$row->{'reference_no'});
Cladogram.pm:183:    my $short_ref = Reference::formatShortRef($dbt,$reference_no,'link_id'=>1);
Cladogram.pm:967:	$caption .= "<br>\n<nobr>Reference: ".Reference::formatShortRef($dbt,$cladogram->{reference_no},'no_inits'=>1,'link_id'=>1) . "</nobr><br>\n";
Classic.pm:28:use PBDB::Reference;
Classic.pm:29:use PBDB::ReferenceEntry;  # slated for removal
Classic.pm:323:	$row->{last_coll_ref} = "<a href=\"?a=displayReference&reference_no=$coll->{reference_no}\">".PBDB::Reference::formatShortRef(${$dbt->getData('SELECT * FROM refs WHERE reference_no='.$coll->{reference_no})}[0])."</a>";
Classic.pm:329:	$row->{latest_species} .= " <a href=\"?a=displayReference&reference_no=$sp->{reference_no}\">".PBDB::Reference::formatShortRef($sp)."</a>";
Classic.pm:794:    PBDB::Reference::displaySearchRefs($dbt,$q,$s,$hbo,$error);
Classic.pm:798:sub selectReference {
Classic.pm:802:	$s->setReferenceNo($q->param("reference_no") );
Classic.pm:814:		displayReferenceForm();
Classic.pm:817:		PBDB::Reference::displaySearchRefs($dbt,$q,$s,$hbo,"Please choose a reference first" );
Classic.pm:827:	PBDB::Reference::displayRefResults($dbt,$q,$s,$hbo);
Classic.pm:830:sub getReferencesXML {
Classic.pm:835:    PBDB::Reference::getReferencesXML($dbt,$q,$s,$hbo);
Classic.pm:844:	PBDB::Reference::getTitleWordOdds($dbt,$q,$s,$hbo);
Classic.pm:848:sub displayReferenceForm {
Classic.pm:858:	PBDB::ReferenceEntry::displayReferenceForm($dbt,$q,$s,$hbo);
Classic.pm:862:sub displayReference {
Classic.pm:867:	PBDB::Reference::displayReference($dbt,$q,$s,$hbo);
Classic.pm:871:sub processReferenceForm {
Classic.pm:876:	PBDB::ReferenceEntry::processReferenceForm($dbt,$q,$s,$hbo);
Classic.pm:1234:<th align=left>Reference</th>
Classic.pm:1259:                $reference = PBDB::Reference::formatShortRef($ref,'alt_pubyr'=>1, 'link_id'=>1);
Classic.pm:2180:    			print "<p class=\"pageTitle\">Taxonomic names from ".PBDB::Reference::formatShortRef($dbt,$q->param("reference_no"))."</p>\n";
Classic.pm:2252:        $s->setReferenceNo(0);
Classic.pm:2375:        $s->setReferenceNo(0);
Classic.pm:2398:        $s->setReferenceNo(0);
Classic.pm:3271:	$occ_row->{reference_link} = qq{<a href="$WRITE_URL?action=displayReference&type=view&reference_no=$occ_row->{reference_no}">view</a>}
Classic.pm:3285:	    $re_row->{reference_link} = qq{<a href="$WRITE_URL?action=displayReference&type=view&reference_no=$re_row->{reference_no}">view</a>}
Classic.pm:3526:    my $reference = "$reference_no (".PBDB::Reference::formatShortRef($dbt,$reference_no).")";
Classic.pm:3534:          '&nbsp;Reference: '.$reference."<br />".
Classic.pm:4751:	my $ref = PBDB::Reference::getReference($dbt,$reference_no);
Classic.pm:4752:	my $formatted_primary = PBDB::Reference::formatLongRef($ref);
Classic.pm:4753:	my $refString = "<b><a href=\"?a=displayReference&reference_no=$reference_no\">$reference_no</a></b> $formatted_primary<br>";
Classic.pm:4852:            my $ref = PBDB::Reference::getReference($dbt,$row->{'reference_no'});
Classic.pm:4853:            my $formatted_primary = PBDB::Reference::formatShortRef($ref);
Classic.pm:4854:            my $refString = "<a href=\"?a=displayReference&reference_no=$row->{reference_no}\">$row->{reference_no}</a></b>&nbsp;$formatted_primary";
Classic.pm:5262:    my $ref = Reference->new($dbt,$q->param('reference_no'));
Collection.pm:1544:	print "<p $indent>Primary reference: ".Reference::formatLongRef($ref,'link_id'=>1)." <a class=\"verysmall\" href=\"?a=displayReference&reference_no=$c->{reference_no}\">more details</a>";
Collection.pm:1621:		$authors{$_->{'taxon_no'}} = Reference::formatShortRef($_) foreach @ref_info;
Collection.pm:1632:			$refList .= sprintf("; <sup>%d</sup>".Reference::formatShortRef($refs[$i],'link_id'=>1),$i+1);
Collection.pm:1849:		$c->{'reference'} = Reference::formatLongRef($dbt,$c->{'reference_no'});
CollectionEntry.pm:135:    my $ref = Reference::getReference($dbt,$vars{'reference_no'});
CollectionEntry.pm:136:    my $formatted_primary = Reference::formatLongRef($ref);
CollectionEntry.pm:139:    "<td valign=\"top\"><a href=\"?a=displayReference&reference_no=$vars{reference_no}\">".$vars{'reference_no'}."</a></b>&nbsp;</td>".
CollectionEntry.pm:167:        my @secondary_refs = ReferenceEntry::getSecondaryRefs($dbt,$collection_no);
CollectionEntry.pm:172:                my $ref = Reference::getReference($dbt,$sr);
CollectionEntry.pm:173:                my $formatted_secondary = Reference::formatLongRef($ref);
CollectionEntry.pm:193:                my $ref = Reference::getReference($dbt,$session_ref);
CollectionEntry.pm:194:                my $sr = Reference::formatLongRef($ref);
CollectionEntry.pm:222:    $ref = Reference::getReference($dbt,$vars{'reference_no'});
CollectionEntry.pm:223:    $formatted_primary = Reference::formatLongRef($ref);
CollectionEntry.pm:772:        my $ref = Reference::getReference($dbt,$row->{'reference_no'});
CollectionEntry.pm:773:        my $formatted_primary = Reference::formatLongRef($ref);
CollectionEntry.pm:775:            "<td valign=\"top\"><a href=\"?a=displayReference&reference_no=$row->{reference_no}\">".$row->{'reference_no'}."</a></td>".
CollectionEntry.pm:781:        my @secondary_refs = ReferenceEntry::getSecondaryRefs($dbt,$collection_no);
CollectionEntry.pm:787:                my $ref = Reference::getReference($dbt,$sr);
CollectionEntry.pm:788:                my $formatted_secondary = Reference::formatLongRef($ref);
CollectionEntry.pm:791:                    "<td valign=\"top\"><a href=\"?a=displayReference&reference_no=$sr\">$sr</a></td>".
CollectionEntry.pm:1179:					$rowref->{'authority'} = Reference::formatShortRef($taxon,'no_inits'=>1,'link_id'=>$taxon->{'ref_is_authority'},'is_recombination'=>$is_recomb);
CollectionEntry.pm:1188:				$rowref->{reference_no} = Reference::formatShortRef($dbt,$newrefno,'no_inits'=>1,'link_id'=>1);
CollectionEntry.pm:1759:		$row->{'reference_no'} = Reference::formatShortRef($dbt,$row->{'reference_no'},'no_inits'=>1,'link_id'=>1);
CollectionEntry.pm:1767:				$row->{'authority'} = Reference::formatShortRef($taxon,'no_inits'=>1,'link_id'=>$taxon->{'ref_is_authority'});
CollectionEntry.pm:2022:		dbg("Reference $reference_no has $cnt occurrences and is not deletable");
CollectionEntry.pm:2025:		dbg("Reference $reference_no has $cnt occurrences and is deletable");
CollectionQuery.pm:463:	$self->generateReference($row);
CollectionQuery.pm:528:	$output .= '    <dwc:associatedReferences>' . $pubref . '</dwc:associatedReferences>' . "\n";
CollectionQuery.pm:575:	$output .= ',"associatedReferences":"' . $pubref . '"';
Confidence.pm:14:use PBDB::Reference;
Confidence.pm:606:            my $author_string = Reference::formatShortRef($row);
Curve.pm:15:my $q;					# Reference to the parameters
Curve.pm:1678:			print "<td class=tiny align=center valign=top><b>References</b> ";
Curve.pm:1679:			push @header , 'References';
Curve.pm:2109:				print "<td class=tiny align=center valign=top><b>References<br>sampled</b> ";
Curve.pm:2110:				print SUB_TABLE ",References sampled";
DataQuery.pm:1089:# generateReference ( )
DataQuery.pm:1096:sub generateReference {
Download.pm:11:use PBDB::Reference;
Download.pm:3668:	    my $refout = ReferenceEntry::formatRISRef($dbt, $row);
Download.pm:3707:            $cites .= Reference::formatLongRef($row);
DownloadTaxonomy.pm:530:	    #my $pages = Reference::coalescePages($pages{$row->{reference_no}});
DownloadTaxonomy.pm:868:	    $row->{refpages} = Reference::coalescePages($pages{$row->{reference_no}});
DownloadTaxonomy.pm:869:	    my $outref = ReferenceEntry::formatRISRef($dbt, $row);
EcologyEntry.pm:7:use PBDB::Reference;
EcologyEntry.pm:89:		push @values , '<center><div class="small" style="width: 60em; text-align: left; text-indent: -1em;">Primary reference: ' . Reference::formatLongRef(${$dbt->getData($sql)}[0]) . '</div></center>';
FossilRecord.pm:7:use PBDB::Reference;
FossilRecord.pm:395:    die ("Reference not set") if (!$reference_no);
FossilRecord.pm:1520:    my $pub_info = Reference::formatShortRef($t);
HTMLBuilder.pm:7:use PBDB::Reference;
HTMLBuilder.pm:850:            $vars->{reference} = "(".Reference::formatShortRef($dbt,$reference_no,'no_inits'=>1).")";
Images.pm:4:use PBDB::Reference;
Images.pm:327:            my $ref_string = Reference::formatShortRef($ref,'link_id'=>1);  
Images.pm:329:            print "<tr><td>Reference:</td><td> $ref_string</td></tr>\n";
Main.pm:27:use PBDB::Reference;
Main.pm:28:use PBDB::ReferenceEntry;  # slated for removal
Map.pm:16:my $q;	    # Reference to the parameters
Measurement.pm:8:use PBDB::Reference;
Measurement.pm:217:            $seen_ref{PBDB::Reference::formatShortRef($row)}++;
Measurement.pm:218:            $seen_part_ref{$row->{'specimen_part'}}{PBDB::Reference::formatShortRef($row)}++;
MeasurementEntry.pm:5:use PBDB::Reference;
MeasurementEntry.pm:522:        my $auth = Reference::formatShortRef($row);
MeasurementEntry.pm:655:	        push @values,(Reference::formatLongRef($ref),int($q->param('occurrence_no')),int($q->param('taxon_no')),$s->get('reference_no'),'-1',$taxon_name,$collection,int($q->param('types_only')));
MeasurementEntry.pm:810:	    push (@values, sprintf("%s",Reference::formatLongRef($ref)),int($q->param('occurrence_no')),int($q->param('taxon_no')),int($row->{'reference_no'}),$row->{'specimen_no'},$taxon_name,$collection,int($q->param('types_only')));
Nexusfile.pm:381:		bless $r, 'Reference';
NexusfileWeb.pm:258:		    Reference::formatAsHTML($ref) . "</li>\n";
NexusfileWeb.pm:397:	Nexusfile::addReference($dbt, $nexusfile_no, $reference_no);
NexusfileWeb.pm:440:		    Reference::formatAsHTML($ref) . 
NexusfileWeb.pm:603:    if ( $q->param('addReference') )
NexusfileWeb.pm:616:    elsif ( my $reference_no = $q->param('deleteReference') )
NexusfileWeb.pm:618:	Nexusfile::deleteReference($dbt, $nexusfile_no, $reference_no);
NexusfileWeb.pm:626:    elsif ( my $reference_no = $q->param('moveReference') )
NexusfileWeb.pm:628:	Nexusfile::moveReference($dbt, $nexusfile_no, $reference_no);
NexusfileWrite.pm:314:=head3 addReference ( dbt, nexusfile_no, reference_no )
NexusfileWrite.pm:320:sub addReference {
NexusfileWrite.pm:346:=head3 deleteReference ( dbt, nexusfile_no, reference_no )
NexusfileWrite.pm:352:sub deleteReference {
NexusfileWrite.pm:385:=head3 moveReference ( dbt, nexusfile_no, reference_no )
NexusfileWrite.pm:393:sub moveReference {
Opinion.pm:141:	#  Reference module to do so just for consistency
Opinion.pm:142:	my $ref = Reference->new($self->{'dbt'},$hr->{'reference_no'});
Opinion.pm:255:        $short_ref = Reference::formatShortRef($dbt,$row->{reference_no});
Opinion.pm:257:        $short_ref = Reference::formatShortRef($row);
Opinion.pm:410:            my $ref = Reference->new($dbt,$r->{'reference_no'});
Opinion.pm:512:            my $pub_info = Reference::formatShortRef($taxon);
Opinion.pm:553:        my $ref = Reference->new($dbt,$fields{'reference_no'}); 
Opinion.pm:561:        my $ref = Reference->new($dbt,$s->get('reference_no'));
Opinion.pm:661:			my $pub_info = Reference::formatShortRef($taxon);
Opinion.pm:780:	my $ref = Reference->new($dbt,$lookup_reference);
Opinion.pm:1358:    my $resultReferenceNumber = $fields{'reference_no'};
Opinion.pm:1433:                if ( $cr->{reference_no} == $resultReferenceNumber && $cr->{ref_has_opinion} eq "YES" && $fields{'ref_has_opinion'} eq "YES" )	{
Opinion.pm:1500:    $message_vals{'result_reference'} = $resultReferenceNumber;
Opinion.pm:1504:    $message_vals{'child_authors'} = Reference::formatShortRef($auth);
Opinion.pm:1505:    $message_vals{'opinion_authors'} = Reference::formatShortRef($dbt,$resultReferenceNumber);
Opinion.pm:1507:    if ( $s->get('reference_no') != $resultReferenceNumber && $s->get('reference_no') > 0 )	{
Opinion.pm:1509:        $message_vals{'my_authors'} = Reference::formatShortRef($dbt,$s->get('reference_no'));
Opinion.pm:1516:    Taxon::displayTypeTaxonSelectForm($dbt,$s,$fields{'type_taxon'},$fields{'child_no'},$childName,$childRank,$resultReferenceNumber,$end_message);
Opinion.pm:1675:            $authority = qq{$relation <a href="$WRITE_URL?action=displayReference&reference_no=$o->{reference_no}">$authority</a>};
Opinion.pm:1750:                print "<p class=\"pageTitle\">Opinions from ".Reference::formatShortRef($dbt,$q->param("reference_no"))."</p>\n";
Opinion.pm:1946:		$by = "<a href=\"$WRITE_URL?a=displayReference&amp;reference_no=$e->{'refno'}\">" . $by;
Person.pm:5:use PBDB::Reference;
Person.pm:441:        my $longref = Reference::formatLongRef($refdata{$row->{'max_ref'}});
Person.pm:444:        $html .= "<div class=\"verysmall\" style=\"padding-top: 0.3em;\"><i><a href=\"$READ_URL?action=displayReference&reference_no=$row->{'max_ref'}\">Latest reference:</a></i> " . $longref. "</div>";
PrintHierarchy.pm:63:			push @ref_list , "<p class=\"verysmall\" style=\"margin-left: 2em; margin-right: 0.5em; text-indent: -1em; text-align: left; margin-bottom: -0.8em;\">".Reference::formatLongRef($_)." (ref ".$_->{'reference_no'}.")</p>\n" foreach @refs;
Reference.pm:3:# the following functions were moved into ReferenceEntry.pm by JA 4.6.13:
Reference.pm:6:#  displayReferenceForm, processReferenceForm, checkFraud
Reference.pm:8:package PBDB::Reference;
Reference.pm:18:use PBDB::ReferenceEntry;
Reference.pm:46:	my Reference $self = fields::new($class);
Reference.pm:51:        $error_msg = "Could not create Reference object with reference_no=undef."
Reference.pm:61:            $error_msg = "Could not create Reference object with reference_no=$reference_no."
Reference.pm:83:	my Reference $self = shift;
Reference.pm:90:	my Reference $self = shift;
Reference.pm:102:	my Reference $self = shift;
Reference.pm:108:	my Reference $self = shift;
Reference.pm:129:sub getReference {
Reference.pm:200:            $shortRef = qq|<a href="?a=displayReference&reference_no=$refData->{reference_no}">$shortRef</a>|;
Reference.pm:218:        $ref = getReference(@_);
Reference.pm:351:		($data,$query_description,$alternatives) = getReferences($dbt,$q,$s,$hbo);
Reference.pm:363:			$s->setReferenceNo( $data[0]->{'reference_no'});
Reference.pm:382:			ReferenceEntry::displayReferenceForm($dbt,$q,$s,$hbo);
Reference.pm:389:			displayReference($dbt,$q,$s,$hbo,$data[0],$alternatives);
Reference.pm:446:                    print "<a href=\"$exec_url?a=displayReferenceForm&reference_no=$row->{reference_no}\">$row->{reference_no}</a>";
Reference.pm:450:                    print "<a href=\"$exec_url?a=displayReference&reference_no=$row->{reference_no}\">$row->{reference_no}</a><br>";
Reference.pm:455:                print "<a href=\"?a=displayReference&reference_no=$row->{reference_no}\">$row->{reference_no}</a>";
Reference.pm:463:            my $reference_summary = getReferenceLinkSummary($dbt,$s,$row->{'reference_no'});
Reference.pm:500:            print "<input type=\"hidden\" name=\"action\" value=\"displayReferenceForm\">";
Reference.pm:512:			ReferenceEntry::displayReferenceForm($dbt,$q,$s,$hbo);
Reference.pm:534:sub displayReference {
Reference.pm:539:        $ref = getReference($dbt,$q->param('reference_no'));
Reference.pm:829:sub getReferenceLinkSummary	{
Reference.pm:944:sub getReferences {
Reference.pm:1095:				push @links , "<a href=\"?a=displayReference&amp;reference_no=$l->{'reference_no'}\">$l->{'name'}</a>";
Reference.pm:1116:sub getReferencesXML {
Reference.pm:1120:    my ($data,$query_description) = getReferences($dbt,$q,$s,$hbo);
ReferenceEntry.pm:1:# includes entry functions extracted from Reference.pm JA 4.6.13
ReferenceEntry.pm:3:package PBDB::ReferenceEntry;
ReferenceEntry.pm:10:# three calls to Reference functions will eventually need to be replaced
ReferenceEntry.pm:11:use PBDB::Reference;
ReferenceEntry.pm:39:	my ReferenceEntry $self = fields::new($class);
ReferenceEntry.pm:44:        $error_msg = "Could not create Reference object with reference_no=undef."
ReferenceEntry.pm:54:            $error_msg = "Could not create Reference object with reference_no=$reference_no."
ReferenceEntry.pm:76:	my ReferenceEntry $self = shift;
ReferenceEntry.pm:83:	my ReferenceEntry $self = shift;
ReferenceEntry.pm:95:	my ReferenceEntry $self = shift;
ReferenceEntry.pm:96:    return Reference::formatShortRef($self);
ReferenceEntry.pm:363:sub displayReferenceForm {
ReferenceEntry.pm:409:		$vars{"page_title"} = "Reference number $reference_no";
ReferenceEntry.pm:416:sub processReferenceForm {
ReferenceEntry.pm:510:    print "<center><p class=\"pageTitle\">Reference number $reference_no $verb</p></center>";
ReferenceEntry.pm:514:        $s->setReferenceNo($reference_no);
ReferenceEntry.pm:515:        my $ref = Reference::getReference($dbt,$reference_no);
ReferenceEntry.pm:516:        my $formatted_ref = Reference::formatLongRef($ref);
Review.pm:7:use PBDB::Reference;
Review.pm:479:			$ref = Reference::formatLongRef($refref);
Scales.pm:439:    $row->{'reference'} = Reference::formatShortRef($dbt,$row->{'reference_no'},'link_id'=>1);
Session.pm:291:sub setReferenceNo {
Taxon.pm:27:use PBDB::Reference;
Taxon.pm:134:	#  Reference module to do so just for consistency
Taxon.pm:135:	my $ref = Reference->new($self->{'dbt'},$hr->{'reference_no'});
Taxon.pm:284:        my $ref = Reference->new($dbt,$fields{'reference_no'});
Taxon.pm:288:	    $fields{primary_reference_link} = qq{<a href="$WRITE_URL?a=displayReference&type=view&reference_no=$fields{reference_no}">view</a>};
Taxon.pm:295:	my $ref = Reference->new($dbt,$current_ref);
Taxon.pm:299:	    $fields{current_reference_link} = qq{<a href="$WRITE_URL?a=displayReference&type=view&reference_no=$current_ref">view</a>};
Taxon.pm:634:        my $ref = Reference->new($dbt,$lookup_reference);
Taxon.pm:909:                my $pub_info = Reference::formatShortRef($row);
Taxon.pm:935:	my $resultReferenceNumber = $fields{'reference_no'};
Taxon.pm:1022:        $end_message .= "<div align=\"center\"><p class=\"large\">" . $fields{'taxon_name'} . " " .Reference::formatShortRef(\%fields). " has been $enterupdate the database</p></div>";
Taxon.pm:1033:      <br><li><a href="$WRITE_URL?action=displayTaxonomicNamesAndOpinions&reference_no=$resultReferenceNumber">Edit a name from the same reference</a></li>
Taxon.pm:1065:                  $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&author1init=|.$q->param('author1init').qq|&author1last=|.$q->param('author1last').qq|&author2init=|.$q->param('author2init').qq|&author2last=|.$q->param('author2last').qq|&otherauthors=|.$q->param('otherauthors').qq|&pubyr=|.$q->param('pubyr').qq|&reference_no=$resultReferenceNumber&opinion_no=-1">Add this author's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1071:        my $sql = "SELECT opinion_no FROM opinions WHERE ref_has_opinion='YES' AND reference_no=$resultReferenceNumber AND child_spelling_no=$resultTaxonNumber AND child_no=$origResultTaxonNumber ORDER BY opinion_no DESC";
Taxon.pm:1085:          <li$style><a href="$WRITE_URL?action=displayTaxonomicNamesAndOpinions&reference_no=$resultReferenceNumber&amp;display=opinions">Edit an opinion from the same reference</a></li>
Taxon.pm:1087:          <li$style><a href="$WRITE_URL?action=classify&reference_no=$resultReferenceNumber">Print this reference's classification</a></li>
Taxon.pm:1092:        processSpecimenMeasurement($dbt,$s,$resultTaxonNumber,$resultReferenceNumber,\%fields);
Taxon.pm:1094:        displayTypeTaxonSelectForm($dbt,$s,$fields{'type_taxon'},$resultTaxonNumber,$fields{'taxon_name'},$fields{'taxon_rank'},$resultReferenceNumber,$end_message);
Taxon.pm:1800:            my $formatted_ref = Reference::formatShortRef(${$dbt->getData($sqlr)}[0]);
Taxon.pm:1971:    my $pub_info = Reference::formatShortRef($taxon,'is_recombination'=>$is_recomb);
TaxonInfo.pm:8:use PBDB::Reference;
TaxonInfo.pm:342:		$discussion =~ s/(\[\[)([A-Za-z0-9\'\. ]+|)(ref )([0-9]+)(\|)/<a href="?a=displayReference&amp;reference_no=$4">/g;
TaxonInfo.pm:1306:                my $pub_info = PBDB::Reference::formatShortRef($authority);
TaxonInfo.pm:1308:                    $pub_info = "<a href=\"?a=displayReference&amp;reference_no=$authority->{reference_no}&amp;is_real_user=$is_real_user\">$pub_info</a>";
TaxonInfo.pm:1731:			$text .= PBDB::Reference::formatShortRef($taxon,'alt_pubyr'=>1,'show_comments'=>1,'link_id'=>1);
TaxonInfo.pm:1733:			$text .= PBDB::Reference::formatShortRef($taxon,'alt_pubyr'=>1,'show_comments'=>1);
TaxonInfo.pm:1780:            $para_text .= printReferenceList($parent_block,$best_opinion);
TaxonInfo.pm:1899:                    my $pub_info = PBDB::Reference::formatShortRef($taxon);
TaxonInfo.pm:1910:                $text .= printReferenceList($group,$best_opinion);
TaxonInfo.pm:1949:            $text .= printReferenceList(\@parent_array,$best_opinion);
TaxonInfo.pm:1967:    sub printReferenceList {
TaxonInfo.pm:1976:                $text .= PBDB::Reference::formatShortRef($ref,'alt_pubyr'=>1,'show_comments'=>1, 'link_id'=>1);
TaxonInfo.pm:1985:                $text .= PBDB::Reference::formatShortRef($ref,'alt_pubyr'=>1,'show_comments'=>1);
TaxonInfo.pm:2546:            $output .= "Reference: ";
TaxonInfo.pm:2548:            $output .= "References: ";
TaxonInfo.pm:2554:            $references[$i] = PBDB::Reference::formatShortRef($ref,'link_id'=>1);
TaxonInfo.pm:2656:            my $reference = PBDB::Reference::formatShortRef($dbt,$refs[$i],'no_inits'=>1,'link_id'=>1);
TaxonInfo.pm:2769:            $str .= "<tr><th>Reference</th><th>Diagnosis</th></tr>\n";
TaxonInfo.pm:2900:				$authorstring = "<a href=\"?a=displayReference&amp;reference_no=$refdata->{reference_no}&amp;is_real_user=$is_real_user\">" . $authorstring . "</a>";
TaxonInfo.pm:3846:			$author = "<a href=\"?a=displayReference&amp;reference_no=$auth->{'reference_no'}&amp;is_real_user=$is_real_user\">".$author."</a>";
TaxonInfo.pm:3887:		$discussion =~ s/(\[\[)([A-Za-z0-9\'\. ]+|)(ref )([0-9]+)(\|)/<a href="?a=displayReference&amp;reference_no=$4">/g;
TaxonInfo.pm:4002:		print "<p $indent>Full reference: ".PBDB::Reference::formatLongRef($auth)."</p>\n\n";
TaxonInfo.pm:4016:			print " according to ".PBDB::Reference::formatShortRef($ref,'link_id'=>1);
TaxonInfo.pm:4025:						push @formatted , PBDB::Reference::formatShortRef($r,'link_id'=>1);
TaxonInfo.pm:5107:                        $reference = PBDB::Reference::formatShortRef($refData,'link_id'=>1);
TaxonInfo.pm:5111:                    $reference = PBDB::Reference::formatShortRef($row);
TaxonQuery.pm:1302:	$self->generateReference($row);
------------ ReferenceEntry
Classic.pm:29:use PBDB::ReferenceEntry;  # slated for removal
Classic.pm:858:	PBDB::ReferenceEntry::displayReferenceForm($dbt,$q,$s,$hbo);
Classic.pm:876:	PBDB::ReferenceEntry::processReferenceForm($dbt,$q,$s,$hbo);
CollectionEntry.pm:167:        my @secondary_refs = ReferenceEntry::getSecondaryRefs($dbt,$collection_no);
CollectionEntry.pm:781:        my @secondary_refs = ReferenceEntry::getSecondaryRefs($dbt,$collection_no);
Download.pm:3668:	    my $refout = ReferenceEntry::formatRISRef($dbt, $row);
DownloadTaxonomy.pm:869:	    my $outref = ReferenceEntry::formatRISRef($dbt, $row);
Main.pm:28:use PBDB::ReferenceEntry;  # slated for removal
Reference.pm:3:# the following functions were moved into ReferenceEntry.pm by JA 4.6.13:
Reference.pm:18:use PBDB::ReferenceEntry;
Reference.pm:382:			ReferenceEntry::displayReferenceForm($dbt,$q,$s,$hbo);
Reference.pm:512:			ReferenceEntry::displayReferenceForm($dbt,$q,$s,$hbo);
ReferenceEntry.pm:3:package PBDB::ReferenceEntry;
ReferenceEntry.pm:39:	my ReferenceEntry $self = fields::new($class);
ReferenceEntry.pm:76:	my ReferenceEntry $self = shift;
ReferenceEntry.pm:83:	my ReferenceEntry $self = shift;
ReferenceEntry.pm:95:	my ReferenceEntry $self = shift;
------------ Report
Classic.pm:643:sub displayReportForm {
Classic.pm:652:sub displayReportResults {
Classic.pm:656:	require Report;
Classic.pm:662:	my $r = Report->new($dbt,$q,$s);
Classic.pm:663:	$r->buildReport();
Classic.pm:673:	require Report;
Classic.pm:679:	my $r = Report->new($dbt,$q,$s);
Classic.pm:705:	require Report;
Classic.pm:706:	Report::fastTaxonCount($dbt,$q,$s,$hbo);
Classic.pm:716:	require Report;
Classic.pm:722:	my $r = Report->new($dbt,$q,$s);
Report.pm:1:# Report.pm
Report.pm:4:package PBDB::Report;
Report.pm:23:sub buildReport {
------------ Review
Classic.pm:43:use PBDB::Review;
Classic.pm:5219:sub displayReviewForm {
Classic.pm:5224:	Review::displayReviewForm($dbt,$q,$s,$hbo);
Classic.pm:5228:sub processReviewForm {
Classic.pm:5233:	Review::processReviewForm($dbt,$q,$s,$hbo);
Classic.pm:5237:sub listReviews	{
Classic.pm:5242:	Review::listReviews($dbt,$q,$s,$hbo);
Classic.pm:5246:sub showReview	{
Classic.pm:5251:	Review::showReview($dbt,$q,$s,$hbo);
Collection.pm:724:		} elsif ( $options{"calling_script"} eq "Review" )	{
Main.pm:42:use PBDB::Review;
Review.pm:2:package PBDB::Review;
Review.pm:13:sub displayReviewForm	{
Review.pm:107:<form name="chooseReview" method=post action="classic">
Review.pm:108:<input type="hidden" name="a" value="displayReviewForm">
Review.pm:117:			print "<p style=\"text-indent: -2em; margin-left: 2em;\">&bull; <a href=# onClick=\"javascript: document.chooseReview.review_no.value='".$r->{'review_no'}."'; document.chooseReview.submit();\">$r->{'title'}</a>";
Review.pm:119:				print " (PaleoDB Review #$r->{'official_no'})";
Review.pm:123:		print "<p>&bull; <a href=# onClick=\"javascript: document.chooseReview.review_no.value='-1'; document.chooseReview.submit();\"><i>Create a new review page</i></a>";
Review.pm:134:sub processReviewForm	{
Review.pm:155:		showReview($dbt,$q,$s,$hbo,$error);
Review.pm:205:	# fix official PaleoDB Review number
Review.pm:221:	showReview($dbt,$q,$s,$hbo,$error);
Review.pm:226:sub listReviews	{
Review.pm:236:	print "<center><p class=\"pageTitle\" style=\"margin-top: 2em;\">Paleobiology Database Reviews</p></center>\n\n";
Review.pm:239:<form name="chooseReview" method=post action="classic">
Review.pm:240:<input type="hidden" name="a" value="showReview">
Review.pm:248:		print "<p style=\"text-indent: -2em; margin-left: 2em;\">&bull; $r->{'first_name'} $r->{'last_name'}, <a href=# onClick=\"javascript: document.chooseReview.review_no.value='".$r->{'review_no'}."'; document.chooseReview.submit();\"><i>$r->{'title'}</i></a>";
Review.pm:250:			print " (Paleobiology Database Review #".$r->{'official_no'}.")";
Review.pm:259:sub showReview	{
Review.pm:289:		$q->param('action' => 'displayReviewForm');
Review.pm:344:		print "<p class=\"large\" style=\"margin-top: 0.5em; margin-bottom: 0em;\">Paleobiology Database Review #$no</p>\n";
Review.pm:497:	print "<center><b><a href=\"$READ_URL?a=listReviews\">See more PaleoDB review pages</a></b></center>\n\n";
Review.pm:581:	$options{'calling_script'} = 'Review';
------------ SanityCheck
Classic.pm:3099:## SanityCheck stuff
Classic.pm:3109:sub startProcessSanityCheck	{
Classic.pm:3114:	require SanityCheck;
Classic.pm:3118:	SanityCheck::processSanityCheck($q, $dbt, $hbo, $s);
Classic.pm:3121:## END SanityCheck stuff
SanityCheck.pm:1:package PBDB::SanityCheck;
SanityCheck.pm:9:sub processSanityCheck	{
SanityCheck.pm:328:<input type="hidden" name="action" value="startProcessSanityCheck">
------------ Scales
Classic.pm:2724:## Scales stuff JA 7.7.03
Classic.pm:2726:# 	require Scales;
Classic.pm:2728:# 	Scales::intervals($dbt, $hbo, $q);
Classic.pm:2732:# 	require Scales;
Classic.pm:2734:# 	Scales::searchScale($dbt, $hbo, $s, $q);
Classic.pm:2738:#     require Scales;
Classic.pm:2740:# 	Scales::processShowEditForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2744:#     require Scales;
Classic.pm:2747:# 	Scales::processViewTimeScale($dbt, $hbo, $q, $s);
Classic.pm:2751:#     require Scales;
Classic.pm:2753:# 	Scales::processEditScaleForm($dbt, $hbo, $q, $s, $WRITE_URL);
Classic.pm:2758:#     require Scales;
Classic.pm:2760:#     Scales::displayTenMyBinsDebug($dbt,$q,$s,$hbo);
Classic.pm:2764:#     require Scales;
Classic.pm:2766:#     Scales::submitSearchInterval($dbt, $hbo, $q);
Classic.pm:2770:#     require Scales;
Classic.pm:2772:#     Scales::displayInterval($dbt, $hbo, $q);
Classic.pm:2777:#     require Scales;
Classic.pm:2779:#     Scales::displayTenMyBins($dbt,$q,$s,$hbo);
Classic.pm:2783:## END Scales stuff
Scales.pm:1:package PBDB::Scales;
Scales.pm:99:	my (%scale_strings,%hasScales);
Scales.pm:102:		$hasScales{$scaleref->{'continent'}}++;
Scales.pm:131:			} elsif ( ! $hasScales{$c} )	{
TimeLookup.pm:337:# values computed by initInterval, only used here and in Scales, and
TimeLookup.pm:1611:# JA: only used in Scales::displayInterval
------------ Session
Classic.pm:21:use PBDB::Session;
Classic.pm:88:    my $s = new PBDB::Session($dbt,cookie('session_id'));
Classic.pm:174:    PBDB::Session::displayPreferencesPage($dbt,$q,$s,$hbo);
Classic.pm:187:    PBDB::Session::setPreferences($dbt,$q,$s,$hbo);
Debug.pm:208:# object, and a Session object.
Debug.pm:248:	    $s = Session->new($dbt, $1);
Main.pm:20:use PBDB::Session;
Main.pm:64:# Create the CGI, Session, and some other objects.
Main.pm:71:my $s = new Session($dbt,$q->cookie('session_id'));
Permissions.pm:26:	my $s = shift;		# Session object
Permissions.pm:32:	unless (UNIVERSAL::isa($s,'PBDB::Session')) {
Permissions.pm:33:		carp ("Permissions must be created with valid Session object");
Session.pm:1:package PBDB::Session;
Session.pm:159:		    my $session_id = $self->buildSessionID();
Session.pm:221:    my $session_id = $self->buildSessionID();
Session.pm:258:sub buildSessionID {
TaxonQuery.pm:1452:    # if ( ref $session_param eq 'Session' )
TaxonQuery.pm:1463:    # 	$s = bless { logged_in => 0, dbt => $dbt }, 'Session';
------------ Strata
Classic.pm:2963:## Strata stuff
Classic.pm:2964:sub displayStrata {
Classic.pm:2968:    require Strata;
Classic.pm:2971:    Strata::displayStrata($q,$s,$dbt,$hbo);
Classic.pm:2975:sub displaySearchStrataForm {
Classic.pm:2979:    require Strata;
Classic.pm:2981:    Strata::displaySearchStrataForm($q,$s,$dbt,$hbo);
Classic.pm:2985:sub displaySearchStrataResults{
Classic.pm:2989:    require Strata;
Classic.pm:2991:    Strata::displaySearchStrataResults($q,$s,$dbt,$hbo);
Classic.pm:2994:## END Strata stuff
Collection.pm:594:    # This field is only passed by links created in the Strata module PS 12/01/2004
CollectionEntry.pm:1040:        $row->{'member'} = "<a href=\"?a=displayStrata&group_hint=".uri_escape($row->{'geological_group'})."&formation_hint=".uri_escape($row->{'formation'})."&group_formation_member=".uri_escape($row->{'member'})."\">$row->{member}</a>";
CollectionEntry.pm:1043:        $row->{'formation'} = "<a href=\"?a=displayStrata&group_hint=".uri_escape($row->{'geological_group'})."&group_formation_member=".uri_escape($row->{'formation'})."\">$row->{formation}</a>";
CollectionEntry.pm:1046:        $row->{'geological_group'} = "<a href=\"?a=displayStrata&group_formation_member=".uri_escape($row->{'geological_group'})."\">$row->{geological_group}</a>";
Strata.pm:1:package PBDB::Strata;
Strata.pm:20:sub displayStrata {
Strata.pm:27:    $options{'calling_script'} = 'Strata';
Strata.pm:64:            displayStrataChoice($q, $conflict_found, $dataRows);
Strata.pm:186:                $html .=  qq|<a href="$READ_URL?action=displayStrata&geological_group=|.uri_escape($g)
Strata.pm:200:                $html .=  qq|<a href="$READ_URL?action=displayStrata&formation=|.uri_escape($fm)
Strata.pm:372:sub displayStrataChoice {
Strata.pm:401:            print "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:410:            print "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:419:            print "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:425:            print "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:440:sub displaySearchStrataForm {
Strata.pm:447:    $vars->{'action'} = "displaySearchStrataResults";
Strata.pm:467:sub displaySearchStrataResults {
Strata.pm:520:                    $link .= "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:529:                    $link .= "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:541:                    $link .= "<a href=\"$READ_URL?action=displayStrata"
Strata.pm:637:        displayStrata($my_q,$s,$dbt,$hbo);
------------ TaxaCache
Classic.pm:39:use PBDB::TaxaCache;
Classic.pm:330:	my $class_hash = PBDB::TaxaCache::getParents($dbt,[$sp->{taxon_no}],'array_full');
Classic.pm:1644:	my $parent_hash = PBDB::TaxaCache::getParents($dbt,[$t->{'taxon_no'}],'array_full');
Classification.pm:326:# deprecated PS 10/10/2005 - use TaxaCache::getChildren instead
Collection.pm:21:use PBDB::TaxaCache;
Collection.pm:170:                    my @t = PBDB::TaxaCache::getChildren($dbt,$taxon_no,'',$ignore_senior);
Collection.pm:1716:		my $class_hash = PBDB::TaxaCache::getParents($dbt,[$o->{'taxon_no'}],'array_full');
Collection.pm:1831:		my $class_hash = PBDB::TaxaCache::getParents($dbt,[$no],'array_full');
Collection.pm:2208:	my $parents = PBDB::TaxaCache::getParents($dbt,\@taxon_nos,'array_full');
CollectionEntry.pm:14:use PBDB::TaxaCache;
CollectionEntry.pm:1253:				    my $class_hash = PBDB::TaxaCache::getParents($dbt,[$rowref->{'taxon_no'}],'array_full');
CollectionEntry.pm:1775:                my $class_hash = PBDB::TaxaCache::getParents($dbt,[$row->{'taxon_no'}],'array_full');
Confidence.pm:5:use PBDB::TaxaCache;
Confidence.pm:54:            my $parent = TaxaCache::getParent($dbt,$taxon_no);
Confidence.pm:358:                my @taxon_nos = TaxaCache::getChildren($dbt,$no_or_name);
Confidence.pm:365:                my @taxon_nos = TaxaCache::getChildren($dbt,$no_or_name);
Confidence.pm:371:                    my $best_name_ref = TaxaCache::getSeniorSynonym($dbt,$taxon_no);
Confidence.pm:376:                            $subgenus_ref = TaxaCache::getParent($dbt,$taxon_no,'subgenus');
Confidence.pm:378:                                $genus_ref= TaxaCache::getParent($dbt,$taxon_no,'genus');
Confidence.pm:492:            my $best_name_ref = TaxaCache::getSeniorSynonym($dbt,$row->{'taxon_no'});
Confidence.pm:497:                    $subgenus_ref = TaxaCache::getParent($dbt,$row->{taxon_no},'subgenus');
Confidence.pm:499:                        $genus_ref= TaxaCache::getParent($dbt,$row->{taxon_no},'genus');
Curve.pm:8:use PBDB::TaxaCache;
Curve.pm:990:	my $parents = TaxaCache::getParents($dbt,\@taxon_nos,'array_full');
Download.pm:10:use PBDB::TaxaCache;
Download.pm:2352:	my %master_class=%{TaxaCache::getParents($dbt,\@taxon_nos,'array_full')};
Download.pm:4294:                my @all_taxon_nos = TaxaCache::getChildren($dbt,$taxon_nos[0],'','',\@exclude_taxon_nos);
Download.pm:4310:                my @all_taxon_nos = TaxaCache::getChildren($dbt,$taxon_nos[0],'','',\@exclude_taxon_nos);
DownloadTaxonomy.pm:7:use PBDB::TaxaCache;
DownloadTaxonomy.pm:926:        my @children = TaxaCache::getChildren($dbt,$options{'taxon_no'});
DownloadTaxonomy.pm:1123:        my @children = TaxaCache::getChildren($dbt,$options{'taxon_no'});
DownloadTaxonomy.pm:1259:        my @children = TaxaCache::getChildren($dbt,$row->{'taxon_no'});
Ecology.pm:6:use PBDB::TaxaCache;
Ecology.pm:94:                my @child_taxon_nos = PBDB::TaxaCache::getChildren($dbt,$taxon_no);
FossilRecord.pm:8:use PBDB::TaxaCache;
FossilRecord.pm:194:        my @in_list=TaxaCache::getChildren($dbt,$taxon_no);
FossilRecord.pm:1382:    my $p_hash = TaxaCache::getParents($dbt,[$taxon_no]);
FossilRecord.pm:1519:    my $parent = TaxaCache::getParent($dbt,$t->{taxon_no});
FossilRecord.pm:1536:    my $parents_hash =  TaxaCache::getParents($dbt,\@taxon_nos,'array_full');
Images.pm:5:use PBDB::TaxaCache;
Images.pm:278:	my @taxon_nos = TaxaCache::getChildren($dbt,$matches[0]);
Images.pm:310:        my $ss = TaxaCache::getSeniorSynonym($dbt,$row->{'taxon_no'});
Main.pm:38:use PBDB::TaxaCache;
Measurement.pm:6:use PBDB::TaxaCache;
Measurement.pm:113:                @taxon_nos = PBDB::TaxaCache::getChildren($dbt,$_->{'taxon_no'});
MeasurementEntry.pm:4:use PBDB::TaxaCache;
MeasurementEntry.pm:47:                    @taxon_nos = TaxaCache::getChildren($dbt,$_->{'taxon_no'});
Opinion.pm:7:use PBDB::TaxaCache;
Opinion.pm:510:	        my $parent = TaxaCache::getParent($dbt,$parent_no);
Opinion.pm:659:			my $parent = TaxaCache::getParent($dbt,$child_spelling_no);
Report.pm:713:                    my @all_taxon_nos = TaxaCache::getChildren($dbt,$taxon_nos[0]);
TaxaCache.pm:25:package PBDB::TaxaCache;
Taxon.pm:22:use PBDB::TaxaCache;
Taxon.pm:940:		TaxaCache::addName($dbt,$resultTaxonNumber);
Taxon.pm:1531:    TaxaCache::addName($dbt,$new_taxon_no);
Taxon.pm:1979:    my %master_class=%{TaxaCache::getParents($dbt, [$taxon->{'taxon_no'}],'array_full')};
Taxon.pm:2481:		TaxaCache::updateCache($dbt,$orig);
Taxon.pm:2495:		TaxaCache::updateCache($dbt,$orig);
TaxonInfo.pm:9:use PBDB::TaxaCache;
TaxonInfo.pm:234:            my @in_list=PBDB::TaxaCache::getChildren($dbt,$taxon_no);
TaxonInfo.pm:578:        my $parent = PBDB::TaxaCache::getParent($dbt,$taxon_no);
TaxonInfo.pm:1227:        my $parent_hash = PBDB::TaxaCache::getParents($dbt,[$orig_classification_no],'array_full');
TaxonInfo.pm:1375:        my $parent = PBDB::TaxaCache::getParent($dbt,$orig_no);
TaxonInfo.pm:1399:	my $taxon_records = PBDB::TaxaCache::getChildren($dbt,$focal_taxon_no,'immediate_children');
TaxonInfo.pm:1431:	my @sisters = @{PBDB::TaxaCache::getChildren($dbt,$parent_taxon_no,'immediate_children')};
TaxonInfo.pm:2455:    my $class_hash = PBDB::TaxaCache::getParents($dbt,[$taxon_no],'array_full');
TaxonInfo.pm:3799:		$class_hash = PBDB::TaxaCache::getParents($dbt,[$taxon_no],'array_full');
TaxonInfo.pm:3863:		my $parent_hash = PBDB::TaxaCache::getParents($dbt,[$taxon_no],'array_full');
TaxonInfo.pm:4034:			#push @sisters , $_ ? $_->{'taxon_no'} != $taxon_no : "" foreach @{PBDB::TaxaCache::getChildren($dbt,$parent->{'taxon_no'},'immediate_children')};
TaxonInfo.pm:4035:			my @temp = @{PBDB::TaxaCache::getChildren($dbt,$parent->{'taxon_no'},'immediate_children')};
TaxonInfo.pm:4041:	#		@sisters = @{PBDB::TaxaCache::getChildren($dbt,$parent->{'taxon_no'},'immediate_children')};
TaxonInfo.pm:4066:		my @child_refs = @{PBDB::TaxaCache::getChildren($dbt,$taxon_no,'immediate_children')};
------------ Taxon
Cladogram.pm:23:    my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no});
Cladogram.pm:86:        print ("Taxon no not set");
Cladogram.pm:108:    my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no});
Cladogram.pm:616:                my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name,'remove_rank_change'=>1},['*']);
Cladogram.pm:639:        my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parent_name,'remove_rank_change'=>1},['*']);
Cladogram.pm:662:        my $authority = Taxon::formatTaxon($dbt,$c);
Classic.pm:33:use PBDB::TaxonInfo;
Classic.pm:47:use PBDB::Taxon;  # slated for removal
Classic.pm:328:	$row->{latest_species} = "<i><a href=\"?a=basicTaxonInfo&amp;taxon_no=$sp->{taxon_no}\">$sp->{taxon_name}</a></i>";
Classic.pm:362:		$row->{'random_names'} .= "<div style=\"float: left; clear: $clear; padding: 0.3em; padding-left: $padding; font-size: $fontsize;\"><a href=\"?a=basicTaxonInfo&amp;taxon_no=$g->{'taxon_no'}\" style=\"color: $blue\">".$g->{'taxon_name'}."</a></div>\n";
Classic.pm:436:				$row->{'taxon_links'} .= qq|<div class="verysmall collectionLink"><a class="homeBodyLinks" href="?a=basicTaxonInfo&amp;taxon_no=$s->{'taxon_no'}">$s->{'taxon_name'}</a></div>\n|;
Classic.pm:601:sub displayDownloadTaxonomyForm {
Classic.pm:615:sub getTaxonomyXML {
Classic.pm:621:    require DownloadTaxonomy;
Classic.pm:622:    DownloadTaxonomy::getTaxonomyXML($dbt,$q,$s,$hbo);
Classic.pm:625:sub displayDownloadTaxonomyResults {
Classic.pm:630:    require DownloadTaxonomy;
Classic.pm:635:        DownloadTaxonomy::displayITISDownload($dbt,$q,$s);
Classic.pm:637:        DownloadTaxonomy::displayPBDBDownload($dbt,$q,$s);
Classic.pm:696:sub fastTaxonCount	{
Classic.pm:706:	Report::fastTaxonCount($dbt,$q,$s,$hbo);
Classic.pm:913:			PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:923:			PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:932:			PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:940:	#  ever likely to happen if basicTaxonInfo isn't called
Classic.pm:1638:sub jsonTaxon	{
Classic.pm:1642:	my $t = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_name'=>$q->param('name')},['all']);
Classic.pm:1643:	my $author = PBDB::TaxonInfo::formatShortAuthor($t);
Classic.pm:1900:        processTaxonSearch($dbt,$hbo,$q,$s);
Classic.pm:1916:sub submitTaxonSearch {
Classic.pm:1921:    processTaxonSearch($dbt, $hbo, $q, $s);
Classic.pm:1925:sub processTaxonSearch {
Classic.pm:1936:        if (! Taxon::validTaxonName($q->param('taxon_name'))) {
Classic.pm:2003:    my @results = PBDB::TaxonInfo::getTaxa($dbt,\%options,['*']);
Classic.pm:2011:                my ($g,$sg,$sp) = Taxon::splitTaxon($q->param('taxon_name'));
Classic.pm:2048:                            my ($g,$sg,$sp) = Taxon::splitTaxon($q->param('taxon_name'));
Classic.pm:2050:                                my ($t_g,$t_sg,$t_sp) = Taxon::splitTaxon($typo);
Classic.pm:2075:                        my @full_rows = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name},['*']);
Classic.pm:2078:                                my ($name,$authority) = Taxon::formatTaxon($dbt,$full_row,'return_array'=>1);
Classic.pm:2088:                        print "<li><a href=\"$WRITE_URL?a=submitTaxonSearch&goal=authority&taxon_name=$g&amp;skip_typo_check=1\">$none</a> - create a new record for this genus";
Classic.pm:2090:                        print "<li><a href=\"$WRITE_URL?a=submitTaxonSearch&goal=authority&taxon_name=".$q->param('taxon_name')."&amp;skip_typo_check=1\">$none</a> - create a new taxon record";
Classic.pm:2106:                    Taxon::displayAuthorityForm($dbt, $hbo, $s, $q);
Classic.pm:2124:                    my $full_row = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'taxon_no'}},['*']);
Classic.pm:2125:                    my ($name,$authority) = Taxon::formatTaxon($dbt,$full_row,'return_array'=>1);
Classic.pm:2141:                    push my @errormessages , "The taxon '" . $q->param('taxon_name') . "' doesn't exist in the database.<br>Please <a href=\"$WRITE_URL?a=submitTaxonSearch&goal=authority&taxon_name=".$q->param('taxon_name')."\">enter</a> an authority record for this taxon first.";
Classic.pm:2152:        $q->param('called_by'=> 'processTaxonSearch');
Classic.pm:2153:        Taxon::displayAuthorityForm($dbt, $hbo, $s, $q);
Classic.pm:2180:    			print "<p class=\"pageTitle\">Taxonomic names from ".PBDB::Reference::formatShortRef($dbt,$q->param("reference_no"))."</p>\n";
Classic.pm:2191:            my ($name,$authority) = Taxon::formatTaxon($dbt, $row,'return_array'=>1);
Classic.pm:2240:# startTaxonomy separated out into startAuthority and startOpinion 
Classic.pm:2247:sub displayAuthorityTaxonSearchForm {
Classic.pm:2261:    $vars{'action'} = "submitTaxonSearch";
Classic.pm:2285:	Taxon::displayAuthorityForm($dbt, $hbo, $s, $q);	
Classic.pm:2295:	Taxon::submitAuthorityForm($dbt,$hbo, $s, $q);
Classic.pm:2469:	Taxon::entangledNamesForm($dbt,$hbo,$s,$q);
Classic.pm:2478:	Taxon::disentangleNames($dbt,$hbo,$s,$q);
Classic.pm:2482:sub submitTypeTaxonSelect {
Classic.pm:2487:	Taxon::submitTypeTaxonSelect($dbt, $s, $q);
Classic.pm:2613:## Taxon Info Stuff
Classic.pm:2615:sub beginTaxonInfo{
Classic.pm:2620:    PBDB::TaxonInfo::searchForm($hbo, $q);
Classic.pm:2624:sub checkTaxonInfo {
Classic.pm:2631:        $q->param('taxa' => @{PBDB::TaxonInfo::getMatchingSubtaxa($dbt,$q,$s,$hbo)} );
Classic.pm:2633:            PBDB::TaxonInfo::searchForm($hbo,$q,1);
Classic.pm:2635:            PBDB::TaxonInfo::checkTaxonInfo($q, $s, $dbt, $hbo);
Classic.pm:2641:        PBDB::TaxonInfo::getMatchingSubtaxa($dbt,$q,$s,$hbo);
Classic.pm:2648:        PBDB::TaxonInfo::checkTaxonInfo($q, $s, $dbt, $hbo);
Classic.pm:2653:sub displayTaxonInfoResults {
Classic.pm:2658:	PBDB::TaxonInfo::displayTaxonInfoResults($dbt,$s,$q,$hbo);
Classic.pm:2663:sub basicTaxonInfo	{
Classic.pm:2667:	PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:2670:## END Taxon Info Stuff
Classic.pm:2675:# 	PBDB::TaxonInfo::beginFirstAppearance($hbo, $q, '');
Classic.pm:2681:# 	PBDB::TaxonInfo::displayFirstAppearance($q, $s, $dbt, $hbo);
Classic.pm:2794:#     print $hbo->populateHTML('search_taxon_form',[$page_title,'submitTaxonSearch',$goal],['page_title','action','goal']);
Classic.pm:2858:    print $hbo->populateHTML('search_taxon_form',[$page_title,'submitTaxonSearch',$goal],['page_title','action','goal']);
Classic.pm:2869:    print $hbo->populateHTML('search_taxon_form',[$page_title,'submitTaxonSearch',$goal],['page_title','action','goal']);
Classic.pm:3262:        $occ_row = formatTaxonNameInput($occ_row);
Classic.pm:3278:            $re_row = formatTaxonNameInput($re_row);
Classic.pm:3338:sub formatTaxonNameInput	{
Classic.pm:3567:        my $show_name = PBDB::CollectionEntry::formatOccurrenceTaxonName(\%hash);
Classic.pm:3811:            $taxon_no = Taxon::getBestClassification($dbt,$genus_reso,$genus_name,$subgenus_reso,$subgenus_name,$species_reso,$species_name);
Classic.pm:3813:                my @matches = Taxon::getBestClassification($dbt,$genus_reso,$genus_name,$subgenus_reso,$subgenus_name,$species_reso,$species_name);
Classic.pm:3902:        my $taxon_name = PBDB::CollectionEntry::formatOccurrenceTaxonName({
Classic.pm:3918:                    my $t = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no},['taxon_no','taxon_rank','taxon_name','author1last','author2last','otherauthors','pubyr']);
Classic.pm:3919:                    my $authority = Taxon::formatTaxon($dbt,$t);
Classic.pm:4365:			$fields{'taxon_no'} = Taxon::getBestClassification($dbt,\%fields);
Classic.pm:4410:				Taxon::propagateAuthorityInfo($dbt,$_) foreach @to_update;
Classic.pm:4435:	my $taxon_name = PBDB::CollectionEntry::formatOccurrenceTaxonName(\%fields);
Classic.pm:4550:                push @occurrences_to_delete, [$fields{$OCCURRENCE_NO},PBDB::CollectionEntry::formatOccurrenceTaxonName($old_row),$i];
Classic.pm:4645:	my @new_genera = TypoChecker::newTaxonNames($dbt,\@genera,'genus_name');
Classic.pm:4646:	my @new_subgenera =  TypoChecker::newTaxonNames($dbt,\@subgenera,'subgenus_name');
Classic.pm:4647:	my @new_species =  TypoChecker::newTaxonNames($dbt,\@species,'species_name');
Classic.pm:4655:    	$return = PBDB::CollectionEntry::buildTaxonomicList($dbt,$hbo,$s,{$COLLECTION_NO=>$collection_no, 'hide_reference_no'=>$coll->{'reference_no'},'new_genera'=>\@new_genera, 'new_subgenera'=>\@new_subgenera, 'new_species'=>\@new_species, 'do_reclassify'=>1, 'warnings'=>\@warnings, 'save_links'=>$links });
Classic.pm:4657:    	$return = PBDB::CollectionEntry::buildTaxonomicList($dbt,$hbo,$s,{'occurrence_list'=>\@occurrences, 'new_genera'=>\@new_genera, 'new_subgenera'=>\@new_subgenera, 'new_species'=>\@new_species, 'do_reclassify'=>1, 'warnings'=>\@warnings, 'save_links'=>$links });
Classic.pm:4768:		my ($genus,$subgenus,$species) = Taxon::splitTaxon($q->param('taxon_name'));
Classic.pm:5257:sub displayTaxonomicNamesAndOpinions {
Classic.pm:5266:            processTaxonSearch($dbt, $hbo, $q, $s);
Classic.pm:5379:        print "<a href=\"?a=basicTaxonInfo&taxon_no=$i\">$i</a> ";
Classification.pm:3:use PBDB::TaxonInfo;
Classification.pm:73:            my @taxon_nos = PBDB::TaxonInfo::getTaxonNos($dbt,$hash_key);
Classification.pm:84:            $taxon_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
Classification.pm:103:        $child_no = PBDB::TaxonInfo::getSeniorSynonym($dbt,$child_no,$restrict_to_reference_no);
Classification.pm:105:        my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:130:            $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:138:                my $taxon= PBDB::TaxonInfo::getMostRecentSpelling($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:147:                my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$child_no});
Classification.pm:300:            my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt, $child->{'child_no'});
Classification.pm:337:        my @taxon_nos = PBDB::TaxonInfo::getTaxonNos($dbt,$taxon_name_or_no);
Classification.pm:346:    $taxon_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
Classification.pm:387:#       sort_alphabetical: an array sorted in alphabetical fashion, suitable for TaxonInfo.pm or Confidence.pm
Classification.pm:404:    my $orig_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no,$restrict_to_ref);
Classification.pm:405:    my $ss_no = PBDB::TaxonInfo::getSeniorSynonym($dbt,$orig_no,$restrict_to_ref);
Classification.pm:444:        my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$orig_no,{'reference_no'=>$restrict_to_ref});
Classification.pm:480:    my $taxon = PBDB::TaxonInfo::getMostRecentSpelling($dbt,$orig_no,{'reference_no'=>$restrict_to_ref});
Collection.pm:5:#  buildTaxonomicList, formatOccurrenceTaxonName, getSynonymName,
Collection.pm:18:use PBDB::Taxon;
Collection.pm:19:use PBDB::TaxonInfo;
Collection.pm:34:#   taxon_list: A list of taxon_nos to filter by (i.e. as passed by TaxonInfo)
Collection.pm:161:            my ($genus,$subgenus,$species) = PBDB::Taxon::splitTaxon($options{'taxon_name'});
Collection.pm:876:sub getTaxonomicList	{
Collection.pm:1128:	#  in cases where basicTaxonInfo searches were skipped JA 27.5.11
Collection.pm:1142:				my $orig = TaxonInfo::getOriginalCombination($dbt,$taxon->{'taxon_no'});
Collection.pm:1143:				my $ss = TaxonInfo::getSeniorSynonym($dbt,$orig);
Collection.pm:1144:				my @subnames = TaxonInfo::getAllSynonyms($dbt,$ss);
Collection.pm:1591:	# the following is basically a complete rewrite of buildTaxonomicList
Collection.pm:1594:	my @occs = @{getTaxonomicList($dbt,[$c->{'collection_no'}])};
Collection.pm:1612:				$s->{'good'} = "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$s->{'synonym_no'}\">".$s->{'good'}."</a>";
Collection.pm:1639:	print "<p class=\"large\" style=\"margin-top: 0.5em; margin-bottom: 0em;\">Taxonomic list</p>\n\n";
Collection.pm:1688:			$o->{'formatted'} = "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$o->{'taxon_no'}\">".$o->{'formatted'}."</a>";
Collection.pm:1694:			$o->{'formatted'} = "<a href=\"?a=basicTaxonInfo&amp;taxon_name=$name\">".$o->{'formatted'}."</a>";
Collection.pm:1718:		my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$o->{'taxon_no'}},['taxon_name','taxon_rank','pubyr','common_name']);
Collection.pm:1825:	    for my $c ( @{getTaxonomicList($dbt,\@coll_nos)} )	{
Collection.pm:2261:	print "<tr><th class=dataTableColumnLeft>Taxon</th>";
CollectionEntry.pm:9:use PBDB::Taxon;
CollectionEntry.pm:10:use PBDB::TaxonInfo;
CollectionEntry.pm:651:    #  pages returned by TaxonInfo anyway JA 2.10.09
CollectionEntry.pm:652:    my $taxa_list = buildTaxonomicList($dbt,$hbo,$s,{'collection_no'=>$coll->{'collection_no'},'hide_reference_no'=>$coll->{'reference_no'}});
CollectionEntry.pm:1072:sub buildTaxonomicList {
CollectionEntry.pm:1111:	dbg("buildTaxonomicList sql: $sql");
CollectionEntry.pm:1173:				my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$rowref->{'taxon_no'}},['taxon_no','taxon_name','common_name','taxon_rank','author1last','author2last','otherauthors','pubyr','reference_no','ref_is_authority']);
CollectionEntry.pm:1177:					my $orig_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon->{'taxon_no'});
CollectionEntry.pm:1195:			$rowref->{'taxon_name'} = formatOccurrenceTaxonName($rowref);
CollectionEntry.pm:1212:		#  HTMLFormattedTaxonomicList; the correct way to do it was
CollectionEntry.pm:1256:                    my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$rowref->{'taxon_no'}},['taxon_name','common_name','taxon_rank','pubyr']);
CollectionEntry.pm:1270:                        my @all_matches = PBDB::Taxon::getBestClassification($dbt,$rowref);
CollectionEntry.pm:1349:        # Taxonomic list header
CollectionEntry.pm:1351:                  "  <span class=\"displayPanelHeader\">Taxonomic list</span>\n" .
CollectionEntry.pm:1355:            push @warnings, "Taxon names in <b>bold</b> are new to the occurrences table. Please make sure there aren't any typos. If there are, DON'T hit the back button; click the edit link below.";
CollectionEntry.pm:1485:		document.getElementById(link_id).innerHTML = '<a href="?a=basicTaxonInfo' + link_action + '&amp;is_real_user=1">' + taxon_name + '</a>';
CollectionEntry.pm:1572:} # end sub buildTaxonomicList()
CollectionEntry.pm:1574:sub formatOccurrenceTaxonName {
CollectionEntry.pm:1694:    my $orig_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
CollectionEntry.pm:1695:    my ($ss_taxon_no,$status) = PBDB::TaxonInfo::getSeniorSynonym($dbt,$orig_no,'','yes');
CollectionEntry.pm:1700:    my $spelling = PBDB::TaxonInfo::getMostRecentSpelling($dbt,$ss_taxon_no,{'get_spelling_reason'=>1});
CollectionEntry.pm:1756:		$row->{'taxon_name'} = "&nbsp;&nbsp;&nbsp;&nbsp;= ".formatOccurrenceTaxonName($row);
CollectionEntry.pm:1764:			$taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'taxon_no'}},['taxon_no','taxon_name','common_name','taxon_rank','author1last','author2last','otherauthors','pubyr','reference_no','ref_is_authority']);
CollectionEntry.pm:1777:                my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'taxon_no'}},['taxon_name','taxon_rank','pubyr']);
CollectionEntry.pm:1806:                    my @all_matches = PBDB::Taxon::getBestClassification($dbt,$row);
CollectionQuery.pm:585:    # 	    $output .= $self->emitTaxonJSON($parent_row, undef, $is_first_parent);
Confidence.pm:9:use PBDB::TaxonInfo;
Confidence.pm:47:        my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$homonym_name, undef, 1);
Confidence.pm:313:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon, undef, 1);
Confidence.pm:382:                        my ($best_genus,$best_subgenus,$best_species) = Taxon::splitTaxon($best_name_ref->{'taxon_name'});
Confidence.pm:384:                            ($genus,$subgenus) = Taxon::splitTaxon($subgenus_ref->{'taxon_name'});
Confidence.pm:503:                my ($best_genus,$best_subgenus,$best_species) = Taxon::splitTaxon($best_name_ref->{'taxon_name'});
Confidence.pm:505:                    ($genus,$subgenus) = Taxon::splitTaxon($subgenus_ref->{'taxon_name'});
Confidence.pm:1808:                my ($genus,$subgenus,$species) = Taxon::splitTaxon($taxon_name);
Confidence.pm:1855:sub _dumpTaxonObject {
DataQuery.pm:6:# TaxonQuery.pm and CollectionQuery.pm. 
Download.pm:5:use PBDB::TaxonInfo;
Download.pm:8:use PBDB::Taxon;
Download.pm:29:my @occTaxonFieldNames = qw(genus_reso genus_name subgenus_reso subgenus_name species_reso species_name taxon_no);
Download.pm:31:my @reidTaxonFieldNames = qw(genus_reso genus_name subgenus_reso subgenus_name species_reso species_name taxon_no);
Download.pm:218:        $vars{'title'} = ( $q->param('taxon_name') ) ? "Taxonomic occurrences of$interval ".$q->param('taxon_name') : "Taxonomic occurrences";
Download.pm:441:        $html .= $self->retellOptionsRow ( "Taxon to include", $q->param("taxon_name") );
Download.pm:446:        $html .= $self->retellOptionsRow ( "Taxon to exclude", $q->param("exclude_taxon_name") );
Download.pm:641:            foreach my $field ( @occTaxonFieldNames) {
Download.pm:650:            foreach my $field ( @reidTaxonFieldNames ) {
Download.pm:1910:			my ($g,$sg,$s,$ss) = Taxon::splitTaxon($name{$sen});
Download.pm:2039:            my $taxa = $self->getTaxonString($q->param('abundance_taxon_name'),'');
Download.pm:2103:            $taxon_where = $self->getTaxonString($q->param('taxon_name'),$q->param('exclude_taxon_name'));
Download.pm:2548:                foreach my $field (@reidFieldNames,@reidTaxonFieldNames) {
Download.pm:2561:                my ($genus,$subgenus,$species,$subspecies) = Taxon::splitTaxon($name{$synonym{$row->{'o.taxon_no'}}});
Download.pm:3149:        foreach (@occTaxonFieldNames) {
Download.pm:3154:        foreach (@reidTaxonFieldNames) {
Download.pm:3276:    foreach (@occTaxonFieldNames,'plant_organ','plant_organ2') {
Download.pm:4256:# renamed from getGenusNames to getTaxonString to reflect changes in how this works PS 01/06/2004
Download.pm:4262:sub getTaxonString {
Download.pm:4282:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon,'','lump');
Download.pm:4290:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon,'','lump');
Download.pm:4305:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon,'','lump');
DownloadTaxonomy.pm:1:package PBDB::DownloadTaxonomy;
DownloadTaxonomy.pm:8:use PBDB::TaxonInfo;
DownloadTaxonomy.pm:22:sub getTaxonomyXML	{
DownloadTaxonomy.pm:28:	#  getTaxonomicNames or getTaxonomicOpinions because the allowed query
DownloadTaxonomy.pm:141:				print "<url>http://paleodb.org/classic?action=basicTaxonInfo&amp;taxon_no=$p->{taxon_no}&amp;is_real_user=0</url>\n";
DownloadTaxonomy.pm:166:						print "<url>http://paleodb.org/classic?action=basicTaxonInfo&amp;taxon_no=$i->{taxon_no}&amp;is_real_user=0</url>\n";
DownloadTaxonomy.pm:245:	print "<url>http://paleodb.org/classic?action=basicTaxonInfo&amp;taxon_no=$n->{taxon_no}&amp;is_real_user=0</url>\n";
DownloadTaxonomy.pm:331:        my @taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$options{'taxon_name'},'match_subgenera'=>1,'remove_rank_change'=>1});
DownloadTaxonomy.pm:333:            push @errors, "Taxon name is a homonym";
DownloadTaxonomy.pm:335:            push @errors, "Taxon name not found";
DownloadTaxonomy.pm:363:        print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Please try again</a></h5></div><br>";
DownloadTaxonomy.pm:367:    print "<div align=\"center\"><p class=\"pageTitle\">Taxonomy download results</p></div>";
DownloadTaxonomy.pm:380:    my ($names,$taxon_file_message) = getTaxonomicNames($dbt,$http_dir,\%people,\%options);
DownloadTaxonomy.pm:545:    my ($opinions,$opinion_file_message) = getTaxonomicOpinions($dbt,$http_dir,\%people,\%options); 
DownloadTaxonomy.pm:565:        print "<p>No reference links could be downloaded because no search criteria related to \"Taxonomic opinions\" were entered</p>";
DownloadTaxonomy.pm:634:    print "<div align=\"center\"><h5><a href='/public/taxa_downloads/$dirname.tar.gz'>Download file</a> - <a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Do another download</a></h5></div><br>";
DownloadTaxonomy.pm:666:        my @taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$options{'taxon_name'},'match_subgenera'=>1,'remove_rank_change'=>1});
DownloadTaxonomy.pm:668:            push @errors, "Taxon name is a homonym";
DownloadTaxonomy.pm:670:            push @errors, "Taxon name not found";
DownloadTaxonomy.pm:706:        print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Please try again</a></h5></div><br>";
DownloadTaxonomy.pm:710:    print "<div align=\"center\"><p class=\"pageTitle\">Taxonomy download results</p></div>";
DownloadTaxonomy.pm:731:    my ($opinions,$opinion_file_message) = getTaxonomicOpinions($dbt,$http_dir,\%people,\%options);
DownloadTaxonomy.pm:774:    my ($names,$taxon_file_message) = getTaxonomicNames($dbt,$http_dir,\%people,\%options);
DownloadTaxonomy.pm:897:  print "<div align=\"center\"><h5><a href=\"$READ_URL?action=displayDownloadTaxonomyForm\">Do another download</a></h5></div><br>";
DownloadTaxonomy.pm:912:sub getTaxonomicNames {
DownloadTaxonomy.pm:930:        my %nomen_children = %{TaxonInfo::nomenChildren($dbt,\@children)};
DownloadTaxonomy.pm:1021:        dbg("getTaxonomicNames called: ($sql)");
DownloadTaxonomy.pm:1041:            my $orig_no = TaxonInfo::getOriginalCombination($dbt,$row->{'spelling_no'});
DownloadTaxonomy.pm:1109:sub getTaxonomicOpinions {
DownloadTaxonomy.pm:1127:        my %nomen_children = %{TaxonInfo::nomenChildren($dbt,\@children)};
DownloadTaxonomy.pm:1218:        dbg("getTaxonomicOpinions called: ($sql)");
FossilRecord.pm:3:use PBDB::Taxon;
FossilRecord.pm:14:use PBDB::TaxonInfo;
FossilRecord.pm:26:    my $page_title = "Taxonomic name search form"; 
FossilRecord.pm:34:# This is the front end for displayTaxonInfoResults - always use this instead if you want to 
FossilRecord.pm:47:        displayTaxon($dbt,$q,$s,$hbo);
FossilRecord.pm:102:            print "<td><a href=\"$READ_URL?action=checkTaxonInfo&taxon_no=$row->{taxon_no}\">$row->{taxon_name}</a></td>";
FossilRecord.pm:119:        my @results = TaxonInfo::getTaxa($dbt,$options,['taxon_no','taxon_rank','taxon_name','common_name','author1last','author2last','otherauthors','pubyr','pages','figures','comments']);   
FossilRecord.pm:124:                print "<center><p><a href=\"$WRITE_URL?action=submitTaxonSearch&amp;goal=authority&amp;taxon_name=".$q->param('taxon_name')."\"><b>Add taxonomic information</b></a></center>";
FossilRecord.pm:128:            displayTaxon($dbt,$q,$s,$hbo);
FossilRecord.pm:135:            print qq|<input type="hidden" name="action" value="checkTaxonInfo">|;
FossilRecord.pm:140:                my $authorityLine = Taxon::formatTaxon($dbt,$results[$i]);
FossilRecord.pm:153:# By the time we're here, we're gone through checkTaxonInfo and one of these scenarios has happened
FossilRecord.pm:159:sub displayTaxon {
FossilRecord.pm:176:    my $orig_taxon_no = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
FossilRecord.pm:177:    $taxon_no = TaxonInfo::getSeniorSynonym($dbt,$orig_taxon_no);
FossilRecord.pm:179:    my $taxon = TaxonInfo::getMostRecentSpelling($dbt,$taxon_no);
FossilRecord.pm:206:        my $orig_ss = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
FossilRecord.pm:207:        my $mrpo = TaxonInfo::getMostRecentClassification($dbt,$orig_ss);
FossilRecord.pm:214:            %disused = %{TaxonInfo::disusedNames($dbt,$ss_no)};
FossilRecord.pm:236:      onMouseOut="setState(2)">Taxonomic history</td>
FossilRecord.pm:269:		print TaxonInfo::displayTaxonClassification($dbt, $taxon_no, $taxon_name,$is_real_user);
FossilRecord.pm:276:        print TaxonInfo::displayRelatedTaxa($dbt, $taxon_no, $spelling_no, $taxon_name,$is_real_user);
FossilRecord.pm:277:    	print "<a href=\"$READ_URL?action=beginTaxonInfo\">".
FossilRecord.pm:280:            # Entered Taxon
FossilRecord.pm:285:                print "<a href=\"$WRITE_URL?action=submitTaxonSearch&amp;goal=authority&amp;taxon_no=-1&amp;taxon_name=$entered_name\">";
FossilRecord.pm:311:		print "<div align=\"center\"><h3>Taxonomic history</h3></div>\n";
FossilRecord.pm:313:        print TaxonInfo::displayTaxonHistory($dbt, $taxon_no, $is_real_user);
FossilRecord.pm:320:            my $interval_hash = TaxonInfo::getIntervalsData($dbt,$data);
FossilRecord.pm:321:            my ($lb,$ub,$minfirst,$max,$min) = TaxonInfo::calculateAgeRange($dbt,$data,$interval_hash);
FossilRecord.pm:347:    	print TaxonInfo::displaySynonymyList($dbt, $taxon_no);
FossilRecord.pm:357:		    print TaxonInfo::displayEcology($dbt,$taxon_no,$in_list);
FossilRecord.pm:812:                    Taxon::setOccurrencesTaxonNoByTaxon($dbt,$s->get('authorizer_no'),$id);
FossilRecord.pm:814:                $row->{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$row->{'parent_spelling_no'});
FossilRecord.pm:816:                $row->{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$row->{'parent_spelling_no'});
FossilRecord.pm:837:                Taxon::setOccurrencesTaxonNoByTaxon($dbt,$s->get('authorizer_no'),$id);
FossilRecord.pm:839:                my $t = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','pubyr','ref_is_authority','reference_no']); 
FossilRecord.pm:850:                    Taxon::propagateAuthorityInfo($dbt,$row->{'child_spelling_no'},1);
FossilRecord.pm:866:            $row->{'child_no'} = TaxonInfo::getOriginalCombination($dbt,$row->{'child_spelling_no'});
FossilRecord.pm:869:            my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_no'}});
FossilRecord.pm:915:    my %rank_order = %Taxon::rankToNum;
FossilRecord.pm:1236:        @taxa= TaxonInfo::getTaxa($dbt,{'taxon_no'=>$no},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','ref_is_authority','pubyr']);
FossilRecord.pm:1242:        @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name,'taxon_rank'=>$restrict_rank},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','ref_is_authority','pubyr']);
FossilRecord.pm:1267:            my $typo_list = join(", ",map {"<a target=\"_NEW\" href=\"$READ_URL?action=checkTaxonInfo&amp;taxon_no=$_->{taxon_no}\">$_->{taxon_name}</a>"} @matches);
FossilRecord.pm:1285:        my ($k,$v) = makeTaxonChoices($dbt,\@taxa);
FossilRecord.pm:1309:                my ($k,$v) = makeTaxonChoices($dbt,[$t]);
FossilRecord.pm:1323:                my ($k,$v) = makeTaxonChoices($dbt,[$t]);
FossilRecord.pm:1398:sub makeTaxonChoices {
FossilRecord.pm:1404:        my $taxon_description = describeTaxon($dbt,$t);
FossilRecord.pm:1417:    my @nos = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','ref_is_authority','pubyr']);
FossilRecord.pm:1424:            my $typo_list = join(", ",map {"<a target=\"_NEW\" href=\"$READ_URL?action=checkTaxonInfo&amp;taxon_no=$_->{taxon_no}\">$_->{taxon_name}</a>"} @matches);
FossilRecord.pm:1451:            my $taxon_description = describeTaxon($dbt,$t);
FossilRecord.pm:1517:sub describeTaxon {
Images.pm:6:use PBDB::TaxonInfo;
Images.pm:23:    my @results = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$q->param('taxon_no')});
Images.pm:277:	my @matches = TaxonInfo::getTaxonNos($dbt,$taxon_name,'','',$q->param('author'),$q->param('pubyr'),$q->param('type_body_part'),$q->param('preservation'));
Images.pm:295:		print qq|<div class="verysmall" style="float: left; clear; none; padding: 1.25em;">\n<a href="$READ_URL?a=basicTaxonInfo&taxon_no=$t->{taxon_name}"><img src="$path" style="width: 10em;"></a>\n<br>\n<i><a href="$READ_URL?a=basicTaxonInfo&taxon_no=$t->{taxon_no}">$t->{taxon_name}</a></i>\n</div>\n\n|;
Images.pm:319:            print "<tr><td>Original identification:</td><td><a target=\"_blank\" href=\"$READ_URL?action=basicTaxonInfo&taxon_no=$row->{taxon_no}\">".$row->{'taxon_name'}."</a></td></tr>\n";
Images.pm:320:            print "<tr><td>Current identification:</td><td><a target=\"_blank\" href=\"$READ_URL?action=basicTaxonInfo&taxon_no=$ss->{taxon_no}\">".$ss->{'taxon_name'}."</a></td></tr>\n";
Images.pm:322:            print "<tr><td>Current identification:</td><td><a target=\"_blank\" href=\"$READ_URL?action=basicTaxonInfo&taxon_no=$row->{taxon_no}\">".$row->{'taxon_name'}."</a></td></tr>\n";
Main.pm:32:use PBDB::TaxonInfo;
Main.pm:46:use PBDB::Taxon;  # slated for removal
Map.pm:171:                my @taxa = TaxonInfo::getTaxa($dbt, {'taxon_name'=>$taxon_name,'remove_rank_change'=>1});
Measurement.pm:25:#      taxon_list: an array ref of taxon_nos, like $in_list in TaxonInfo
Measurement.pm:28:#          only the taxon_no is known. used in TaxonInfo and in limited cases in Download
Measurement.pm:106:            @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$options{'taxon_name'}},['taxon_no']);
Measurement.pm:108:            @taxa = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$options{'taxon_no'}},['taxon_no']);
Measurement.pm:194:# See TaxonInfo or Download for examples of this function being called. i.e.:
Measurement.pm:367:# stolen from TaxonInfo::displayMeasurements, but greatly simplified with double join on
Measurement.pm:1071:	# much of this section is lifted from TaxonInfo::displayMeasurements
MeasurementEntry.pm:39:            @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$q->param('taxon_name'),'match_subgenera'=>1});
MeasurementEntry.pm:51:                        @taxon_nos = TaxonInfo::getAllSynonyms($dbt,$_->{'taxon_no'});
MeasurementEntry.pm:53:                        @taxon_nos = TaxonInfo::getAllSpellings($dbt,$_->{'taxon_no'});
MeasurementEntry.pm:252:        my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>int($q->param('taxon_no'))},[taxon_rank,taxon_name,extant]);
MeasurementEntry.pm:570:        my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>int($q->param('taxon_no'))},['taxon_rank','taxon_name','extant']);
MeasurementEntry.pm:856:        my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>int($q->param('taxon_no'))});
Nexusfile.pm:89:The value of this option may be either a single taxon_no value, a Taxon object, or a
Nexusfile.pm:96:The value of this option may be either a single taxon_no value, a Taxon
Nexusfile.pm:236:	my $t = TaxonInfo::getTaxa($dbt, { taxon_name => $options->{base_name} });
NexusfileWeb.pm:275:	    my $taxon_link = qq%<a href="?a=basicTaxonInfo&taxon_no=$nexusfile->{taxon_no}">$nexusfile->{taxon_name}</a>%;
NexusfileWeb.pm:291:		$line = encode('iso-8859-1', generateTaxonLink($t));
NexusfileWeb.pm:311:		$link = generateTaxonAddLink($t);
NexusfileWeb.pm:460:	    my $taxon_link = qq%<a href="?a=basicTaxonInfo&taxon_no=$nexusfile->{taxon_no}">$nexusfile->{taxon_name}</a>%;
NexusfileWeb.pm:477:		$line = encode('iso-8859-1', generateTaxonLink($t));
NexusfileWeb.pm:497:		$link = generateTaxonAddLink($t);
NexusfileWeb.pm:857:    my $href = qq^href="?a=basicTaxonInfo&taxon_no=$nexusfile->{taxon_no}"^;
NexusfileWeb.pm:891:# generateTaxonLink ( taxon )
NexusfileWeb.pm:895:sub generateTaxonLink {
NexusfileWeb.pm:902:    my $url = "$READ_URL?a=basicTaxonInfo&taxon_no=$t->{taxon_no}";
NexusfileWeb.pm:941:# generateTaxonAddLink ( taxon )
NexusfileWeb.pm:943:# Given a Taxon object, generate a link that will produce the Authority form
NexusfileWeb.pm:946:sub generateTaxonAddLink {
NexusfileWrite.pm:558:	    ($taxon) = TaxonInfo::getTaxa($dbt, { taxon_name => $search_name,
NexusfileWrite.pm:596:	my $containing_taxon = TaxonInfo::getContainerTaxon($dbt, \@taxa);
NexusfileWrite.pm:664:	my ($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $name });
NexusfileWrite.pm:677:		($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $1 });
NexusfileWrite.pm:681:		    ($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $1, match_subgenera => 1 });
NexusfileWrite.pm:694:		($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $name, match_subgenera => 1 });
Opinion.pm:133:	#  Taxon.pm)
Opinion.pm:162:        my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:174:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:184:        my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_no'}});
Opinion.pm:188:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:192:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:205:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:209:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:227:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:236:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:242:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:341:            my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$fields{'child_no'}});
Opinion.pm:342:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$fields{'child_spelling_no'}});
Opinion.pm:419:    my $childTaxon = Taxon->new($dbt,$fields{'child_no'});
Opinion.pm:420:    my $childName = $childTaxon->get('taxon_name');
Opinion.pm:421:    my $childRank = $childTaxon->get('taxon_rank');
Opinion.pm:441:        @child_spelling_nos = TaxonInfo::getTaxonNos($dbt,$childSpellingName,$childSpellingRank);
Opinion.pm:484:            @parent_nos = TaxonInfo::getTaxonNos($dbt,$parentName);
Opinion.pm:511:            my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent_no},['taxon_no','taxon_name','taxon_rank','author1last','author2last','otherauthors','pubyr']);
Opinion.pm:520:                my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent_no});
Opinion.pm:523:            my @spellings = TaxonInfo::getAllSpellings($dbt,$parent_no);
Opinion.pm:596:        my $parentTaxon = ($selected || ($isNewEntry && $childRank =~ /species/)) ? $parentName : "";
Opinion.pm:597:        $belongs_to_row .= qq|<input name="belongs_to_parent" size="24" value="$parentTaxon">|;
Opinion.pm:604:        my @taxa = Taxon::getTypeTaxonList($dbt,$fields{'child_no'},$fields{'reference_no'});
Opinion.pm:660:			my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$child_spelling_no},['taxon_no','taxon_name','taxon_rank','author1last','author2last','otherauthors','pubyr']);
Opinion.pm:664:			my $orig_no = TaxonInfo::getOriginalCombination($dbt,$child_spelling_no);
Opinion.pm:667:				my $orig = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$orig_no});
Opinion.pm:685:        my ($genusName,$subGenusName) = Taxon::splitTaxon($childName);
Opinion.pm:721:	my %rankToNum = %Taxon::rankToNum;
Opinion.pm:760:        $fields{'child_no'} = TaxonInfo::getOriginalCombination($dbt,$q->param('child_no')); 
Opinion.pm:769:	my $childTaxon = Taxon->new($dbt,$fields{'child_no'});
Opinion.pm:770:	my $childName = $childTaxon->get('taxon_name');
Opinion.pm:771:	my $childRank = $childTaxon->get('taxon_rank');
Opinion.pm:930:		if ( $ref && $childTaxon->pubyr() > $ref->get('pubyr') ) {
Opinion.pm:931:			$errors->add("The publication year (".$ref->get('pubyr').") for this opinion can't be earlier than the year the taxon was named (".$childTaxon->pubyr().")");	
Opinion.pm:933:        if ( $childTaxon->pubyr() > $q->param('pubyr') && $q->param('pubyr') > 1700 ) {
Opinion.pm:934:			$errors->add("The publication year (".$q->param('pubyr').") for the authority listed in this opinion can't be earlier than the year the taxon was named (".$childTaxon->pubyr().")");	
Opinion.pm:952:        $fields{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$fields{'parent_spelling_no'});
Opinion.pm:970:            my @parents = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parentName,'ignore_common_name'=>"YES"}); 
Opinion.pm:977:                $fields{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$fields{'parent_spelling_no'});
Opinion.pm:1007:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$q->param('child_spelling_no')});
Opinion.pm:1024:            my @spellings = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$childSpellingName,'taxon_rank'=>$childSpellingRank,'ignore_common_name'=>"YES"}); 
Opinion.pm:1045:        my $new_orig = TaxonInfo::getOriginalCombination($dbt,$fields{'parent_spelling_no'});
Opinion.pm:1046:        $childTaxon = Taxon->new($dbt,$new_orig);
Opinion.pm:1047:        $childName = $childTaxon->get('taxon_name');
Opinion.pm:1048:        $childRank = $childTaxon->get('taxon_rank');
Opinion.pm:1259:    my $rankFromSpaces = Taxon::guessTaxonRank($childSpellingName);
Opinion.pm:1348:        my ($new_taxon_no,$set_warnings) = Taxon::addSpellingAuthority($dbt,$s,$fields{'child_no'},$childSpellingName,$childSpellingRank,$fields{'reference_no'});
Opinion.pm:1400:        Taxon::propagateAuthorityInfo($dbt,$q,$fields{'child_no'});
Opinion.pm:1488:    my $auth = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$fields{child_spelling_no}},['author1last','author2last','otherauthors','pubyr']);
Opinion.pm:1515:    # See Taxon::displayTypeTaxonSelectForm for details
Opinion.pm:1516:    Taxon::displayTypeTaxonSelectForm($dbt,$s,$fields{'type_taxon'},$fields{'child_no'},$childName,$childRank,$resultReferenceNumber,$end_message);
Opinion.pm:1529:    my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$new_orig_no});
Opinion.pm:1532:        $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:1534:        $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:1536:    my $is_misspelling = TaxonInfo::isMisspelling($dbt,$row->{'child_spelling_no'});
Opinion.pm:1566:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$child_spelling_no);
Opinion.pm:1620:	my @entangled = ( TaxonInfo::getSeniorSynonym($dbt,$taxon_no) );
Opinion.pm:1623:		my $ss = TaxonInfo::getSeniorSynonym($dbt,$p->{'parent_no'});
Opinion.pm:1629:		my @in_list = TaxonInfo::getAllSynonyms($dbt,$e);
Opinion.pm:1638:				@in_list = TaxonInfo::getAllSpellings($dbt,$e);
Opinion.pm:1650:# Moved/Adapted from Taxon::displayOpinionChoiceForm PS 01/24/2004
Opinion.pm:1660:        my $orig_no = TaxonInfo::getOriginalCombination($dbt,$child_no);
Opinion.pm:1666:        my $t = Taxon->new($dbt,$child_no);
PrintHierarchy.pm:4:use PBDB::TaxonInfo;
PrintHierarchy.pm:102:		$title = TaxonInfo::formatShortAuthor( ${$dbt->getData($sql)}[0] );
PrintHierarchy.pm:146:		$title = "the ".$taxa[0]->{'taxon_rank'}." ".TaxonInfo::italicize( $taxa[0] );
PrintHierarchy.pm:240:		print OUT "$t->{'taxon_rank'},\"$t->{'taxon_name'}\",\"".TaxonInfo::formatShortAuthor($t)."\",\"$t->{'common_name'}\",\"$t->{'status'}\",$extant\n";
PrintHierarchy.pm:242:		my $name = $shortranks{$t->{'taxon_rank'}}." "."$extant<a href=\"$READ_URL?action=basicTaxonInfo&amp;taxon_no=$t->{taxon_no}\">".TaxonInfo::italicize($t)."</a>";
PrintHierarchy.pm:244:			$name .= " ".TaxonInfo::formatShortAuthor($t);
PrintHierarchy.pm:255:			print qq|    <div id="n$t->{taxon_no}" class="classTaxon" style="margin-bottom: $firstMargin;" onClick="showChildren('$t->{taxon_no}','$list');">|;
PrintHierarchy.pm:257:			print qq|    <div id="n$t->{taxon_no}" class="classTaxon">|;
PrintHierarchy.pm:278:				print OUT "$t->{'taxon_rank'},\"$t->{'taxon_name'}\",\"".TaxonInfo::formatShortAuthor($t)."\",\"$t->{'common_name'}\",\"$t->{'status'}\",$extant\n";
PrintHierarchy.pm:281:			push @badList , TaxonInfo::italicize($_)." ".TaxonInfo::formatShortAuthor($_)." [".$_->{'status'}."]" foreach @{$invalids{$t->{'taxon_no'}}};
PrintHierarchy.pm:290:		print qq|<form method="POST" action="$READ_URL" name="doDownloadTaxonomy">
PrintHierarchy.pm:291:<input type="hidden" name="action" value="displayDownloadTaxonomyResults">
PrintHierarchy.pm:302:		print ' - <a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download</a> authority and opinion data for these taxa';
Reclassify.pm:59:        my ($genus,$subgenus,$species,$subspecies) = Taxon::splitTaxon($q->param('taxon_name'));
Reclassify.pm:123:            print "<tr><th class=\"large\">Taxon name</th><th colspan=2 class=\"large\" style=\"text-align: left; padding-left: 2em;\">Classification based on</th></tr>";
Reclassify.pm:155:            my @all_matches = Taxon::getBestClassification($dbt,$o);
Reclassify.pm:326:        print "<tr><th class=\"large\">Taxon</th><th class=\"large\">Classification based on</th></tr>";
Reclassify.pm:334:        print "<tr><th class=\"large\">Taxon</th><th class=\"large\">Classification based on</th></tr>";
Reclassify.pm:459:        my $t = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$m->{'taxon_no'}},['taxon_no','taxon_name','taxon_rank','author1last','author2last','otherauthors','pubyr']);
Reclassify.pm:461:        my $authority = Taxon::formatTaxon($dbt,$t);
Reference.pm:593:        $html .= "<tr><td class=\"fieldName\">Taxonomy: </td><td>&nbsp;$ref->{'basis'}</td></tr>";
Reference.pm:621:            my $link = 'a=basicTaxonInfo&taxon_no=';
Reference.pm:627:            $html .= qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no&display=authorities">|;
Reference.pm:632:        print $box->(qq'Taxonomic names ($authority_count)',$html);
Reference.pm:656:            $html .= qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no&display=opinions">|;
Reference.pm:666:	print $box->(qq'Taxonomic opinions ($opinion_count) $class_link',$html);
Reference.pm:673:		push @taxa , "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">$_->{'taxon_name'}</a>" foreach @taxon_refs;
Reference.pm:696:	    $line .= qq% (<a href="?a=basicTaxonInfo&taxon_no=$taxon_no">$taxon_name</a>)% if $taxon_name;
Reference.pm:844:		push @chunks , qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no">$authority_count taxonomic name$plural</a>|;
Reference.pm:860:		push @chunks , qq|<a href="?a=displayTaxonomicNamesAndOpinions&reference_no=$reference_no">$opinion_total taxonomic opinion$plural</a>|;
Reference.pm:870:		push @taxa , "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">$_->{'taxon_name'}</a>" foreach @taxon_refs;
ReferenceEntry.pm:538:            <li>Add or edit all the <a href="#" onClick="popup = window.open('$WRITE_URL?a=displayAuthorityTaxonSearchForm', 'blah', 'left=100,top=100,height=700,width=700,toolbar=yes,scrollbars=yes,resizable=yes');">taxonomic names</a>, especially if they are new or newly combined
Report.pm:708:                my @taxon_nos = TaxonInfo::getTaxonNos($dbt, $taxon, undef, 1);
Report.pm:1122:			print qq|<td style=\"padding-left: 1em; padding-right: 1em;\"><a href="$READ_URL?action=checkTaxonInfo&amp;taxon_name=$linkname&amp;is_real_user=1">$displayname</a></td>|;
Report.pm:1165:sub fastTaxonCount	{
Report.pm:1170:  <p class="pageTitle">Taxon counts</p>
Report.pm:1357:		print "<div align=\"center\"><a href=\"$READ_URL?action=fastTaxonCount\">Count more taxa</a></div>\n\n";
Review.pm:462:	$text =~ s/\[\[taxon /<a href="$READ_URL\?a=basicTaxonInfo&amp;taxon_name=/g;
Strata.pm:4:use PBDB::TaxonInfo;
Strata.pm:38:    # Also important for having TaxonInfo::doCollections return what we want
Strata.pm:301:    print TaxonInfo::doCollections($dbt, $s, $dataRows, '' ,'', '','for_strata_module');
Strata.pm:302:#    print TaxonInfo::doCollections($q, $dbt, $s, '', '', "for_strata_module");
TaxaCache.pm:28:use PBDB::TaxonInfo;
TaxaCache.pm:76:            my $orig = TaxonInfo::getOriginalCombination($dbt, $bad->{'taxon_no'});
TaxaCache.pm:77:            TaxonInfo::getMostRecentClassification($dbt,$orig,{'use_synonyms'=>'no'});
TaxaCache.pm:291:#    my $range_op = TaxonInfo::getMostRecentClassification($dbt,$synonym_no,{'strat_range'=>1});
TaxaCache.pm:407:# belong anywhere.  Should be called when creating a new authority (Taxon.pm) 
TaxaCache.pm:431:# its from Taxon.pm or Opinion.pm.  Its smart enough not to move stuff around if it doesn't have
TaxaCache.pm:447:    $child_no = TaxonInfo::getOriginalCombination($dbt,$child_no);
TaxaCache.pm:476:    my $mrpo = TaxonInfo::getMostRecentClassification($dbt,$child_no,{'recompute'=>'yes'});
TaxaCache.pm:482:    my @spellings = TaxonInfo::getAllSpellings($dbt,$child_no);
TaxaCache.pm:532:    my $spelling = TaxonInfo::getMostRecentSpelling($dbt,$child_no);
TaxaCache.pm:536:    my $range_op = TaxonInfo::getMostRecentClassification($dbt,$child_no,{'strat_range'=>1});
TaxaCache.pm:563:	my $senior_synonym_no = TaxonInfo::getSeniorSynonym($dbt,$child_no);
TaxaCache.pm:564:	my $senior_synonym_spelling = TaxonInfo::getMostRecentSpelling($dbt,$senior_synonym_no);
TaxaCache.pm:579:        my $parent_spelling = TaxonInfo::getMostRecentSpelling($dbt,$new_parent_no);
TaxaCache.pm:655:        my $popinion = TaxonInfo::getMostRecentClassification($dbt,$parent_no,{'use_synonyms'=>'no'});
TaxaCache.pm:767:        # Taxon might have been reclassified, so change it up for self and 
TaxaCache.pm:1094:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
TaxaCache.pm:1095:    my $last_op = TaxonInfo::getMostRecentClassification($dbt,$orig_no);
TaxaCache.pm:1101:            my $last_parent_op = TaxonInfo::getMostRecentClassification($dbt,$orig_no,{'exclude_nomen'=>1}); 
Taxon.pm:12:# if the taxon isn't in the authorities table, since a Taxon object with a taxon doesn't actually make sense
Taxon.pm:14:package PBDB::Taxon;
Taxon.pm:51:# Called by $o = Taxon->new($dbt,$taxon_no)
Taxon.pm:52:#  or $o = Taxon->new($dbt,$taxon_name).  If $taxon_name is ambiguous (a homonym), or it can't
Taxon.pm:58:	my PBDB::Taxon $self = fields::new($class);
Taxon.pm:82:## Some accessors for the Taxon.
Taxon.pm:89:	my PBDB::Taxon $self = shift;
Taxon.pm:99:    my PBDB::Taxon $self = shift;
Taxon.pm:110:    my PBDB::Taxon $self = shift;
Taxon.pm:116:	my PBDB::Taxon $self = shift;
Taxon.pm:178:        $t = Taxon->new($dbt,$q->param('taxon_no'));
Taxon.pm:313:        my @taxa = getTypeTaxonList($dbt,$fields{'taxon_no'},$lookup_reference);
Taxon.pm:336:			$fields{'taxon_rank'} = guessTaxonRank($q->param('taxon_name'));
Taxon.pm:362:        my $parentRank = guessTaxonRank($parentName);
Taxon.pm:366:        @parents = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parentName,'taxon_rank'=>$parentRank,'ignore_common_name'=>"YES"},['*']);
Taxon.pm:376:                push @parent_descs, formatTaxon($dbt,$row);
Taxon.pm:408:        my $orig_no = TaxonInfo::getOriginalCombination($dbt,$fields{taxon_no});
Taxon.pm:409:        my @spellings = TaxonInfo::getAllSpellings($dbt,$orig_no);
Taxon.pm:414:            my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$spelling_no});
Taxon.pm:463:    if ( $q->param('called_by') eq "processTaxonSearch" )	{
Taxon.pm:520:		carp("Taxon::submitAuthorityForm had invalid arguments passed to it.");
Taxon.pm:539:        $t = Taxon->new($dbt,$q->param('taxon_no'));
Taxon.pm:659:		$errors->add("Taxon names can't end with sp, spp, or indet. Are you actually trying to enter an occurrence belonging to a collection?");	
Taxon.pm:663:    if (! validTaxonName($q->param('taxon_name'))) {
Taxon.pm:671:            my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$new_name,'ignore_common_name'=>"YES"});
Taxon.pm:678:    my $rankFromSpaces = guessTaxonRank($q->param('taxon_name'));
Taxon.pm:723:				my($g,$sg,$s,$ss) = splitTaxon($q->param('taxon_name'));
Taxon.pm:769:		    my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$q->param('parent_taxon_no')});
Taxon.pm:775:            my @parents = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parent_name,'ignore_common_name'=>"YES"});
Taxon.pm:897:        my @taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$fields{'taxon_name'},'ignore_common_name'=>"YES"},['*']);
Taxon.pm:934:	my $resultTaxonNumber;
Taxon.pm:939:		($status, $resultTaxonNumber) = $dbt->insertRecord($s,'authorities', \%fields);
Taxon.pm:940:		TaxaCache::addName($dbt,$resultTaxonNumber);
Taxon.pm:943:			addImplicitChildOpinion($dbt,$s,$resultTaxonNumber,$parent_no,\%fields,$pubyr);
Taxon.pm:947:		$resultTaxonNumber = $t->get('taxon_no');
Taxon.pm:948:		$status = $dbt->updateRecord($s,'authorities','taxon_no',$resultTaxonNumber, \%fields);
Taxon.pm:949:        propagateAuthorityInfo($dbt,$q,$resultTaxonNumber,1);
Taxon.pm:951:        my $db_orig_no = TaxonInfo::getOriginalCombination($dbt,$resultTaxonNumber);
Taxon.pm:1002:        my @set_warnings = setOccurrencesTaxonNoByTaxon($dbt,$s->get('authorizer_no'),$resultTaxonNumber);
Taxon.pm:1024:        my $origResultTaxonNumber = TaxonInfo::getOriginalCombination($dbt,$resultTaxonNumber);
Taxon.pm:1031:      <li><a href="$WRITE_URL?action=displayAuthorityTaxonSearchForm">Add/edit another taxon</a></li>
Taxon.pm:1032:      <br><li><a href="$WRITE_URL?action=displayAuthorityForm&taxon_no=$resultTaxonNumber">Edit $fields{taxon_name}</a></li>
Taxon.pm:1033:      <br><li><a href="$WRITE_URL?action=displayTaxonomicNamesAndOpinions&reference_no=$resultReferenceNumber">Edit a name from the same reference</a></li>
Taxon.pm:1034:      <br><li><a href="$WRITE_URL?action=displayAuthorityTaxonSearchForm&use_reference=new">Add/edit another taxon from another reference</a></li>
Taxon.pm:1035:      <br><li><a href="$READ_URL?action=checkTaxonInfo&taxon_no=$resultTaxonNumber">Get general information about $fields{taxon_name}</a></li>   
Taxon.pm:1056:            my $sql = "SELECT opinion_no FROM opinions WHERE author1last='$cleanauth1' AND author2last='$cleanauth2' AND pubyr='" . $q->param('pubyr') . "' AND child_spelling_no=$resultTaxonNumber AND child_no=$origResultTaxonNumber ORDER BY opinion_no DESC";
Taxon.pm:1059:                $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&opinion_no=$opinion_no">Edit this author's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1065:                  $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&author1init=|.$q->param('author1init').qq|&author1last=|.$q->param('author1last').qq|&author2init=|.$q->param('author2init').qq|&author2last=|.$q->param('author2last').qq|&otherauthors=|.$q->param('otherauthors').qq|&pubyr=|.$q->param('pubyr').qq|&reference_no=$resultReferenceNumber&opinion_no=-1">Add this author's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1071:        my $sql = "SELECT opinion_no FROM opinions WHERE ref_has_opinion='YES' AND reference_no=$resultReferenceNumber AND child_spelling_no=$resultTaxonNumber AND child_no=$origResultTaxonNumber ORDER BY opinion_no DESC";
Taxon.pm:1074:            $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&opinion_no=$opinion_no">Edit this reference's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1077:            $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber&opinion_no=-1">Add this reference's opinion about $fields{taxon_name}</a></li>
Taxon.pm:1080:        $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionForm&opinion_no=-1&child_spelling_no=$resultTaxonNumber&child_no=$origResultTaxonNumber">Add an opinion about $fields{taxon_name}</a></li>
Taxon.pm:1082:        $end_message .= qq|<li$style><a href="$WRITE_URL?action=displayOpinionChoiceForm&taxon_no=$resultTaxonNumber">Edit an opinion about $fields{taxon_name}</a></li>
Taxon.pm:1085:          <li$style><a href="$WRITE_URL?action=displayTaxonomicNamesAndOpinions&reference_no=$resultReferenceNumber&amp;display=opinions">Edit an opinion from the same reference</a></li>
Taxon.pm:1092:        processSpecimenMeasurement($dbt,$s,$resultTaxonNumber,$resultReferenceNumber,\%fields);
Taxon.pm:1094:        displayTypeTaxonSelectForm($dbt,$s,$fields{'type_taxon'},$resultTaxonNumber,$fields{'taxon_name'},$fields{'taxon_rank'},$resultReferenceNumber,$end_message);
Taxon.pm:1354:    my $old_rank = guessTaxonRank($old_name) || 'genus';
Taxon.pm:1355:    my $new_rank = guessTaxonRank($new_name) || 'genus';
Taxon.pm:1372:        my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$t});
Taxon.pm:1400:        foreach my $p (TaxonInfo::getTaxa($dbt,{'taxon_name'=>$old_higher,'ignore_common_name'=>"YES"})) {
Taxon.pm:1436:        my $orig_parent_no = TaxonInfo::getOriginalCombination($dbt,$parent_no);
Taxon.pm:1461:    my $orig_parent_no = TaxonInfo::getOriginalCombination($dbt,$parent_no);
Taxon.pm:1496:    my $orig = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no},['*']);
Taxon.pm:1536:    my @set_warnings = Taxon::setOccurrencesTaxonNoByTaxon($dbt,$s->get('authorizer_no'),$new_taxon_no);
Taxon.pm:1542:sub setOccurrencesTaxonNoByTaxon {
Taxon.pm:1550:    my $t = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no});
Taxon.pm:1554:    my ($genus,$subgenus,$species,$subspecies) = splitTaxon($taxon_name);
Taxon.pm:1568:    my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$taxon_name,'ignore_common_name'=>"YES"},['taxon_no','taxon_rank','taxon_name','author1last','author2last','pubyr']);
Taxon.pm:1571:        my $orig_no_i = TaxonInfo::getOriginalCombination($dbt,$taxa[$i]->{'taxon_no'});
Taxon.pm:1574:            my $orig_no_j = TaxonInfo::getOriginalCombination($dbt,$taxa[$j]->{'taxon_no'});
Taxon.pm:1703:                my ($tied_genus,$tied_subgenus,$tied_species) = splitTaxon($row->{'taxon_name'});
Taxon.pm:1743:sub displayTypeTaxonSelectForm {
Taxon.pm:1746:    dbg("displayTypeTaxonSelectForm called with is_tt_form_value $is_tt_form_value tt_no $type_taxon_no tt_name $type_taxon_name tt_rank $type_taxon_rank ref_no $reference_no");
Taxon.pm:1749:    my @parents = getTypeTaxonList($dbt,$type_taxon_no,$reference_no);
Taxon.pm:1767:            print "<input type=\"hidden\" name=\"action\" value=\"submitTypeTaxonSelect\">\n";
Taxon.pm:1830:sub submitTypeTaxonSelect {
Taxon.pm:1842:    my @parents = getTypeTaxonList($dbt,$type_taxon_no,$reference_no);
Taxon.pm:1876:sub getTypeTaxonList {
Taxon.pm:1882:    my $focal_taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$type_taxon_no});
Taxon.pm:1924:        my $parent_taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent->{'taxon_no'}},['taxon_no','type_taxon_no','authorizer_no']);
Taxon.pm:1928:            my $type_taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent->{'type_taxon_no'}});
Taxon.pm:1946:sub formatTaxon{
Taxon.pm:1968:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$taxon->{'taxon_no'});
Taxon.pm:2013:sub splitTaxon {
Taxon.pm:2037:sub guessTaxonRank {
Taxon.pm:2067:sub validTaxonName {
Taxon.pm:2087:# subgenus (sg) and species (s) components -- use splitTaxonName to
Taxon.pm:2181:            my ($taxon_genus,$taxon_subgenus,$taxon_species) = splitTaxon($row->{'taxon_name'});
Taxon.pm:2199:            my ($taxon_genus,$taxon_subgenus,$taxon_species,$taxon_subspecies) = splitTaxon($row->{'taxon_name'});
Taxon.pm:2201:                my $match_level = Taxon::computeMatchLevel($genus_name,$subgenus_name,$species_name,$taxon_genus,$taxon_subgenus,$taxon_species);
Taxon.pm:2237:                my $orig0 = TaxonInfo::getOriginalCombination($dbt,$matches[0]->{'taxon_no'});
Taxon.pm:2238:                my $orig1 = TaxonInfo::getOriginalCombination($dbt,$matches[1]->{'taxon_no'});
Taxon.pm:2273:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
Taxon.pm:2276:    my @spelling_nos = TaxonInfo::getAllSpellings($dbt,$orig_no);
Taxon.pm:2279:    my $me = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no},['*']);
Taxon.pm:2287:        my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$spelling_no},['*']);
Taxon.pm:2479:		my $orig = TaxonInfo::getOriginalCombination($dbt,$s);
Taxon.pm:2480:		TaxonInfo::getMostRecentClassification($dbt,$orig,{'recompute'=>'yes'});
Taxon.pm:2485:	Opinion::fixMassEstimates($dbt,$dbh,TaxonInfo::getOriginalCombination($dbt,$version1[0]));
Taxon.pm:2486:	Opinion::fixMassEstimates($dbt,$dbh,TaxonInfo::getOriginalCombination($dbt,$version2[0]));
Taxon.pm:2493:		my $orig = TaxonInfo::getOriginalCombination($dbt,$c->{'child_no'});
Taxon.pm:2494:		TaxonInfo::getMostRecentClassification($dbt,$orig,{'recompute'=>'yes'});
Taxon.pm:2525:# end of Taxon.pm
TaxonInfo.pm:1:package PBDB::TaxonInfo;
TaxonInfo.pm:3:use PBDB::Taxon;
TaxonInfo.pm:33:	my $page_title = "Taxonomic name search form"; 
TaxonInfo.pm:45:# This is the front end for displayTaxonInfoResults - always use this instead if you want to 
TaxonInfo.pm:47:sub checkTaxonInfo {
TaxonInfo.pm:66:        displayTaxonInfoResults($dbt,$s,$q,$hbo);
TaxonInfo.pm:126:            my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($q->param('taxon_name'));
TaxonInfo.pm:144:                displayTaxonInfoResults($dbt,$s,$q,$hbo);
TaxonInfo.pm:149:                    print "<center><p><a href=\"$WRITE_URL?a=submitTaxonSearch&amp;goal=authority&amp;taxon_name=".$q->param('taxon_name')."\"><b>Add taxonomic information</b></a></center>";
TaxonInfo.pm:155:                print "<center><p><a href=\"$WRITE_URL?a=submitTaxonSearch&amp;goal=authority&amp;taxon_name=".$q->param('taxon_name')."\"><b>Add taxonomic information</b></a></center>";
TaxonInfo.pm:159:            displayTaxonInfoResults($dbt,$s,$q,$hbo);
TaxonInfo.pm:161:            listTaxonChoices($dbt,$hbo,\@results);
TaxonInfo.pm:166:# By the time we're here, we're gone through checkTaxonInfo and one of these scenarios has happened
TaxonInfo.pm:172:sub displayTaxonInfoResults {
TaxonInfo.pm:279:      Taxonomic history</td>
TaxonInfo.pm:301:        ($htmlCOF,$htmlClassification) = displayTaxonClassification($dbt, $taxon_no, $taxon_name, $is_real_user);
TaxonInfo.pm:327:    my ($htmlBasicInfo,$htmlSynonyms) = displayTaxonHistory($dbt, $taxon_no, $is_real_user);
TaxonInfo.pm:341:		$discussion =~ s/(\[\[)([A-Za-z ]+|)(taxon )([0-9]+)(\|)/<a href="?a=basicTaxonInfo&amp;taxon_no=$4">/g;
TaxonInfo.pm:377:<span class="displayPanelHeader">Taxonomy</span>
TaxonInfo.pm:392:            # Entered Taxon
TaxonInfo.pm:397:                print "<a href=\"$WRITE_URL?a=submitTaxonSearch&amp;goal=authority&amp;taxon_no=-1&amp;taxon_name=$entered_name\">";
TaxonInfo.pm:540:# used only by displayTaxonInfoResults
TaxonInfo.pm:549:    $options{'calling_script'} = 'TaxonInfo';
TaxonInfo.pm:574:        my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($taxon_name);
TaxonInfo.pm:575:        $parent_no = PBDB::Taxon::getBestClassification($dbt,'',$genus,'',$subgenus,'',$species);
TaxonInfo.pm:847:        #     $options{'calling_script'} = "TaxonInfo";
TaxonInfo.pm:1175:## displayTaxonClassification
TaxonInfo.pm:1179:sub displayTaxonClassification {
TaxonInfo.pm:1208:        my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($taxon_name);
TaxonInfo.pm:1209:        $classification_no = PBDB::Taxon::getBestClassification($dbt,'',$genus,'',$subgenus,'',$species);
TaxonInfo.pm:1217:    my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($taxon_name);
TaxonInfo.pm:1218:    my ($c_genus,$c_subgenus,$c_species,$c_subspecies) = PBDB::Taxon::splitTaxon($classification_name);
TaxonInfo.pm:1247:                # the PBDB does.  PBDB::Taxon::getBestClassification will find a proximate match if we can't
TaxonInfo.pm:1316:                    $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_no=$taxon_no&amp;is_real_user=$is_real_user">$show_name</a>|;
TaxonInfo.pm:1318:                    $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_name=$taxon_name&amp;is_real_user=$is_real_user">$show_name</a>|;
TaxonInfo.pm:1357:	my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($taxon_name);
TaxonInfo.pm:1368:    $focal_taxon_rank = PBDB::Taxon::guessTaxonRank($taxon_name);
TaxonInfo.pm:1386:            $taxon_parent_rank = PBDB::Taxon::guessTaxonRank($taxon_parent);
TaxonInfo.pm:1415:		my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_no=$record->{taxon_no}&amp;is_real_user=$is_real_user">$record->{taxon_name}|;
TaxonInfo.pm:1442:                    my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_no=$record->{taxon_no}&amp;is_real_user=$is_real_user">$record->{taxon_name}|;
TaxonInfo.pm:1454:        my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($taxon_name);
TaxonInfo.pm:1482:                my ($g,$sg,$sp) = PBDB::Taxon::splitTaxon($row->{'taxon_name'});
TaxonInfo.pm:1485:                    $match_level = PBDB::Taxon::computeMatchLevel($row->{'genus_name'},$row->{'subgenus_name'},$row->{'species_name'},$g,$sg,$sp);
TaxonInfo.pm:1495:                            my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_name=$occ_name&amp;is_real_user=$is_real_user">$occ_name</a>|;
TaxonInfo.pm:1499:                        my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_name=$occ_name&amp;is_real_user=$is_real_user">$occ_name</a>|;
TaxonInfo.pm:1564:        $output .= '<p><b><a href=# onClick="javascript: document.doDownloadTaxonomy.submit()">Download authority and opinion data</a></b> - <b><a href=# onClick="javascript: document.doViewClassification.submit()">View classification of included taxa</a></b>';
TaxonInfo.pm:1565:        $output .= "<form method=\"POST\" action=\"\" name=\"doDownloadTaxonomy\">";
TaxonInfo.pm:1566:        $output .= '<input type="hidden" name="action" value="displayDownloadTaxonomyResults">';
TaxonInfo.pm:1578:# Handle the 'Taxonomic history' section
TaxonInfo.pm:1579:sub displayTaxonHistory {
TaxonInfo.pm:1719:				$text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon->{taxon_name}</a> was named as $article $rank. ";
TaxonInfo.pm:1726:			$text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon->{taxon_name}</a> is $article $rank. ";
TaxonInfo.pm:1729:		$text .= "<i><a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon->{taxon_name}</a></i> was named by ";
TaxonInfo.pm:1750:    my ($typeInfo,$typeLocality) = printTypeInfo($dbt,join(',',@spellings),$taxon,$is_real_user,'checkTaxonInfo',1);
TaxonInfo.pm:1762:            $text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$row->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon_name</a>, ";
TaxonInfo.pm:1937:        #$text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon_name</a> was assigned ";
TaxonInfo.pm:1948:            $text .= " to <a href=\"?a=checkTaxonInfo&amp;taxon_no=$parent->{taxon_no}&amp;is_real_user=$is_real_user\">$parent_name</a> by ";
TaxonInfo.pm:2508:			$n =~ s/Taxon e/E/;
TaxonInfo.pm:2588:        my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($taxon_name);
TaxonInfo.pm:2590:        my $classification_no = PBDB::Taxon::getBestClassification($dbt,'',$genus,'',$subgenus,'',$species);
TaxonInfo.pm:3571:	print "<div style=\"padding-left: 6em;\"><a href=\"?a=beginFirstAppearance\">Search again</a> - <a href=\"?a=displayTaxonInfoResults&amp;taxon_no=$nos[0]->{'taxon_no'}\">See more details about $name</a></div>\n";
TaxonInfo.pm:3642:sub basicTaxonInfo	{
TaxonInfo.pm:3659:	# reuses some old checkTaxonInfo functionality JA 8.4.12
TaxonInfo.pm:3663:			listTaxonChoices($dbt,$hbo,\@taxon_nos,1);
TaxonInfo.pm:3688:		my @taxon_nos = getTaxonNos($dbt,$taxon_name,'','',$q->param('author'),$q->param('pubyr'),$q->param('type_body_part'),$q->param('preservation'));
TaxonInfo.pm:3692:			listTaxonChoices($dbt,$hbo,\@taxon_nos,1);
TaxonInfo.pm:3701:		my @taxon_nos = getTaxonNos($dbt,$taxon_name,'','',$q->param('author'),$q->param('pubyr'),$q->param('type_body_part'),$q->param('preservation'));
TaxonInfo.pm:3705:			@taxon_nos = getTaxonNos($dbt,$g);
TaxonInfo.pm:3774:		# getTaxonNos returns the "largest" taxon first if there are
TaxonInfo.pm:3780:			listTaxonChoices($dbt,$hbo,\@taxon_nos,1);
TaxonInfo.pm:3869:				push @parent_links , "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$cof->{$r.'_no'}\">".$cof->{$r}."</a>";
TaxonInfo.pm:3886:		$discussion =~ s/(\[\[)([A-Za-z ]+|)(taxon )([0-9]+)(\|)/<a href="?a=basicTaxonInfo&amp;taxon_no=$4">/g;
TaxonInfo.pm:4013:			print "<p style=\"clear: left;\">$belongs <a href=\"?a=basicTaxonInfo&amp;taxon_no=$parent->{'taxon_no'}\">".italicize($parent)."</a>";
TaxonInfo.pm:4049:				print "<p style=\"clear: left;\">Sister taxon: <a href=\"?a=basicTaxonInfo&amp;taxon_no=$sisters[0]->{'taxon_no'}\">".italicize($sisters[0])."</a>";
TaxonInfo.pm:4053:				$list .= "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">".italicize($_)."</a>, " foreach @sisters;
TaxonInfo.pm:4075:				$list .= "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">".italicize($_)."</a>, " foreach @child_names;
TaxonInfo.pm:4094:		($typeInfo,$typeLocality) = printTypeInfo($dbt,join(',',@spellings),$auth,1,'basicTaxonInfo');
TaxonInfo.pm:4107:						my ($synTypeInfo,$synTypeLocality) = printTypeInfo($dbt,join(',',@spellings),$distinct_auths[$i],1,'basicTaxonInfo');
TaxonInfo.pm:4150:			my $orig = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
TaxonInfo.pm:4151:			my $ss = PBDB::TaxonInfo::getSeniorSynonym($dbt,$orig);
TaxonInfo.pm:4399:			print "<p><a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon_no&amp;is_real_user=1\">Show more details</a></p>\n\n";
TaxonInfo.pm:4401:			print "<p><a href=\"?a=checkTaxonInfo&amp;taxon_name=$taxon_name&amp;is_real_user=1\">Show more details</a></p>\n\n";
TaxonInfo.pm:4412:<input type="hidden" name="action" value="basicTaxonInfo">
TaxonInfo.pm:4434:# originally called randomTaxonInfo and then hijacked to also get all names in
TaxonInfo.pm:4519:		basicTaxonInfo($q,$s,$dbt,$hbo);
TaxonInfo.pm:4524:# calved off from checkTaxonInfo JA 8.4.12
TaxonInfo.pm:4525:sub listTaxonChoices	{
TaxonInfo.pm:4552:		my $authorityLine = PBDB::Taxon::formatTaxon($dbt,$results[$i]);
TaxonInfo.pm:4557:		print qq|<td class=$classes style="width: 1em; padding: 0.25em; padding-left: 1em; padding-right: 1em; white-space: nowrap;">&bull; <a href="?a=basicTaxonInfo&amp;taxon_no=$results[$i]->{taxon_no}" style="color: black;">$authorityLine</a></td>|;
TaxonInfo.pm:4600:sub getTaxonNos {
TaxonInfo.pm:4656:#     @results = PBDB::TaxonInfo::getTaxa($dbt,{'reference_no'=>345}); 
TaxonInfo.pm:4660:#     @results = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_name'=>'Chelonia'},['taxon_name','taxon_rank','author1last','author2last','pubyr');  
TaxonInfo.pm:4749:        my ($genus,$subgenus,$species,$subspecies) = PBDB::Taxon::splitTaxon($options->{'taxon_name'});
TaxonInfo.pm:4948:# The argument may be a list of either taxon_no values or Taxon objects.
TaxonInfo.pm:4950:sub getContainerTaxon {
TaxonInfo.pm:4962:    # These may either be taxon_no values (positive integers) or Taxon objects
TaxonInfo.pm:5136:# synonym, since that's what the taxa_list_cache stores.  Taxonomic names
TaxonInfo.pm:5209:# JA: it is currently used only in DownloadTaxonomy.pm
TaxonQuery.pm:2:# TaxonQuery
TaxonQuery.pm:9:package PBDB::TaxonQuery;
TaxonQuery.pm:686:	$not_found_msg = "Taxon number $self->{base_taxon_no} was not found in the database";
TaxonQuery.pm:696:	$not_found_msg = "Taxon '$self->{base_taxon_name}' was not found in the database";
TaxonQuery.pm:1162:    # [see TaxonInfo.pm, line 1252 as of 2012-06-24]
TaxonQuery.pm:1166:    # [see TaxonInfo.pm, lines 1232-1271 as of 2012-06-24]
TaxonQuery.pm:1690:    #  section of TaxonInfo.pm that does not belong with the PaleoDB
TaxonQuery.pm:1743:		$output .= $self->emitTaxonXML($parent_row, 1);
TaxonQuery.pm:1749:	$output .= $self->emitTaxonXML($row, 0);
TaxonQuery.pm:1758:	my $output = $self->emitTaxonText($row);
TaxonQuery.pm:1763:    # this is not the first record.  The subroutine emitTaxonJSON() will also
TaxonQuery.pm:1768:    return $insert . $self->emitTaxonJSON($row, $self->{parents});
TaxonQuery.pm:1772:# emitTaxonXML ( row, short_record )
TaxonQuery.pm:1779:sub emitTaxonXML {
TaxonQuery.pm:1791:    $output .= '  <dwc:Taxon>' . "\n";
TaxonQuery.pm:1795:    # Taxon names shouldn't contain any invalid characters, but just in case...
TaxonQuery.pm:1899:    $output .= '  </dwc:Taxon>' . "\n";
TaxonQuery.pm:1903:# emitTaxonText ( row )
TaxonQuery.pm:1908:sub emitTaxonText {
TaxonQuery.pm:2105:# emitTaxonJSON ( row, parents, short_record )
TaxonQuery.pm:2112:sub emitTaxonJSON {
TaxonQuery.pm:2239:	    $output .= $self->emitTaxonJSON($parent_row);
TreeQuery.pm:483:    return $self->emitTaxonXML($row) if $self->{output_format} eq 'xml';
TreeQuery.pm:490:	return $self->emitTaxonJSON($row);
TreeQuery.pm:513:    return $prefix . $self->emitTaxonJSON($row);
TreeQuery.pm:534:# emitTaxonJSON ( row )
TreeQuery.pm:542:sub emitTaxonJSON {
TreeQuery.pm:579:# emitTaxonXML ( row, short_record )
TreeQuery.pm:584:sub emitTaxonXML {
TreeQuery.pm:592:    $output .= '  <dwc:Taxon>' . "\n";
TreeQuery.pm:608:    $output .= '  </dwc:Taxon>' . "\n";
TypoChecker.pm:45:    my ($g,$sg,$sp,$ssp) = Taxon::splitTaxon($name);
TypoChecker.pm:218:            my ($g,$sg,$sp) = Taxon::splitTaxon($name);
TypoChecker.pm:221:            my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$g},['taxon_no']);
TypoChecker.pm:289:                        $radio .= "<a target=\"_TAXONPOPUP\" href=\"$READ_URL?action=checkTaxonInfo&taxon_name=$_\">$_</a>";
TypoChecker.pm:308:                                 . "<a target=\"_TAXONPOPUP\" href=\"$READ_URL?action=checkTaxonInfo&taxon_name=$_\">$_</a>"
TypoChecker.pm:431:                my ($g1,$sg1,$sp1,$ssp1) = Taxon::splitTaxon($old_name);
TypoChecker.pm:432:                my ($g2,$sg2,$sp2,$ssp2) = Taxon::splitTaxon($new_name);
TypoChecker.pm:455:                my $best_taxon_no = Taxon::getBestClassification($dbt,'',$g2,'',$sg2,'',$sp2);
TypoChecker.pm:522:    my ($g,$sg,$sp,$ssp) = Taxon::splitTaxon($name);
TypoChecker.pm:572:            my ($tg,$tsg,$tsp) = Taxon::splitTaxon($_->{'taxon_name'});
TypoChecker.pm:711:## sub newTaxonNames
TypoChecker.pm:723:sub newTaxonNames {
------------ TaxonInfo
Cladogram.pm:23:    my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no});
Cladogram.pm:108:    my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no});
Cladogram.pm:616:                my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name,'remove_rank_change'=>1},['*']);
Cladogram.pm:639:        my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parent_name,'remove_rank_change'=>1},['*']);
Classic.pm:33:use PBDB::TaxonInfo;
Classic.pm:328:	$row->{latest_species} = "<i><a href=\"?a=basicTaxonInfo&amp;taxon_no=$sp->{taxon_no}\">$sp->{taxon_name}</a></i>";
Classic.pm:362:		$row->{'random_names'} .= "<div style=\"float: left; clear: $clear; padding: 0.3em; padding-left: $padding; font-size: $fontsize;\"><a href=\"?a=basicTaxonInfo&amp;taxon_no=$g->{'taxon_no'}\" style=\"color: $blue\">".$g->{'taxon_name'}."</a></div>\n";
Classic.pm:436:				$row->{'taxon_links'} .= qq|<div class="verysmall collectionLink"><a class="homeBodyLinks" href="?a=basicTaxonInfo&amp;taxon_no=$s->{'taxon_no'}">$s->{'taxon_name'}</a></div>\n|;
Classic.pm:913:			PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:923:			PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:932:			PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:940:	#  ever likely to happen if basicTaxonInfo isn't called
Classic.pm:1642:	my $t = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_name'=>$q->param('name')},['all']);
Classic.pm:1643:	my $author = PBDB::TaxonInfo::formatShortAuthor($t);
Classic.pm:2003:    my @results = PBDB::TaxonInfo::getTaxa($dbt,\%options,['*']);
Classic.pm:2075:                        my @full_rows = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name},['*']);
Classic.pm:2124:                    my $full_row = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'taxon_no'}},['*']);
Classic.pm:2615:sub beginTaxonInfo{
Classic.pm:2620:    PBDB::TaxonInfo::searchForm($hbo, $q);
Classic.pm:2624:sub checkTaxonInfo {
Classic.pm:2631:        $q->param('taxa' => @{PBDB::TaxonInfo::getMatchingSubtaxa($dbt,$q,$s,$hbo)} );
Classic.pm:2633:            PBDB::TaxonInfo::searchForm($hbo,$q,1);
Classic.pm:2635:            PBDB::TaxonInfo::checkTaxonInfo($q, $s, $dbt, $hbo);
Classic.pm:2641:        PBDB::TaxonInfo::getMatchingSubtaxa($dbt,$q,$s,$hbo);
Classic.pm:2648:        PBDB::TaxonInfo::checkTaxonInfo($q, $s, $dbt, $hbo);
Classic.pm:2653:sub displayTaxonInfoResults {
Classic.pm:2658:	PBDB::TaxonInfo::displayTaxonInfoResults($dbt,$s,$q,$hbo);
Classic.pm:2663:sub basicTaxonInfo	{
Classic.pm:2667:	PBDB::TaxonInfo::basicTaxonInfo($q,$s,$dbt,$hbo);
Classic.pm:2675:# 	PBDB::TaxonInfo::beginFirstAppearance($hbo, $q, '');
Classic.pm:2681:# 	PBDB::TaxonInfo::displayFirstAppearance($q, $s, $dbt, $hbo);
Classic.pm:3918:                    my $t = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no},['taxon_no','taxon_rank','taxon_name','author1last','author2last','otherauthors','pubyr']);
Classic.pm:5379:        print "<a href=\"?a=basicTaxonInfo&taxon_no=$i\">$i</a> ";
Classification.pm:3:use PBDB::TaxonInfo;
Classification.pm:73:            my @taxon_nos = PBDB::TaxonInfo::getTaxonNos($dbt,$hash_key);
Classification.pm:84:            $taxon_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
Classification.pm:103:        $child_no = PBDB::TaxonInfo::getSeniorSynonym($dbt,$child_no,$restrict_to_reference_no);
Classification.pm:105:        my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:130:            $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:138:                my $taxon= PBDB::TaxonInfo::getMostRecentSpelling($dbt,$child_no,{'reference_no'=>$restrict_to_reference_no});
Classification.pm:147:                my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$child_no});
Classification.pm:300:            my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt, $child->{'child_no'});
Classification.pm:337:        my @taxon_nos = PBDB::TaxonInfo::getTaxonNos($dbt,$taxon_name_or_no);
Classification.pm:346:    $taxon_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
Classification.pm:387:#       sort_alphabetical: an array sorted in alphabetical fashion, suitable for TaxonInfo.pm or Confidence.pm
Classification.pm:404:    my $orig_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no,$restrict_to_ref);
Classification.pm:405:    my $ss_no = PBDB::TaxonInfo::getSeniorSynonym($dbt,$orig_no,$restrict_to_ref);
Classification.pm:444:        my $parent_row = PBDB::TaxonInfo::getMostRecentClassification($dbt,$orig_no,{'reference_no'=>$restrict_to_ref});
Classification.pm:480:    my $taxon = PBDB::TaxonInfo::getMostRecentSpelling($dbt,$orig_no,{'reference_no'=>$restrict_to_ref});
Collection.pm:19:use PBDB::TaxonInfo;
Collection.pm:34:#   taxon_list: A list of taxon_nos to filter by (i.e. as passed by TaxonInfo)
Collection.pm:1128:	#  in cases where basicTaxonInfo searches were skipped JA 27.5.11
Collection.pm:1142:				my $orig = TaxonInfo::getOriginalCombination($dbt,$taxon->{'taxon_no'});
Collection.pm:1143:				my $ss = TaxonInfo::getSeniorSynonym($dbt,$orig);
Collection.pm:1144:				my @subnames = TaxonInfo::getAllSynonyms($dbt,$ss);
Collection.pm:1612:				$s->{'good'} = "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$s->{'synonym_no'}\">".$s->{'good'}."</a>";
Collection.pm:1688:			$o->{'formatted'} = "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$o->{'taxon_no'}\">".$o->{'formatted'}."</a>";
Collection.pm:1694:			$o->{'formatted'} = "<a href=\"?a=basicTaxonInfo&amp;taxon_name=$name\">".$o->{'formatted'}."</a>";
Collection.pm:1718:		my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$o->{'taxon_no'}},['taxon_name','taxon_rank','pubyr','common_name']);
CollectionEntry.pm:10:use PBDB::TaxonInfo;
CollectionEntry.pm:651:    #  pages returned by TaxonInfo anyway JA 2.10.09
CollectionEntry.pm:1173:				my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$rowref->{'taxon_no'}},['taxon_no','taxon_name','common_name','taxon_rank','author1last','author2last','otherauthors','pubyr','reference_no','ref_is_authority']);
CollectionEntry.pm:1177:					my $orig_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon->{'taxon_no'});
CollectionEntry.pm:1256:                    my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$rowref->{'taxon_no'}},['taxon_name','common_name','taxon_rank','pubyr']);
CollectionEntry.pm:1485:		document.getElementById(link_id).innerHTML = '<a href="?a=basicTaxonInfo' + link_action + '&amp;is_real_user=1">' + taxon_name + '</a>';
CollectionEntry.pm:1694:    my $orig_no = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
CollectionEntry.pm:1695:    my ($ss_taxon_no,$status) = PBDB::TaxonInfo::getSeniorSynonym($dbt,$orig_no,'','yes');
CollectionEntry.pm:1700:    my $spelling = PBDB::TaxonInfo::getMostRecentSpelling($dbt,$ss_taxon_no,{'get_spelling_reason'=>1});
CollectionEntry.pm:1764:			$taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'taxon_no'}},['taxon_no','taxon_name','common_name','taxon_rank','author1last','author2last','otherauthors','pubyr','reference_no','ref_is_authority']);
CollectionEntry.pm:1777:                my $taxon = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'taxon_no'}},['taxon_name','taxon_rank','pubyr']);
Confidence.pm:9:use PBDB::TaxonInfo;
Confidence.pm:47:        my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$homonym_name, undef, 1);
Confidence.pm:313:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon, undef, 1);
Download.pm:5:use PBDB::TaxonInfo;
Download.pm:4282:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon,'','lump');
Download.pm:4290:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon,'','lump');
Download.pm:4305:            my @taxon_nos = TaxonInfo::getTaxonNos($dbt,$taxon,'','lump');
DownloadTaxonomy.pm:8:use PBDB::TaxonInfo;
DownloadTaxonomy.pm:141:				print "<url>http://paleodb.org/classic?action=basicTaxonInfo&amp;taxon_no=$p->{taxon_no}&amp;is_real_user=0</url>\n";
DownloadTaxonomy.pm:166:						print "<url>http://paleodb.org/classic?action=basicTaxonInfo&amp;taxon_no=$i->{taxon_no}&amp;is_real_user=0</url>\n";
DownloadTaxonomy.pm:245:	print "<url>http://paleodb.org/classic?action=basicTaxonInfo&amp;taxon_no=$n->{taxon_no}&amp;is_real_user=0</url>\n";
DownloadTaxonomy.pm:331:        my @taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$options{'taxon_name'},'match_subgenera'=>1,'remove_rank_change'=>1});
DownloadTaxonomy.pm:666:        my @taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$options{'taxon_name'},'match_subgenera'=>1,'remove_rank_change'=>1});
DownloadTaxonomy.pm:930:        my %nomen_children = %{TaxonInfo::nomenChildren($dbt,\@children)};
DownloadTaxonomy.pm:1041:            my $orig_no = TaxonInfo::getOriginalCombination($dbt,$row->{'spelling_no'});
DownloadTaxonomy.pm:1127:        my %nomen_children = %{TaxonInfo::nomenChildren($dbt,\@children)};
FossilRecord.pm:14:use PBDB::TaxonInfo;
FossilRecord.pm:34:# This is the front end for displayTaxonInfoResults - always use this instead if you want to 
FossilRecord.pm:102:            print "<td><a href=\"$READ_URL?action=checkTaxonInfo&taxon_no=$row->{taxon_no}\">$row->{taxon_name}</a></td>";
FossilRecord.pm:119:        my @results = TaxonInfo::getTaxa($dbt,$options,['taxon_no','taxon_rank','taxon_name','common_name','author1last','author2last','otherauthors','pubyr','pages','figures','comments']);   
FossilRecord.pm:135:            print qq|<input type="hidden" name="action" value="checkTaxonInfo">|;
FossilRecord.pm:153:# By the time we're here, we're gone through checkTaxonInfo and one of these scenarios has happened
FossilRecord.pm:176:    my $orig_taxon_no = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
FossilRecord.pm:177:    $taxon_no = TaxonInfo::getSeniorSynonym($dbt,$orig_taxon_no);
FossilRecord.pm:179:    my $taxon = TaxonInfo::getMostRecentSpelling($dbt,$taxon_no);
FossilRecord.pm:206:        my $orig_ss = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
FossilRecord.pm:207:        my $mrpo = TaxonInfo::getMostRecentClassification($dbt,$orig_ss);
FossilRecord.pm:214:            %disused = %{TaxonInfo::disusedNames($dbt,$ss_no)};
FossilRecord.pm:269:		print TaxonInfo::displayTaxonClassification($dbt, $taxon_no, $taxon_name,$is_real_user);
FossilRecord.pm:276:        print TaxonInfo::displayRelatedTaxa($dbt, $taxon_no, $spelling_no, $taxon_name,$is_real_user);
FossilRecord.pm:277:    	print "<a href=\"$READ_URL?action=beginTaxonInfo\">".
FossilRecord.pm:313:        print TaxonInfo::displayTaxonHistory($dbt, $taxon_no, $is_real_user);
FossilRecord.pm:320:            my $interval_hash = TaxonInfo::getIntervalsData($dbt,$data);
FossilRecord.pm:321:            my ($lb,$ub,$minfirst,$max,$min) = TaxonInfo::calculateAgeRange($dbt,$data,$interval_hash);
FossilRecord.pm:347:    	print TaxonInfo::displaySynonymyList($dbt, $taxon_no);
FossilRecord.pm:357:		    print TaxonInfo::displayEcology($dbt,$taxon_no,$in_list);
FossilRecord.pm:814:                $row->{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$row->{'parent_spelling_no'});
FossilRecord.pm:816:                $row->{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$row->{'parent_spelling_no'});
FossilRecord.pm:839:                my $t = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','pubyr','ref_is_authority','reference_no']); 
FossilRecord.pm:866:            $row->{'child_no'} = TaxonInfo::getOriginalCombination($dbt,$row->{'child_spelling_no'});
FossilRecord.pm:869:            my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_no'}});
FossilRecord.pm:1236:        @taxa= TaxonInfo::getTaxa($dbt,{'taxon_no'=>$no},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','ref_is_authority','pubyr']);
FossilRecord.pm:1242:        @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name,'taxon_rank'=>$restrict_rank},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','ref_is_authority','pubyr']);
FossilRecord.pm:1267:            my $typo_list = join(", ",map {"<a target=\"_NEW\" href=\"$READ_URL?action=checkTaxonInfo&amp;taxon_no=$_->{taxon_no}\">$_->{taxon_name}</a>"} @matches);
FossilRecord.pm:1417:    my @nos = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$name},['taxon_no','taxon_name','taxon_rank','author1init','author1last','author2init','author2last','otherauthors','ref_is_authority','pubyr']);
FossilRecord.pm:1424:            my $typo_list = join(", ",map {"<a target=\"_NEW\" href=\"$READ_URL?action=checkTaxonInfo&amp;taxon_no=$_->{taxon_no}\">$_->{taxon_name}</a>"} @matches);
Images.pm:6:use PBDB::TaxonInfo;
Images.pm:23:    my @results = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$q->param('taxon_no')});
Images.pm:277:	my @matches = TaxonInfo::getTaxonNos($dbt,$taxon_name,'','',$q->param('author'),$q->param('pubyr'),$q->param('type_body_part'),$q->param('preservation'));
Images.pm:295:		print qq|<div class="verysmall" style="float: left; clear; none; padding: 1.25em;">\n<a href="$READ_URL?a=basicTaxonInfo&taxon_no=$t->{taxon_name}"><img src="$path" style="width: 10em;"></a>\n<br>\n<i><a href="$READ_URL?a=basicTaxonInfo&taxon_no=$t->{taxon_no}">$t->{taxon_name}</a></i>\n</div>\n\n|;
Images.pm:319:            print "<tr><td>Original identification:</td><td><a target=\"_blank\" href=\"$READ_URL?action=basicTaxonInfo&taxon_no=$row->{taxon_no}\">".$row->{'taxon_name'}."</a></td></tr>\n";
Images.pm:320:            print "<tr><td>Current identification:</td><td><a target=\"_blank\" href=\"$READ_URL?action=basicTaxonInfo&taxon_no=$ss->{taxon_no}\">".$ss->{'taxon_name'}."</a></td></tr>\n";
Images.pm:322:            print "<tr><td>Current identification:</td><td><a target=\"_blank\" href=\"$READ_URL?action=basicTaxonInfo&taxon_no=$row->{taxon_no}\">".$row->{'taxon_name'}."</a></td></tr>\n";
Main.pm:32:use PBDB::TaxonInfo;
Map.pm:171:                my @taxa = TaxonInfo::getTaxa($dbt, {'taxon_name'=>$taxon_name,'remove_rank_change'=>1});
Measurement.pm:25:#      taxon_list: an array ref of taxon_nos, like $in_list in TaxonInfo
Measurement.pm:28:#          only the taxon_no is known. used in TaxonInfo and in limited cases in Download
Measurement.pm:106:            @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$options{'taxon_name'}},['taxon_no']);
Measurement.pm:108:            @taxa = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$options{'taxon_no'}},['taxon_no']);
Measurement.pm:194:# See TaxonInfo or Download for examples of this function being called. i.e.:
Measurement.pm:367:# stolen from TaxonInfo::displayMeasurements, but greatly simplified with double join on
Measurement.pm:1071:	# much of this section is lifted from TaxonInfo::displayMeasurements
MeasurementEntry.pm:39:            @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$q->param('taxon_name'),'match_subgenera'=>1});
MeasurementEntry.pm:51:                        @taxon_nos = TaxonInfo::getAllSynonyms($dbt,$_->{'taxon_no'});
MeasurementEntry.pm:53:                        @taxon_nos = TaxonInfo::getAllSpellings($dbt,$_->{'taxon_no'});
MeasurementEntry.pm:252:        my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>int($q->param('taxon_no'))},[taxon_rank,taxon_name,extant]);
MeasurementEntry.pm:570:        my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>int($q->param('taxon_no'))},['taxon_rank','taxon_name','extant']);
MeasurementEntry.pm:856:        my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>int($q->param('taxon_no'))});
Nexusfile.pm:236:	my $t = TaxonInfo::getTaxa($dbt, { taxon_name => $options->{base_name} });
NexusfileWeb.pm:275:	    my $taxon_link = qq%<a href="?a=basicTaxonInfo&taxon_no=$nexusfile->{taxon_no}">$nexusfile->{taxon_name}</a>%;
NexusfileWeb.pm:460:	    my $taxon_link = qq%<a href="?a=basicTaxonInfo&taxon_no=$nexusfile->{taxon_no}">$nexusfile->{taxon_name}</a>%;
NexusfileWeb.pm:857:    my $href = qq^href="?a=basicTaxonInfo&taxon_no=$nexusfile->{taxon_no}"^;
NexusfileWeb.pm:902:    my $url = "$READ_URL?a=basicTaxonInfo&taxon_no=$t->{taxon_no}";
NexusfileWrite.pm:558:	    ($taxon) = TaxonInfo::getTaxa($dbt, { taxon_name => $search_name,
NexusfileWrite.pm:596:	my $containing_taxon = TaxonInfo::getContainerTaxon($dbt, \@taxa);
NexusfileWrite.pm:664:	my ($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $name });
NexusfileWrite.pm:677:		($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $1 });
NexusfileWrite.pm:681:		    ($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $1, match_subgenera => 1 });
NexusfileWrite.pm:694:		($t) = TaxonInfo::getTaxa($dbt, { taxon_name => $name, match_subgenera => 1 });
Opinion.pm:162:        my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:174:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:184:        my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_no'}});
Opinion.pm:188:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:192:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:205:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:209:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:227:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:236:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:242:            my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:341:            my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$fields{'child_no'}});
Opinion.pm:342:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$fields{'child_spelling_no'}});
Opinion.pm:441:        @child_spelling_nos = TaxonInfo::getTaxonNos($dbt,$childSpellingName,$childSpellingRank);
Opinion.pm:484:            @parent_nos = TaxonInfo::getTaxonNos($dbt,$parentName);
Opinion.pm:511:            my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent_no},['taxon_no','taxon_name','taxon_rank','author1last','author2last','otherauthors','pubyr']);
Opinion.pm:520:                my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent_no});
Opinion.pm:523:            my @spellings = TaxonInfo::getAllSpellings($dbt,$parent_no);
Opinion.pm:660:			my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$child_spelling_no},['taxon_no','taxon_name','taxon_rank','author1last','author2last','otherauthors','pubyr']);
Opinion.pm:664:			my $orig_no = TaxonInfo::getOriginalCombination($dbt,$child_spelling_no);
Opinion.pm:667:				my $orig = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$orig_no});
Opinion.pm:760:        $fields{'child_no'} = TaxonInfo::getOriginalCombination($dbt,$q->param('child_no')); 
Opinion.pm:952:        $fields{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$fields{'parent_spelling_no'});
Opinion.pm:970:            my @parents = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parentName,'ignore_common_name'=>"YES"}); 
Opinion.pm:977:                $fields{'parent_no'} = TaxonInfo::getOriginalCombination($dbt,$fields{'parent_spelling_no'});
Opinion.pm:1007:            my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$q->param('child_spelling_no')});
Opinion.pm:1024:            my @spellings = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$childSpellingName,'taxon_rank'=>$childSpellingRank,'ignore_common_name'=>"YES"}); 
Opinion.pm:1045:        my $new_orig = TaxonInfo::getOriginalCombination($dbt,$fields{'parent_spelling_no'});
Opinion.pm:1488:    my $auth = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$fields{child_spelling_no}},['author1last','author2last','otherauthors','pubyr']);
Opinion.pm:1529:    my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$new_orig_no});
Opinion.pm:1532:        $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'parent_spelling_no'}});
Opinion.pm:1534:        $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$row->{'child_spelling_no'}});
Opinion.pm:1536:    my $is_misspelling = TaxonInfo::isMisspelling($dbt,$row->{'child_spelling_no'});
Opinion.pm:1566:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$child_spelling_no);
Opinion.pm:1620:	my @entangled = ( TaxonInfo::getSeniorSynonym($dbt,$taxon_no) );
Opinion.pm:1623:		my $ss = TaxonInfo::getSeniorSynonym($dbt,$p->{'parent_no'});
Opinion.pm:1629:		my @in_list = TaxonInfo::getAllSynonyms($dbt,$e);
Opinion.pm:1638:				@in_list = TaxonInfo::getAllSpellings($dbt,$e);
Opinion.pm:1660:        my $orig_no = TaxonInfo::getOriginalCombination($dbt,$child_no);
PrintHierarchy.pm:4:use PBDB::TaxonInfo;
PrintHierarchy.pm:102:		$title = TaxonInfo::formatShortAuthor( ${$dbt->getData($sql)}[0] );
PrintHierarchy.pm:146:		$title = "the ".$taxa[0]->{'taxon_rank'}." ".TaxonInfo::italicize( $taxa[0] );
PrintHierarchy.pm:240:		print OUT "$t->{'taxon_rank'},\"$t->{'taxon_name'}\",\"".TaxonInfo::formatShortAuthor($t)."\",\"$t->{'common_name'}\",\"$t->{'status'}\",$extant\n";
PrintHierarchy.pm:242:		my $name = $shortranks{$t->{'taxon_rank'}}." "."$extant<a href=\"$READ_URL?action=basicTaxonInfo&amp;taxon_no=$t->{taxon_no}\">".TaxonInfo::italicize($t)."</a>";
PrintHierarchy.pm:244:			$name .= " ".TaxonInfo::formatShortAuthor($t);
PrintHierarchy.pm:278:				print OUT "$t->{'taxon_rank'},\"$t->{'taxon_name'}\",\"".TaxonInfo::formatShortAuthor($t)."\",\"$t->{'common_name'}\",\"$t->{'status'}\",$extant\n";
PrintHierarchy.pm:281:			push @badList , TaxonInfo::italicize($_)." ".TaxonInfo::formatShortAuthor($_)." [".$_->{'status'}."]" foreach @{$invalids{$t->{'taxon_no'}}};
Reclassify.pm:459:        my $t = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$m->{'taxon_no'}},['taxon_no','taxon_name','taxon_rank','author1last','author2last','otherauthors','pubyr']);
Reference.pm:621:            my $link = 'a=basicTaxonInfo&taxon_no=';
Reference.pm:673:		push @taxa , "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">$_->{'taxon_name'}</a>" foreach @taxon_refs;
Reference.pm:696:	    $line .= qq% (<a href="?a=basicTaxonInfo&taxon_no=$taxon_no">$taxon_name</a>)% if $taxon_name;
Reference.pm:870:		push @taxa , "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">$_->{'taxon_name'}</a>" foreach @taxon_refs;
Report.pm:708:                my @taxon_nos = TaxonInfo::getTaxonNos($dbt, $taxon, undef, 1);
Report.pm:1122:			print qq|<td style=\"padding-left: 1em; padding-right: 1em;\"><a href="$READ_URL?action=checkTaxonInfo&amp;taxon_name=$linkname&amp;is_real_user=1">$displayname</a></td>|;
Review.pm:462:	$text =~ s/\[\[taxon /<a href="$READ_URL\?a=basicTaxonInfo&amp;taxon_name=/g;
Strata.pm:4:use PBDB::TaxonInfo;
Strata.pm:38:    # Also important for having TaxonInfo::doCollections return what we want
Strata.pm:301:    print TaxonInfo::doCollections($dbt, $s, $dataRows, '' ,'', '','for_strata_module');
Strata.pm:302:#    print TaxonInfo::doCollections($q, $dbt, $s, '', '', "for_strata_module");
TaxaCache.pm:28:use PBDB::TaxonInfo;
TaxaCache.pm:76:            my $orig = TaxonInfo::getOriginalCombination($dbt, $bad->{'taxon_no'});
TaxaCache.pm:77:            TaxonInfo::getMostRecentClassification($dbt,$orig,{'use_synonyms'=>'no'});
TaxaCache.pm:291:#    my $range_op = TaxonInfo::getMostRecentClassification($dbt,$synonym_no,{'strat_range'=>1});
TaxaCache.pm:447:    $child_no = TaxonInfo::getOriginalCombination($dbt,$child_no);
TaxaCache.pm:476:    my $mrpo = TaxonInfo::getMostRecentClassification($dbt,$child_no,{'recompute'=>'yes'});
TaxaCache.pm:482:    my @spellings = TaxonInfo::getAllSpellings($dbt,$child_no);
TaxaCache.pm:532:    my $spelling = TaxonInfo::getMostRecentSpelling($dbt,$child_no);
TaxaCache.pm:536:    my $range_op = TaxonInfo::getMostRecentClassification($dbt,$child_no,{'strat_range'=>1});
TaxaCache.pm:563:	my $senior_synonym_no = TaxonInfo::getSeniorSynonym($dbt,$child_no);
TaxaCache.pm:564:	my $senior_synonym_spelling = TaxonInfo::getMostRecentSpelling($dbt,$senior_synonym_no);
TaxaCache.pm:579:        my $parent_spelling = TaxonInfo::getMostRecentSpelling($dbt,$new_parent_no);
TaxaCache.pm:655:        my $popinion = TaxonInfo::getMostRecentClassification($dbt,$parent_no,{'use_synonyms'=>'no'});
TaxaCache.pm:1094:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
TaxaCache.pm:1095:    my $last_op = TaxonInfo::getMostRecentClassification($dbt,$orig_no);
TaxaCache.pm:1101:            my $last_parent_op = TaxonInfo::getMostRecentClassification($dbt,$orig_no,{'exclude_nomen'=>1}); 
Taxon.pm:366:        @parents = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parentName,'taxon_rank'=>$parentRank,'ignore_common_name'=>"YES"},['*']);
Taxon.pm:408:        my $orig_no = TaxonInfo::getOriginalCombination($dbt,$fields{taxon_no});
Taxon.pm:409:        my @spellings = TaxonInfo::getAllSpellings($dbt,$orig_no);
Taxon.pm:414:            my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$spelling_no});
Taxon.pm:671:            my $taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$new_name,'ignore_common_name'=>"YES"});
Taxon.pm:769:		    my $parent = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$q->param('parent_taxon_no')});
Taxon.pm:775:            my @parents = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$parent_name,'ignore_common_name'=>"YES"});
Taxon.pm:897:        my @taxon = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$fields{'taxon_name'},'ignore_common_name'=>"YES"},['*']);
Taxon.pm:951:        my $db_orig_no = TaxonInfo::getOriginalCombination($dbt,$resultTaxonNumber);
Taxon.pm:1024:        my $origResultTaxonNumber = TaxonInfo::getOriginalCombination($dbt,$resultTaxonNumber);
Taxon.pm:1035:      <br><li><a href="$READ_URL?action=checkTaxonInfo&taxon_no=$resultTaxonNumber">Get general information about $fields{taxon_name}</a></li>   
Taxon.pm:1372:        my $child = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$t});
Taxon.pm:1400:        foreach my $p (TaxonInfo::getTaxa($dbt,{'taxon_name'=>$old_higher,'ignore_common_name'=>"YES"})) {
Taxon.pm:1436:        my $orig_parent_no = TaxonInfo::getOriginalCombination($dbt,$parent_no);
Taxon.pm:1461:    my $orig_parent_no = TaxonInfo::getOriginalCombination($dbt,$parent_no);
Taxon.pm:1496:    my $orig = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no},['*']);
Taxon.pm:1550:    my $t = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no});
Taxon.pm:1568:    my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$taxon_name,'ignore_common_name'=>"YES"},['taxon_no','taxon_rank','taxon_name','author1last','author2last','pubyr']);
Taxon.pm:1571:        my $orig_no_i = TaxonInfo::getOriginalCombination($dbt,$taxa[$i]->{'taxon_no'});
Taxon.pm:1574:            my $orig_no_j = TaxonInfo::getOriginalCombination($dbt,$taxa[$j]->{'taxon_no'});
Taxon.pm:1882:    my $focal_taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$type_taxon_no});
Taxon.pm:1924:        my $parent_taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent->{'taxon_no'}},['taxon_no','type_taxon_no','authorizer_no']);
Taxon.pm:1928:            my $type_taxon = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$parent->{'type_taxon_no'}});
Taxon.pm:1968:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$taxon->{'taxon_no'});
Taxon.pm:2237:                my $orig0 = TaxonInfo::getOriginalCombination($dbt,$matches[0]->{'taxon_no'});
Taxon.pm:2238:                my $orig1 = TaxonInfo::getOriginalCombination($dbt,$matches[1]->{'taxon_no'});
Taxon.pm:2273:    my $orig_no = TaxonInfo::getOriginalCombination($dbt,$taxon_no);
Taxon.pm:2276:    my @spelling_nos = TaxonInfo::getAllSpellings($dbt,$orig_no);
Taxon.pm:2279:    my $me = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$taxon_no},['*']);
Taxon.pm:2287:        my $spelling = TaxonInfo::getTaxa($dbt,{'taxon_no'=>$spelling_no},['*']);
Taxon.pm:2479:		my $orig = TaxonInfo::getOriginalCombination($dbt,$s);
Taxon.pm:2480:		TaxonInfo::getMostRecentClassification($dbt,$orig,{'recompute'=>'yes'});
Taxon.pm:2485:	Opinion::fixMassEstimates($dbt,$dbh,TaxonInfo::getOriginalCombination($dbt,$version1[0]));
Taxon.pm:2486:	Opinion::fixMassEstimates($dbt,$dbh,TaxonInfo::getOriginalCombination($dbt,$version2[0]));
Taxon.pm:2493:		my $orig = TaxonInfo::getOriginalCombination($dbt,$c->{'child_no'});
Taxon.pm:2494:		TaxonInfo::getMostRecentClassification($dbt,$orig,{'recompute'=>'yes'});
TaxonInfo.pm:1:package PBDB::TaxonInfo;
TaxonInfo.pm:45:# This is the front end for displayTaxonInfoResults - always use this instead if you want to 
TaxonInfo.pm:47:sub checkTaxonInfo {
TaxonInfo.pm:66:        displayTaxonInfoResults($dbt,$s,$q,$hbo);
TaxonInfo.pm:144:                displayTaxonInfoResults($dbt,$s,$q,$hbo);
TaxonInfo.pm:159:            displayTaxonInfoResults($dbt,$s,$q,$hbo);
TaxonInfo.pm:166:# By the time we're here, we're gone through checkTaxonInfo and one of these scenarios has happened
TaxonInfo.pm:172:sub displayTaxonInfoResults {
TaxonInfo.pm:341:		$discussion =~ s/(\[\[)([A-Za-z ]+|)(taxon )([0-9]+)(\|)/<a href="?a=basicTaxonInfo&amp;taxon_no=$4">/g;
TaxonInfo.pm:540:# used only by displayTaxonInfoResults
TaxonInfo.pm:549:    $options{'calling_script'} = 'TaxonInfo';
TaxonInfo.pm:847:        #     $options{'calling_script'} = "TaxonInfo";
TaxonInfo.pm:1316:                    $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_no=$taxon_no&amp;is_real_user=$is_real_user">$show_name</a>|;
TaxonInfo.pm:1318:                    $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_name=$taxon_name&amp;is_real_user=$is_real_user">$show_name</a>|;
TaxonInfo.pm:1415:		my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_no=$record->{taxon_no}&amp;is_real_user=$is_real_user">$record->{taxon_name}|;
TaxonInfo.pm:1442:                    my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_no=$record->{taxon_no}&amp;is_real_user=$is_real_user">$record->{taxon_name}|;
TaxonInfo.pm:1495:                            my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_name=$occ_name&amp;is_real_user=$is_real_user">$occ_name</a>|;
TaxonInfo.pm:1499:                        my $link = qq|<a href="?a=checkTaxonInfo&amp;taxon_name=$occ_name&amp;is_real_user=$is_real_user">$occ_name</a>|;
TaxonInfo.pm:1719:				$text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon->{taxon_name}</a> was named as $article $rank. ";
TaxonInfo.pm:1726:			$text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon->{taxon_name}</a> is $article $rank. ";
TaxonInfo.pm:1729:		$text .= "<i><a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon->{taxon_name}</a></i> was named by ";
TaxonInfo.pm:1750:    my ($typeInfo,$typeLocality) = printTypeInfo($dbt,join(',',@spellings),$taxon,$is_real_user,'checkTaxonInfo',1);
TaxonInfo.pm:1762:            $text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$row->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon_name</a>, ";
TaxonInfo.pm:1937:        #$text .= "<a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon->{taxon_no}&amp;is_real_user=$is_real_user\">$taxon_name</a> was assigned ";
TaxonInfo.pm:1948:            $text .= " to <a href=\"?a=checkTaxonInfo&amp;taxon_no=$parent->{taxon_no}&amp;is_real_user=$is_real_user\">$parent_name</a> by ";
TaxonInfo.pm:3571:	print "<div style=\"padding-left: 6em;\"><a href=\"?a=beginFirstAppearance\">Search again</a> - <a href=\"?a=displayTaxonInfoResults&amp;taxon_no=$nos[0]->{'taxon_no'}\">See more details about $name</a></div>\n";
TaxonInfo.pm:3642:sub basicTaxonInfo	{
TaxonInfo.pm:3659:	# reuses some old checkTaxonInfo functionality JA 8.4.12
TaxonInfo.pm:3869:				push @parent_links , "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$cof->{$r.'_no'}\">".$cof->{$r}."</a>";
TaxonInfo.pm:3886:		$discussion =~ s/(\[\[)([A-Za-z ]+|)(taxon )([0-9]+)(\|)/<a href="?a=basicTaxonInfo&amp;taxon_no=$4">/g;
TaxonInfo.pm:4013:			print "<p style=\"clear: left;\">$belongs <a href=\"?a=basicTaxonInfo&amp;taxon_no=$parent->{'taxon_no'}\">".italicize($parent)."</a>";
TaxonInfo.pm:4049:				print "<p style=\"clear: left;\">Sister taxon: <a href=\"?a=basicTaxonInfo&amp;taxon_no=$sisters[0]->{'taxon_no'}\">".italicize($sisters[0])."</a>";
TaxonInfo.pm:4053:				$list .= "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">".italicize($_)."</a>, " foreach @sisters;
TaxonInfo.pm:4075:				$list .= "<a href=\"?a=basicTaxonInfo&amp;taxon_no=$_->{'taxon_no'}\">".italicize($_)."</a>, " foreach @child_names;
TaxonInfo.pm:4094:		($typeInfo,$typeLocality) = printTypeInfo($dbt,join(',',@spellings),$auth,1,'basicTaxonInfo');
TaxonInfo.pm:4107:						my ($synTypeInfo,$synTypeLocality) = printTypeInfo($dbt,join(',',@spellings),$distinct_auths[$i],1,'basicTaxonInfo');
TaxonInfo.pm:4150:			my $orig = PBDB::TaxonInfo::getOriginalCombination($dbt,$taxon_no);
TaxonInfo.pm:4151:			my $ss = PBDB::TaxonInfo::getSeniorSynonym($dbt,$orig);
TaxonInfo.pm:4399:			print "<p><a href=\"?a=checkTaxonInfo&amp;taxon_no=$taxon_no&amp;is_real_user=1\">Show more details</a></p>\n\n";
TaxonInfo.pm:4401:			print "<p><a href=\"?a=checkTaxonInfo&amp;taxon_name=$taxon_name&amp;is_real_user=1\">Show more details</a></p>\n\n";
TaxonInfo.pm:4412:<input type="hidden" name="action" value="basicTaxonInfo">
TaxonInfo.pm:4434:# originally called randomTaxonInfo and then hijacked to also get all names in
TaxonInfo.pm:4519:		basicTaxonInfo($q,$s,$dbt,$hbo);
TaxonInfo.pm:4524:# calved off from checkTaxonInfo JA 8.4.12
TaxonInfo.pm:4557:		print qq|<td class=$classes style="width: 1em; padding: 0.25em; padding-left: 1em; padding-right: 1em; white-space: nowrap;">&bull; <a href="?a=basicTaxonInfo&amp;taxon_no=$results[$i]->{taxon_no}" style="color: black;">$authorityLine</a></td>|;
TaxonInfo.pm:4656:#     @results = PBDB::TaxonInfo::getTaxa($dbt,{'reference_no'=>345}); 
TaxonInfo.pm:4660:#     @results = PBDB::TaxonInfo::getTaxa($dbt,{'taxon_name'=>'Chelonia'},['taxon_name','taxon_rank','author1last','author2last','pubyr');  
TaxonQuery.pm:1162:    # [see TaxonInfo.pm, line 1252 as of 2012-06-24]
TaxonQuery.pm:1166:    # [see TaxonInfo.pm, lines 1232-1271 as of 2012-06-24]
TaxonQuery.pm:1690:    #  section of TaxonInfo.pm that does not belong with the PaleoDB
TypoChecker.pm:221:            my @taxa = TaxonInfo::getTaxa($dbt,{'taxon_name'=>$g},['taxon_no']);
TypoChecker.pm:289:                        $radio .= "<a target=\"_TAXONPOPUP\" href=\"$READ_URL?action=checkTaxonInfo&taxon_name=$_\">$_</a>";
TypoChecker.pm:308:                                 . "<a target=\"_TAXONPOPUP\" href=\"$READ_URL?action=checkTaxonInfo&taxon_name=$_\">$_</a>"
------------ TaxonQuery
DataQuery.pm:6:# TaxonQuery.pm and CollectionQuery.pm. 
TaxonQuery.pm:2:# TaxonQuery
TaxonQuery.pm:9:package PBDB::TaxonQuery;
------------ TimeLookup
Classic.pm:34:use PBDB::TimeLookup;
Classic.pm:1276:                    my $t = new TimeLookup($dbt);
Classic.pm:1533:    my $t = new TimeLookup($dbt);
Classic.pm:1676:	my $t = new TimeLookup($dbt);
Collection.pm:20:use PBDB::TimeLookup;
Collection.pm:281:        my $t = new TimeLookup($dbt);
Collection.pm:1818:	my $t = new TimeLookup($dbt);
CollectionEntry.pm:13:use PBDB::TimeLookup;
CollectionEntry.pm:895:        my $t = new TimeLookup($dbt);
CollectionEntry.pm:1855:    #my $t = new TimeLookup($dbt);
Confidence.pm:110:    my $t = new TimeLookup($dbt);
Confidence.pm:725:    my $t = new TimeLookup($dbt);
Confidence.pm:744:    my %intervals = TimeLookup::allIntervals($dbt);
Curve.pm:5:use PBDB::TimeLookup;
Curve.pm:408:	# Schroeter switched this to a TimeLookup call at some point
Curve.pm:410:	my $t = new TimeLookup($dbt);
Curve.pm:412:	my %intervals = TimeLookup::allIntervals($dbt);
Download.pm:4:use PBDB::TimeLookup;
Download.pm:59:    my $t = new TimeLookup($dbt);
Download.pm:3929:        @intervalnames = TimeLookup::getBins();
FossilRecord.pm:4:use PBDB::TimeLookup;
FossilRecord.pm:50:        my $t = new TimeLookup($dbt);
FossilRecord.pm:51:        my ($eml_max,$max) = TimeLookup::splitInterval($q->param('max_interval_name'));
FossilRecord.pm:52:        my ($eml_min,$min) = TimeLookup::splitInterval($q->param('min_interval_name'));
FossilRecord.pm:1472:    my ($eml,$name) = TimeLookup::splitInterval($full_name);
FossilRecord.pm:1473:    my $no = TimeLookup::getIntervalNo($dbt,$eml,$name);
HTMLBuilder.pm:3:use PBDB::TimeLookup;
Main.pm:33:use PBDB::TimeLookup;
Map.pm:10:use PBDB::TimeLookup;
Map.pm:162:            my ($eml, $name) = TimeLookup::splitInterval($interval_name);
Map.pm:212:                    ($toptions{'eml_max_interval'},$toptions{'max_interval'}) = TimeLookup::splitInterval($toptions{'interval_name'});
Map.pm:227:                    ($options{'eml_max_interval'},$options{'max_interval'}) = TimeLookup::splitInterval($options{'interval_name'});
Measurement.pm:724:		require TimeLookup;
Measurement.pm:725:		my $t = new TimeLookup($dbt);
PBDBUtil.pm:252:            my @binnames = PBDB::TimeLookup::getBins();
Report.pm:10:use PBDB::TimeLookup;
Report.pm:470:    my $t = new TimeLookup($dbt);
Report.pm:790:    my $t = new TimeLookup($dbt);
Report.pm:1190:		require TimeLookup;
Report.pm:1191:		my $t = new TimeLookup($dbt);
Scales.pm:4:use TimeLookup;
Scales.pm:740:	TimeLookup::buildLookupTable($dbt);
Scales.pm:751:	my $t = new TimeLookup($dbt);
Scales.pm:902:		my $lower = TimeLookup::printBoundary($itv->{'base_age'});
Scales.pm:905:		my $upper = TimeLookup::printBoundary($itv->{'top_age'}); 
Strata.pm:498:    my $t = new TimeLookup($dbt);
TaxonInfo.pm:4:use PBDB::TimeLookup;
TimeLookup.pm:1:package PBDB::TimeLookup;
TimeLookup.pm:8:@TimeLookup::bins = ("Cenozoic 6", "Cenozoic 5", "Cenozoic 4", "Cenozoic 3", "Cenozoic 2", "Cenozoic 1", "Cretaceous 8", "Cretaceous 7", "Cretaceous 6", "Cretaceous 5", "Cretaceous 4", "Cretaceous 3", "Cretaceous 2", "Cretaceous 1", "Jurassic 6", "Jurassic 5", "Jurassic 4", "Jurassic 3", "Jurassic 2", "Jurassic 1", "Triassic 4", "Triassic 3", "Triassic 2", "Triassic 1", "Permian 4", "Permian 3", "Permian 2", "Permian 1", "Carboniferous 5", "Carboniferous 4", "Carboniferous 3", "Carboniferous 2", "Carboniferous 1", "Devonian 5", "Devonian 4", "Devonian 3", "Devonian 2", "Devonian 1", "Silurian 2", "Silurian 1", "Ordovician 5", "Ordovician 4", "Ordovician 3", "Ordovician 2", "Ordovician 1", "Cambrian 4", "Cambrian 3", "Cambrian 2", "Cambrian 1");
TimeLookup.pm:11:$isBin{$_}++ foreach @TimeLookup::bins;
TimeLookup.pm:13:%TimeLookup::binning = (
TimeLookup.pm:154:@TimeLookup::FR2_bins = ("Pleistocene","Pliocene","Upper Miocene","Middle Miocene","Lower Miocene","Chattian","Rupelian","Priabonian","Bartonian","Lutetian","Ypresian","Thanetian","Danian","Maastrichtian","Campanian","Santonian","Coniacian","Turonian","Cenomanian","Albian","Aptian","Barremian","Hauterivian","Valanginian","Berriasian","Portlandian","Kimmeridgian","Oxfordian","Callovian","Bathonian","Bajocian","Aalenian","Toarcian","Pliensbachian","Sinemurian","Hettangian","Rhaetian","Norian","Carnian","Ladinian","Anisian","Scythian","Tatarian","Kazanian","Kungurian","Artinskian","Sakmarian","Asselian","Gzelian","Kasimovian","Moscovian","Bashkirian","Serpukhovian","Visean","Tournaisian","Famennian","Frasnian","Givetian","Eifelian","Emsian","Pragian","Lochkovian","Pridoli","Ludlow","Wenlock","Llandovery","Ashgill","Caradoc","Llanvirn","Arenig","Tremadoc","Merioneth","St Davids","Caerfai","Vendian");
TimeLookup.pm:157:$isFR2Bin{$_}++ foreach @TimeLookup::FR2_bins;
TimeLookup.pm:159:%TimeLookup::FR2_binning = (
TimeLookup.pm:285:%TimeLookup::rank_order = (
TimeLookup.pm:298:    return @TimeLookup::bins;
TimeLookup.pm:302:    return @TimeLookup::FR2_bins;
TimeLookup.pm:306:    return \%TimeLookup::binning;
TimeLookup.pm:941:			%binning = %TimeLookup::binning;
TimeLookup.pm:942:			@scale_intervals = @TimeLookup::bins;
TimeLookup.pm:944:			%binning = %TimeLookup::FR2_binning;
TimeLookup.pm:945:			@scale_intervals = @TimeLookup::FR2_bins;
TimeLookup.pm:1120:        for(my $i=0;$i<scalar(@TimeLookup::bins);$i++) {
TimeLookup.pm:1121:            if ($max eq $TimeLookup::bins[$i]) {
TimeLookup.pm:1124:            if ($min eq $TimeLookup::bins[$i]) {
TimeLookup.pm:1137:            @intervals = $self->mapIntervals(@TimeLookup::bins[$index1 .. $index2]);
TimeLookup.pm:1193:        @intervals = @TimeLookup::bins;
TimeLookup.pm:1195:        @intervals = @TimeLookup::FR2_bins;
TimeLookup.pm:1239:            while (my ($interval_no,$binname) = each %TimeLookup::binning) {
TimeLookup.pm:1243:            while (my ($interval_no,$binname) = each %TimeLookup::FR2_binning) {
TimeLookup.pm:1297:    my @binCount = @TimeLookup::bins;
TimeLookup.pm:1299:        @binCount = @TimeLookup::FR2_bins;
TimeLookup.pm:1302:        my $bin = $TimeLookup::bins[$i];
TimeLookup.pm:1303:        my %binning = %TimeLookup::binning;
TimeLookup.pm:1305:            $bin = $TimeLookup::FR2_bins[$i];
TimeLookup.pm:1306:            %binning = %TimeLookup::FR2_binning;
TypoChecker.pm:181:    my $t = new TimeLookup($dbt);
Validation.pm:22:use PBDB::TimeLookup;
Validation.pm:228:        my @binnames = TimeLookup::getBins();
------------ TreeQuery
TreeQuery.pm:2:# TreeQuery
TreeQuery.pm:9:package PBDB::TreeQuery;
------------ TypoChecker
Classic.pm:40:use PBDB::TypoChecker;
Classic.pm:2047:                            my @results = keys %{TypoChecker::taxonTypoCheck($dbt,$q->param('taxon_name'),"",1)};
Classic.pm:2115:                @typoResults = TypoChecker::typoCheck($dbt,'authorities','taxon_name','taxon_no,taxon_name,taxon_rank','',$q->param('taxon_name'),1);
Classic.pm:2560:	TypoChecker::searchOccurrenceMisspellingForm ($dbt,$q,$s,$hbo);
Classic.pm:2569:	TypoChecker::occurrenceMisspellingForm ($dbt,$q,$s,$hbo);
Classic.pm:2578:	TypoChecker::submitOccurrenceMisspelling($dbt,$q,$s,$hbo);
Classic.pm:4645:	my @new_genera = TypoChecker::newTaxonNames($dbt,\@genera,'genus_name');
Classic.pm:4646:	my @new_subgenera =  TypoChecker::newTaxonNames($dbt,\@subgenera,'subgenus_name');
Classic.pm:4647:	my @new_species =  TypoChecker::newTaxonNames($dbt,\@species,'species_name');
FossilRecord.pm:1265:        my @matches = TypoChecker::typoCheck($dbt,'authorities','taxon_name','taxon_no,taxon_name,taxon_rank','AND taxon_rank LIKE '.$dbh->quote($rank),$name);
FossilRecord.pm:1422:        my @matches = TypoChecker::typoCheck($dbt,'authorities','taxon_name','taxon_no,taxon_name,taxon_rank','AND taxon_rank LIKE '.$dbh->quote($rank),$name);
Main.pm:39:use PBDB::TypoChecker;
Opinion.pm:4:use PBDB::TypoChecker;
TypoChecker.pm:1:package PBDB::TypoChecker;
TypoChecker.pm:11:$TypoChecker::edit_distance = 3;
TypoChecker.pm:662:            if (editDistance($w1,$w2) < $TypoChecker::edit_distance) {
------------ Validation
Classic.pm:49:use PBDB::Validation;
Classic.pm:4446:            if (!PBDB::Validation::validOccurrenceGenus($fields{'genus_reso'},$fields{'genus_name'})) {
Classic.pm:4450:            if ($fields{'subgenus_name'} !~ /^\s*$/ && !PBDB::Validation::validOccurrenceGenus($fields{'subgenus_reso'},$fields{'subgenus_name'})) {
Classic.pm:4454:            if ($fields{'species_name'} =~ /^\s*$/ || !PBDB::Validation::validOccurrenceSpecies($fields{'species_reso'},$fields{'species_name'})) {
Collection.pm:17:use PBDB::Validation;
Collection.pm:275:        if ($max =~ /[a-zA-Z]/ && !PBDB::Validation::checkInterval($dbt,$eml_max,$max)) {
Collection.pm:278:        if ($min =~ /[a-z][A-Z]/ && !PBDB::Validation::checkInterval($dbt,$eml_min,$min)) {
Download.pm:6:use PBDB::Validation;
Download.pm:4193:            my $ret = Validation::checkInterval($dbt,$eml,$name);
Download.pm:4207:            my $ret = Validation::checkInterval($dbt,$eml,$name);
Main.pm:48:use PBDB::Validation;
Map.pm:163:            if (!Validation::checkInterval($dbt,$eml,$name)) {
Opinion.pm:855:		if  ($q->param('author1init') && ! Validation::properInitial($q->param('author1init'))) {
Opinion.pm:858:		if  ($q->param('author2init') && ! Validation::properInitial($q->param('author2init'))) {
Opinion.pm:861:		if  ( $q->param('author1last') && !Validation::properLastName($q->param('author1last')) ) {
Opinion.pm:864:		if  ( $q->param('author2last') && !Validation::properLastName($q->param('author2last')) ) {
Opinion.pm:874:			if (! Validation::properYear($pubyr)) {
Taxon.pm:577:        if  ($q->param('author1init') && ! Validation::properInitial($q->param('author1init'))) {
Taxon.pm:580:        if  ($q->param('author2init') && ! Validation::properInitial($q->param('author2init'))) {
Taxon.pm:583:        if  ( $q->param('author1last') && !Validation::properLastName($q->param('author1last')) ) {
Taxon.pm:586:        if  ( $q->param('author2last') && !Validation::properLastName($q->param('author2last')) ) {
Taxon.pm:649:        if (! Validation::properYear( $pubyr ) ) {
Validation.pm:20:package PBDB::Validation;
